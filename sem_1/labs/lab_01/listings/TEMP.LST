            Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 1

020A:0746  E8 0070		;*		call	sub_3			; (07B9)
020A:0746  E8 70 00				db	0E8h, 70h, 00h
020A:0749  06					push	es
020A:074A  1E					push	ds
020A:074B  50					push	ax
020A:074C  52					push	dx
020A:074D  B8 0040				mov	ax,40h
020A:0750  8E D8				mov	ds,ax
020A:0752  33 C0				xor	ax,ax			; Zero register
020A:0754  8E C0				mov	es,ax
020A:0756  FF 06 006C				inc	word ptr ds:[6Ch]	; (0040:006C=9A82h)
020A:075A  75 04				jnz	loc_2			; Jump if not zero
020A:075C  FF 06 006E				inc	word ptr ds:[6Eh]	; (0040:006E=0)
020A:0760			loc_2:
020A:0760  83 3E 006E 18			cmp	word ptr ds:[6Eh],18h	; (0040:006E=0)
020A:0765  75 15				jne	loc_3			; Jump if not equal
020A:0767  81 3E 006C 00B0			cmp	word ptr ds:[6Ch],0B0h	; (0040:006C=9A82h)
020A:076D  75 0D				jne	loc_3			; Jump if not equal
020A:076F  A3 006E				mov	word ptr ds:[6Eh],ax	; (0040:006E=0)
020A:0772  A3 006C				mov	word ptr ds:[6Ch],ax	; (0040:006C=9A82h)
020A:0775  C6 06 0070 01			mov	byte ptr ds:[70h],1	; (0040:0070=0)
020A:077A  0C 08				or	al,8
020A:077C			loc_3:
020A:077C  50					push	ax
020A:077D  FE 0E 0040				dec	byte ptr ds:[40h]	; (0040:0040=39h)
020A:0781  75 0B				jnz	loc_4			; Jump if not zero
020A:0783  80 26 003F F0			and	byte ptr ds:[3Fh],0F0h	; (0040:003F=0)
020A:0788  B0 0C				mov	al,0Ch
020A:078A  BA 03F2				mov	dx,3F2h
020A:078D  EE					out	dx,al			; port 3F2h, dsk0 contrl output
020A:078E			loc_4:
020A:078E  58					pop	ax
020A:078F  F7 06 0314 0004			test	word ptr ds:[314h],4	; (0040:0314=3200h)
020A:0795  75 0C				jnz	loc_5			; Jump if not zero
020A:0797  9F					lahf				; Load ah from flags
020A:0798  86 E0				xchg	ah,al
020A:079A  50					push	ax
020A:079B  26: FF 1E 0070			call	dword ptr es:[70h]	; (0000:0070=6ADh)
020A:07A0  EB 03				jmp	short loc_6		; (07A5)
020A:07A2  90					nop
020A:07A3			loc_5:
020A:07A3  CD 1C				int	1Ch			; Timer break (call each 18.2ms)
020A:07A5			loc_6:
020A:07A5  E8 0011				call	sub_3			; (07B9)
020A:07A8  B0 20				mov	al,20h			; ' '
020A:07AA  E6 20				out	20h,al			; port 20h, 8259-1 int command
										;  al = 20h, end of interrupt
020A:07AC  5A					pop	dx
020A:07AD  58					pop	ax
020A:07AE  1F					pop	ds
020A:07AF  07					pop	es
020A:07B0  E9 FE99				jmp	$-164h
020A:07B3  C4					db	0C4h
							                        ;* No entry point to code
020A:07B4  C4 0E 93E9				les	cx,dword ptr ds:[93E9h]	; (0000:93E9=0C611h) Load seg:offset p
020A:07B8  FE					db	0FEh

           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 2

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:07B9			sub_3		proc	near
020A:07B9  1E					push	ds
020A:07BA  50					push	ax
020A:07BB  B8 0040				mov	ax,40h
020A:07BE  8E D8				mov	ds,ax
020A:07C0  9F					lahf				; Load ah from flags
020A:07C1  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:07C7  75 0C				jnz	loc_8			; Jump if not zero
020A:07C9  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:07D0			loc_7:
020A:07D0  9E					sahf				; Store ah into flags
020A:07D1  58					pop	ax
020A:07D2  1F					pop	ds
020A:07D3  EB 03				jmp	short loc_9		; (07D8)
020A:07D5			loc_8:
020A:07D5  FA					cli				; Disable interrupts
020A:07D6  EB F8				jmp	short loc_7		; (07D0)
020A:07D8			loc_9:
020A:07D8  C3					retn
				sub_3		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:07D9			sub_4		proc	near
020A:07D9  1E					push	ds
020A:07DA  50					push	ax
020A:07DB  B8 0040				mov	ax,40h
020A:07DE  8E D8				mov	ds,ax
020A:07E0  9F					lahf				; Load ah from flags
020A:07E1  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:07E7  75 14				jnz	loc_11			; Jump if not zero
020A:07E9  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:07EF  75 0C				jnz	loc_11			; Jump if not zero
020A:07F1  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:07F8			loc_10:
020A:07F8  9E					sahf				; Store ah into flags
020A:07F9  58					pop	ax
020A:07FA  1F					pop	ds
020A:07FB  EB 03				jmp	short loc_12		; (0800)
020A:07FD			loc_11:
020A:07FD  FB					sti				; Enable interrupts
020A:07FE  EB F8				jmp	short loc_10		; (07F8)
020A:0800			loc_12:
020A:0800  C3					retn
				sub_4		endp

020A:0801  00					db	0
020A:0802  0000			data_84		dw	0
020A:0804  0000			data_85		dw	0

           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 3

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0806			sub_5		proc	near
020A:0806  2E: FF 06 0804			inc	cs:data_85		; (020A:0804=0)
020A:080B  3D 13FF				cmp	ax,13FFh
020A:080E  75 5B				jne	loc_15			; Jump if not equal
020A:0810  83 F9 01				cmp	cx,1
020A:0813  74 40				je	loc_13			; Jump if equal
020A:0815  56					push	si
020A:0816  BE 00A4				mov	si,0A4h
020A:0819  2E: 2B 36 0802			sub	si,cs:data_84		; (020A:0802=0)
020A:081E  3B CE				cmp	cx,si
020A:0820  73 3E				jae	loc_14			; Jump if above or =
020A:0822  57					push	di
020A:0823  51					push	cx
020A:0824  52					push	dx
020A:0825  1E					push	ds
020A:0826  06					push	es
020A:0827  8C C2				mov	dx,es
020A:0829  8E DA				mov	ds,dx
020A:082B  BA B000				mov	dx,0B000h
020A:082E  8E C2				mov	es,dx
020A:0830  8B D1				mov	dx,cx
020A:0832  8B F7				mov	si,di
020A:0834  2E: 8B 3E 0802			mov	di,cs:data_84		; (020A:0802=0)
020A:0839  FC					cld				; Clear direction
020A:083A  D1 E9				shr	cx,1			; Shift w/zeros fill
020A:083C  F3/ A5				rep	movsw			; Rep when cx >0 Mov [si] to es:[di]
020A:083E  80 D1 00				adc	cl,0
020A:0841  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:0843  2E: 01 16 0802			add	cs:data_84,dx		; (020A:0802=0)
020A:0848  07					pop	es
020A:0849  1F					pop	ds
020A:084A  5A					pop	dx
020A:084B  59					pop	cx
020A:084C  5F					pop	di
020A:084D  5E					pop	si
020A:084E  F9					stc				; Set carry flag
020A:084F  2E: FF 0E 0804			dec	cs:data_85		; (020A:0804=0)
020A:0854  C3					retn
020A:0855			loc_13:
020A:0855  50					push	ax
020A:0856  B4 0E				mov	ah,0Eh
020A:0858  26: 8A 05				mov	al,es:[di]
020A:085B  E8 0012				call	sub_6			; (0870)
020A:085E  58					pop	ax
020A:085F  C3					retn
020A:0860			loc_14:
020A:0860  5E					pop	si
020A:0861  2E: FF 0E 0804			dec	cs:data_85		; (020A:0804=0)
020A:0866  C4					db	0C4h
020A:0867  C4 42 F9				les	ax,dword ptr [bp+si-7]	; Load seg:offset ptr
020A:086A  C3					retn
020A:086B			loc_15:
020A:086B  80 FC 0E				cmp	ah,0Eh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 4

020A:086E  75 28				jne	loc_16			; Jump if not equal

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

020A:0870			sub_6:
020A:0870  56					push	si
020A:0871  2E: 8B 36 0802			mov	si,cs:data_84		; (020A:0802=0)
020A:0876  81 FE 00A4				cmp	si,0A4h
020A:087A  73 E4				jae	loc_14			; Jump if above or =
020A:087C  1E					push	ds
020A:087D  BE B000				mov	si,0B000h
020A:0880  8E DE				mov	ds,si
020A:0882  2E: 8B 36 0802			mov	si,cs:data_84		; (020A:0802=0)
020A:0887  88 04				mov	[si],al
020A:0889  46					inc	si
020A:088A  2E: 89 36 0802			mov	cs:data_84,si		; (020A:0802=0)
020A:088F  1F					pop	ds
020A:0890  5E					pop	si
020A:0891  F9					stc				; Set carry flag
020A:0892  2E: FF 0E 0804			dec	cs:data_85		; (020A:0804=0)
020A:0897  C3					retn
020A:0898			loc_16:
020A:0898  50					push	ax
020A:0899  B8 13FE				mov	ax,13FEh
020A:089C  C4					db	0C4h
020A:089D  C4 42 58				les	ax,dword ptr [bp+si+58h]	; Load seg:offset ptr
020A:08A0  F8					clc				; Clear carry flag
020A:08A1  2E: FF 0E 0804			dec	cs:data_85		; (020A:0804=0)
020A:08A6  C3					retn
				sub_5		endp

020A:08A7  00			data_86		db	0
020A:08A8  00			data_87		db	0
020A:08A9  2E: 80 3E 08A7 02			cmp	cs:data_86,2		; (020A:08A7=0)
020A:08AF  75 05				jne	loc_17			; Jump if not equal
020A:08B1  E8 FF52				call	sub_5			; (0806)
020A:08B4  72 5F				jc	loc_23			; Jump if carry Set
020A:08B6			loc_17:
020A:08B6  2E: 80 3E 08A7 01			cmp	cs:data_86,1		; (020A:08A7=0)
020A:08BC  74 5D				je	loc_25			; Jump if equal
020A:08BE  80 FC 00				cmp	ah,0
020A:08C1  74 30				je	loc_21			; Jump if equal
020A:08C3  80 FC 1C				cmp	ah,1Ch
020A:08C6  77 0B				ja	loc_18			; Jump if above
020A:08C8  80 FC 04				cmp	ah,4
020A:08CB  74 20				je	loc_20			; Jump if equal
020A:08CD  C4					db	0C4h
020A:08CE  C4 42 EB				les	ax,dword ptr [bp+si-15h]	; Load seg:offset ptr
020A:08D1  43					inc	bx
020A:08D2  90					nop
020A:08D3			loc_18:
020A:08D3  80 FC 4F				cmp	ah,4Fh			; 'O'
020A:08D6  75 06				jne	loc_19			; Jump if not equal
020A:08D8  C4					db	0C4h
020A:08D9  C4 BE 73EB				les	di,dword ptr [bp+73EBh]	; Load seg:offset ptr
020A:08DD  90					nop
020A:08DE			loc_19:
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 5

020A:08DE  80 FC F0				cmp	ah,0F0h
020A:08E1  72 35				jb	loc_24			; Jump if below
020A:08E3  80 FC F7				cmp	ah,0F7h
020A:08E6  76 05				jbe	loc_20			; Jump if below or =
020A:08E8  80 FC FA				cmp	ah,0FAh
020A:08EB  75 2B				jne	loc_24			; Jump if not equal
020A:08ED			loc_20:
020A:08ED  C4					db	0C4h
020A:08EE  C4 BE 23EB				les	di,dword ptr [bp+23EBh]	; Load seg:offset ptr
020A:08F2  90					nop
020A:08F3			loc_21:
020A:08F3  2E: C6 06 08A8 01			mov	cs:data_87,1		; (020A:08A8=0)
020A:08F9  C4					db	0C4h
020A:08FA  C4 BE 9090				les	di,dword ptr [bp-6F70h]	; Load seg:offset ptr
020A:08FE  50					push	ax
020A:08FF  25 007F				and	ax,7Fh
020A:0902  3C 03				cmp	al,3
020A:0904  76 08				jbe	loc_22			; Jump if below or =
020A:0906  3C 07				cmp	al,7
020A:0908  74 04				je	loc_22			; Jump if equal
020A:090A  58					pop	ax
020A:090B  EB 0E				jmp	short loc_25		; (091B)
020A:090D  90					nop
020A:090E			loc_22:
020A:090E  58					pop	ax
020A:090F  2E: C6 06 08A8 00			mov	cs:data_87,0		; (020A:08A8=0)
020A:0915			loc_23:
020A:0915  E9 FD34				jmp	$-2C9h
020A:0918			loc_24:
020A:0918  F9					stc				; Set carry flag
020A:0919  EB FA				jmp	short loc_23		; (0915)
020A:091B			loc_25:
020A:091B  2E: C6 06 08A8 00			mov	cs:data_87,0		; (020A:08A8=0)
020A:0921  3D 13FF				cmp	ax,13FFh
020A:0924  74 2F				je	loc_29			; Jump if equal
020A:0926  80 FC F0				cmp	ah,0F0h
020A:0929  72 0D				jb	loc_26			; Jump if below
020A:092B  80 FC F7				cmp	ah,0F7h
020A:092E  76 BD				jbe	loc_20			; Jump if below or =
020A:0930  80 FC FA				cmp	ah,0FAh
020A:0933  74 B8				je	loc_20			; Jump if equal
020A:0935  EB 19				jmp	short loc_28		; (0950)
020A:0937  90					nop
020A:0938			loc_26:
020A:0938  80 FC 04				cmp	ah,4
020A:093B  74 B0				je	loc_20			; Jump if equal
020A:093D  80 FC 00				cmp	ah,0
020A:0940  75 06				jne	loc_27			; Jump if not equal
020A:0942  C4					db	0C4h
020A:0943  C4 BE 09EB				les	di,dword ptr [bp+9EBh]	; Load seg:offset ptr
020A:0947  90					nop
020A:0948			loc_27:
020A:0948  80 FC 11				cmp	ah,11h
020A:094B  75 03				jne	loc_28			; Jump if not equal
020A:094D  C4					db	0C4h
020A:094E  C4 BE 22EA				les	di,dword ptr [bp+22EAh]	; Load seg:offset ptr
020A:0952  00 00				add	[bx+si],al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 6

020A:0954  C0					db	0C0h
020A:0955			loc_29:
020A:0955  56					push	si
020A:0956  57					push	di
020A:0957  55					push	bp

020A:0958			locloop_30:
020A:0958  BA 0046				mov	dx,46h
020A:095B  52					push	dx
020A:095C  0E					push	cs
020A:095D  BB 096C				mov	bx,96Ch
020A:0960  53					push	bx
020A:0961  BB 0007				mov	bx,7
020A:0964  B4 0E				mov	ah,0Eh
020A:0966  26: 8A 05				mov	al,es:[di]
020A:0969  47					inc	di
020A:096A  EB E4		;*		jmp	short loc_28		;*(0950)
020A:096A  EB E4				db	0EBh,0E4h
							                        ;* No entry point to code
020A:096C  E2 EA				loop	locloop_30		; Loop if cx > 0

020A:096E  5D					pop	bp
020A:096F  5F					pop	di
020A:0970  5E					pop	si
020A:0971  B8 0001				mov	ax,1
020A:0974			loc_31:
020A:0974  EB 9F				jmp	short loc_23		; (0915)
							                        ;* No entry point to code
020A:0976  2E: 80 3E 08A7 02			cmp	cs:data_86,2		; (020A:08A7=0)
020A:097C  75 05				jne	loc_32			; Jump if not equal
020A:097E  E8 FE85				call	sub_5			; (0806)
020A:0981  72 F1				jc	loc_31			; Jump if carry Set
020A:0983			loc_32:
020A:0983  2E: 80 3E 08A7 01			cmp	cs:data_86,1		; (020A:08A7=0)
020A:0989  74 06				je	loc_33			; Jump if equal
020A:098B  C4					db	0C4h
020A:098C  C4 10				les	dx,dword ptr [bx+si]	; Load seg:offset ptr
020A:098E  E9 FCBB				jmp	$-342h
020A:0991			loc_33:
020A:0991  80 FC 13				cmp	ah,13h
020A:0994  75 04				jne	loc_34			; Jump if not equal
020A:0996  3C FF				cmp	al,0FFh
020A:0998  74 BB				je	loc_29			; Jump if equal
020A:099A			loc_34:
020A:099A  EA F000:FF53		;*		jmp	far ptr loc_272		;*(F000:FF53)
020A:099A  EA					db	0EAh
020A:099B  FF53 F000				dw	0FF53h, 0F000h
020A:099F  CD 10				int	10h			; Video display   ah=functn 00h
										;  set display mode in al
020A:09A1  C4					db	0C4h
020A:09A2  C4					db	0C4h
020A:09A3  FE C4				inc	ah
020A:09A5  C4 11				les	dx,dword ptr [bx+di]	; Load seg:offset ptr
020A:09A7  E9 FCA2				jmp	$-35Bh
020A:09AA  C4					db	0C4h
							                        ;* No entry point to code
020A:09AB  C4 12				les	dx,dword ptr [bp+si]	; Load seg:offset ptr
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 7

020A:09AD  E9 FC9C				jmp	$-361h
020A:09B0  C4					db	0C4h
							                        ;* No entry point to code
020A:09B1  C4 14				les	dx,dword ptr [si]	; Load seg:offset ptr
020A:09B3  E9 FC96				jmp	$-367h
020A:09B6  87 DB				xchg	bx,bx
020A:09B8  0000			data_88		dw	0
020A:09BA  00 00				add	[bx+si],al
020A:09BC  17F2			data_89		dw	17F2h
020A:09BE  00 00				add	[bx+si],al
020A:09C0  0032			data_90		dw	32h
020A:09C2  00 00				add	[bx+si],al
020A:09C4  1E					push	ds
020A:09C5  53					push	bx
020A:09C6  BB 0040				mov	bx,40h
020A:09C9  8E DB				mov	ds,bx
020A:09CB  80 FC 10				cmp	ah,10h
020A:09CE  E8 FDE8				call	sub_3			; (07B9)
020A:09D1  72 03				jc	loc_35			; Jump if carry Set
020A:09D3  E9 00E0				jmp	loc_49			; (0AB6)
020A:09D6			loc_35:
020A:09D6  0A E4				or	ah,ah			; Zero ?
020A:09D8  74 3E				jz	loc_40			; Jump if zero
020A:09DA  FE CC				dec	ah
020A:09DC  74 74				jz	loc_44			; Jump if zero
020A:09DE  FE CC				dec	ah
020A:09E0  74 11				jz	loc_37			; Jump if zero
020A:09E2  FE CC				dec	ah
020A:09E4  74 08				jz	loc_36			; Jump if zero
020A:09E6  FE CC				dec	ah
020A:09E8  74 04				jz	loc_36			; Jump if zero
020A:09EA  FE CC				dec	ah
020A:09EC  74 0A				jz	loc_38			; Jump if zero
020A:09EE			loc_36:
020A:09EE  5B					pop	bx
020A:09EF  1F					pop	ds
020A:09F0  E9 FC59				jmp	$-3A4h
020A:09F3			loc_37:
020A:09F3  A0 0017				mov	al,byte ptr data_12+1	; (020A:0017=0)
020A:09F6  EB F6				jmp	short loc_36		; (09EE)
020A:09F8			loc_38:
020A:09F8  56					push	si
020A:09F9  8B 1E 001C				mov	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:09FD  8B F3				mov	si,bx
020A:09FF  E8 01B9				call	sub_11			; (0BBB)
020A:0A02  3B 1E 001A				cmp	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A06  74			data_91		db	74h			; Data table (indexed access)
020A:0A07  0B 89 890C				or	cx,word ptr ds:[890Ch][bx+di]	; (020A:890C=21EBh)
020A:0A0B  1E					push	ds
020A:0A0C  1C			data_92		db	1Ch			; Data table (indexed access)
020A:0A0D  00			data_93		db	0
020A:0A0E  B0 00				mov	al,0
020A:0A10  5E					pop	si
020A:0A11  EB DB				jmp	short loc_36		; (09EE)
020A:0A13			loc_39:
020A:0A13  B0 01				mov	al,1
020A:0A15  5E					pop	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 8

020A:0A16  EB D6				jmp	short loc_36		; (09EE)
020A:0A18			loc_40:
020A:0A18  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A1C  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0A20  75 13				jne	loc_42			; Jump if not equal
020A:0A22  E8 FDB4				call	sub_4			; (07D9)
020A:0A25  B8 9002				mov	ax,9002h
020A:0A28  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020A:0A2A			loc_41:
020A:0A2A  E8 FD8C				call	sub_3			; (07B9)
020A:0A2D  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A31  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0A35			loc_42:
020A:0A35  E8 0190				call	sub_12			; (0BC8)
020A:0A38  75 05				jnz	loc_43			; Jump if not zero
020A:0A3A  E8 00E3				call	sub_7			; (0B20)
020A:0A3D  EB EB				jmp	short loc_41		; (0A2A)
020A:0A3F			loc_43:
020A:0A3F  8B 07				mov	ax,[bx]
020A:0A41  E8 0177				call	sub_11			; (0BBB)
020A:0A44  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0A48  E8 0129				call	sub_10			; (0B74)
020A:0A4B  72 DD				jc	loc_41			; Jump if carry Set
020A:0A4D  E8 00FC				call	sub_8			; (0B4C)
020A:0A50  EB 9C				jmp	short loc_36		; (09EE)
020A:0A52			loc_44:
020A:0A52  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A56  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0A5A  8B 07				mov	ax,[bx]
020A:0A5C  E8 0169				call	sub_12			; (0BC8)
020A:0A5F  74 2F				jz	loc_46			; Jump if zero
020A:0A61  E8 00E8				call	sub_8			; (0B4C)
020A:0A64  E8 010D				call	sub_10			; (0B74)
020A:0A67  E8 FD6F				call	sub_4			; (07D9)
020A:0A6A  73 45				jnc	loc_48			; Jump if carry=0
020A:0A6C  E8 014C				call	sub_11			; (0BBB)
020A:0A6F  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0A73  EB DD				jmp	short loc_44		; (0A52)
020A:0A75			loc_45:
020A:0A75  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A79  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0A7D  8B 07				mov	ax,[bx]
020A:0A7F  E8 0146				call	sub_12			; (0BC8)
020A:0A82  74 0C				jz	loc_46			; Jump if zero
020A:0A84  E8 00C5				call	sub_8			; (0B4C)
020A:0A87  E8 00D1				call	sub_9			; (0B5B)
020A:0A8A  E8 FD4C				call	sub_4			; (07D9)
020A:0A8D  EB 22				jmp	short loc_48		; (0AB1)
020A:0A8F  90					nop
020A:0A90			loc_46:
020A:0A90  E8 FD46				call	sub_4			; (07D9)
020A:0A93  50					push	ax
020A:0A94  9F					lahf				; Load ah from flags
020A:0A95  50					push	ax
020A:0A96  2E: A1 09B8				mov	ax,cs:data_88		; (020A:09B8=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 9

020A:0A9A  2E: 3B 06 09C0			cmp	ax,cs:data_90		; (020A:09C0=32h)
020A:0A9F  72 08				jb	loc_47			; Jump if below
020A:0AA1  B4 01				mov	ah,1
020A:0AA3  C4					db	0C4h
020A:0AA4  C4 16 06EB				les	dx,dword ptr ds:[6EBh]	; (020A:06EB=52D2h) Load seg:offset pt
020A:0AA8  90					nop
020A:0AA9			loc_47:
020A:0AA9  2E: FF 06 09BC			inc	cs:data_89		; (020A:09BC=18BCh)
020A:0AAE  58					pop	ax
020A:0AAF  9E					sahf				; Store ah into flags
020A:0AB0  58					pop	ax
020A:0AB1			loc_48:
020A:0AB1  5B					pop	bx
020A:0AB2  1F					pop	ds
020A:0AB3  CA 0002				retf	2			; Return far
020A:0AB6			loc_49:
020A:0AB6  80 EC 10				sub	ah,10h
020A:0AB9  74 2C				jz	loc_51			; Jump if zero
020A:0ABB  FE CC				dec	ah
020A:0ABD  74 B6				jz	loc_45			; Jump if zero
020A:0ABF  FE CC				dec	ah
020A:0AC1  74 03				jz	loc_50			; Jump if zero
020A:0AC3  E9 FF28				jmp	loc_36			; (09EE)
020A:0AC6			loc_50:
020A:0AC6  A0 0018				mov	al,byte ptr ds:[18h]	; (020A:0018=0)
020A:0AC9  8A E0				mov	ah,al
020A:0ACB  24 04				and	al,4
020A:0ACD  51					push	cx
020A:0ACE  B1 05				mov	cl,5
020A:0AD0  D2 E0				shl	al,cl			; Shift w/zeros fill
020A:0AD2  59					pop	cx
020A:0AD3  80 E4 73				and	ah,73h			; 's'
020A:0AD6  0A C4				or	al,ah
020A:0AD8  8A 26 0096				mov	ah,byte ptr ds:[96h]	; (020A:0096=0)
020A:0ADC  80 E4 0C				and	ah,0Ch
020A:0ADF  0A E0				or	ah,al
020A:0AE1  A0 0017				mov	al,byte ptr data_12+1	; (020A:0017=0)
020A:0AE4  E9 FF07				jmp	loc_36			; (09EE)
020A:0AE7			loc_51:
020A:0AE7  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0AEB  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0AEF  75 13				jne	loc_53			; Jump if not equal
020A:0AF1  E8 FCE5				call	sub_4			; (07D9)
020A:0AF4  B8 9002				mov	ax,9002h
020A:0AF7  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020A:0AF9			loc_52:
020A:0AF9  E8 FCBD				call	sub_3			; (07B9)
020A:0AFC  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0B00  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0B04			loc_53:
020A:0B04  E8 00C1				call	sub_12			; (0BC8)
020A:0B07  75 05				jnz	loc_54			; Jump if not zero
020A:0B09  E8 0014				call	sub_7			; (0B20)
020A:0B0C  EB EB				jmp	short loc_52		; (0AF9)
020A:0B0E			loc_54:
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 10

020A:0B0E  8B 07				mov	ax,[bx]
020A:0B10  E8 00A8				call	sub_11			; (0BBB)
020A:0B13  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0B17  E8 0041				call	sub_9			; (0B5B)
020A:0B1A  E8 002F				call	sub_8			; (0B4C)
020A:0B1D  E9 FECE				jmp	loc_36			; (09EE)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0B20			sub_7		proc	near
020A:0B20  50					push	ax
020A:0B21  E8 FCB5				call	sub_4			; (07D9)
020A:0B24  B4 02				mov	ah,2
020A:0B26  C4					db	0C4h
020A:0B27  C4 16 1E8B				les	dx,data_120		; (020A:1E8B=0) Load seg:offset ptr
020A:0B2B  1A 00				sbb	al,[bx+si]
020A:0B2D  3B 1E 001C				cmp	bx,word ptr data_15+2	; (020A:001C=148Fh)
020A:0B31  75 17				jne	loc_57			; Jump if not equal
020A:0B33  2E: A1 09B8				mov	ax,cs:data_88		; (020A:09B8=0)
020A:0B37  2E: 3B 06 09C0			cmp	ax,cs:data_90		; (020A:09C0=32h)
020A:0B3C  73 07				jae	loc_56			; Jump if above or =
020A:0B3E  2E: FF 06 09BC			inc	cs:data_89		; (020A:09BC=1936h)
020A:0B43  EB E4		;*		jmp	short loc_55		;*(0B29)
020A:0B43  EB E4				db	0EBh,0E4h
020A:0B45			loc_56:
020A:0B45  B4 01				mov	ah,1
020A:0B47  C4					db	0C4h
020A:0B48  C4 16 C358				les	dx,dword ptr ds:[0C358h]	; (020A:C358=0C608h) Load seg:offset p

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

020A:0B4C			sub_8:
020A:0B4C  2E: C7 06 09B8 0000			mov	cs:data_88,0		; (020A:09B8=0)
020A:0B53  2E: C7 06 09BC 0000			mov	cs:data_89,0		; (020A:09BC=1946h)
020A:0B5A  C3					retn
				sub_7		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0B5B			sub_9		proc	near
020A:0B5B  53					push	bx
020A:0B5C  50					push	ax
020A:0B5D  9F					lahf				; Load ah from flags
020A:0B5E  8B D8				mov	bx,ax
020A:0B60  58					pop	ax
020A:0B61  53					push	bx
020A:0B62  3C F0				cmp	al,0F0h
020A:0B64  75 06				jne	loc_58			; Jump if not equal
020A:0B66  0A E4				or	ah,ah			; Zero ?
020A:0B68  74 02				jz	loc_58			; Jump if zero
020A:0B6A  32 C0				xor	al,al			; Zero register
020A:0B6C			loc_58:
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 11

020A:0B6C  8B D8				mov	bx,ax
020A:0B6E  58					pop	ax
020A:0B6F  9E					sahf				; Store ah into flags
020A:0B70  8B C3				mov	ax,bx
020A:0B72  5B					pop	bx
020A:0B73  C3					retn
				sub_9		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0B74			sub_10		proc	near
020A:0B74  53					push	bx
020A:0B75  50					push	ax
020A:0B76  9F					lahf				; Load ah from flags
020A:0B77  8B D8				mov	bx,ax
020A:0B79  58					pop	ax
020A:0B7A  53					push	bx
020A:0B7B  80 FC E0				cmp	ah,0E0h
020A:0B7E  75 0F				jne	loc_59			; Jump if not equal
020A:0B80  B4 1C				mov	ah,1Ch
020A:0B82  3C 0D				cmp	al,0Dh
020A:0B84  74 23				je	loc_61			; Jump if equal
020A:0B86  3C 0A				cmp	al,0Ah
020A:0B88  74 1F				je	loc_61			; Jump if equal
020A:0B8A  B4 35				mov	ah,35h			; '5'
020A:0B8C  EB 1B				jmp	short loc_61		; (0BA9)
020A:0B8E  90					nop
020A:0B8F			loc_59:
020A:0B8F  80 FC 84				cmp	ah,84h
020A:0B92  77 1E				ja	loc_62			; Jump if above
020A:0B94  3C F0				cmp	al,0F0h
020A:0B96  75 07				jne	loc_60			; Jump if not equal
020A:0B98  0A E4				or	ah,ah			; Zero ?
020A:0B9A  74 0D				jz	loc_61			; Jump if zero
020A:0B9C  EB 14				jmp	short loc_62		; (0BB2)
020A:0B9E  90					nop
020A:0B9F			loc_60:
020A:0B9F  3C E0				cmp	al,0E0h
020A:0BA1  75 06				jne	loc_61			; Jump if not equal
020A:0BA3  0A E4				or	ah,ah			; Zero ?
020A:0BA5  74 02				jz	loc_61			; Jump if zero
020A:0BA7  32 C0				xor	al,al			; Zero register
020A:0BA9			loc_61:
020A:0BA9  8B D8				mov	bx,ax
020A:0BAB  58					pop	ax
020A:0BAC  9E					sahf				; Store ah into flags
020A:0BAD  8B C3				mov	ax,bx
020A:0BAF  5B					pop	bx
020A:0BB0  F8					clc				; Clear carry flag
020A:0BB1  C3					retn
020A:0BB2			loc_62:
020A:0BB2  8B D8				mov	bx,ax
020A:0BB4  58					pop	ax
020A:0BB5  9E					sahf				; Store ah into flags
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 12

020A:0BB6  8B C3				mov	ax,bx
020A:0BB8  5B					pop	bx
020A:0BB9  F9					stc				; Set carry flag
020A:0BBA  C3					retn
				sub_10		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0BBB			sub_11		proc	near
020A:0BBB  43					inc	bx
020A:0BBC  43					inc	bx
020A:0BBD  3B 1E 0082				cmp	bx,word ptr ds:[82h]	; (020A:0082=10h)
020A:0BC1  75 04				jne	loc_63			; Jump if not equal
020A:0BC3  8B 1E 0080				mov	bx,word ptr ds:[80h]	; (020A:0080=1850h)
020A:0BC7			loc_63:
020A:0BC7  C3					retn
				sub_11		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0BC8			sub_12		proc	near
020A:0BC8  53					push	bx
020A:0BC9  51					push	cx
020A:0BCA  50					push	ax
020A:0BCB  9F					lahf				; Load ah from flags
020A:0BCC  50					push	ax
020A:0BCD  A0 0017				mov	al,byte ptr data_12+1	; (020A:0017=0)
020A:0BD0  24 70				and	al,70h			; 'p'
020A:0BD2  B1 04				mov	cl,4
020A:0BD4  D2 E8				shr	al,cl			; Shift w/zeros fill
020A:0BD6  24 07				and	al,7
020A:0BD8  8A 1E 0097				mov	bl,byte ptr ds:[97h]	; (020A:0097=0)
020A:0BDC  32 D8				xor	bl,al
020A:0BDE  80 E3 07				and	bl,7
020A:0BE1  74 25				jz	loc_64			; Jump if zero
020A:0BE3  F6 06 0097 40			test	byte ptr ds:[97h],40h	; (020A:0097=0) '@'
020A:0BE8  75 1E				jnz	loc_64			; Jump if not zero
020A:0BEA  80 0E 0097 40			or	byte ptr ds:[97h],40h	; (020A:0097=0) '@'
020A:0BEF  D2 E3				shl	bl,cl			; Shift w/zeros fill
020A:0BF1  0A C3				or	al,bl
020A:0BF3  B4 03				mov	ah,3
020A:0BF5  C4					db	0C4h
020A:0BF6  C4 16 2680				les	dx,dword ptr data_148	; (020A:2680=2031h) Load seg:offset pt
020A:0BFA  97					xchg	di,ax
020A:0BFB  00 F8				add	al,bh
020A:0BFD  24 0F				and	al,0Fh
020A:0BFF  08 06 0097				or	byte ptr ds:[97h],al	; (020A:0097=0)
020A:0C03  80 26 0097 BF			and	byte ptr ds:[97h],0BFh	; (020A:0097=0)
020A:0C08			loc_64:
020A:0C08  58					pop	ax
020A:0C09  9E					sahf				; Store ah into flags
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 13

020A:0C0A  58					pop	ax
020A:0C0B  59					pop	cx
020A:0C0C  5B					pop	bx
020A:0C0D  C3					retn
				sub_12		endp

020A:0C0E  C4					db	0C4h
							                        ;* No entry point to code
020A:0C0F  C4 18				les	bx,dword ptr [bx+si]	; Load seg:offset ptr
020A:0C11  E9 FA38				jmp	$-5C5h
020A:0C14  C4					db	0C4h
							                        ;* No entry point to code
020A:0C15  C4 19				les	bx,dword ptr [bx+di]	; Load seg:offset ptr
020A:0C17  E9 FA32				jmp	$-5CBh
020A:0C1A  9A82			data_94		dw	9A82h
020A:0C1C  0000			data_95		dw	0
020A:0C1E  01			data_96		db	1
020A:0C1F  E8 FBB7				call	sub_4			; (07D9)
020A:0C22  80 FC 02				cmp	ah,2
020A:0C25  72 06				jb	loc_65			; Jump if below
020A:0C27  C4					db	0C4h
020A:0C28  C4 1A				les	bx,dword ptr [bp+si]	; Load seg:offset ptr
020A:0C2A  E9 FA1F				jmp	$-5DEh
020A:0C2D			loc_65:
020A:0C2D  1E					push	ds
020A:0C2E  53					push	bx
020A:0C2F  50					push	ax
020A:0C30  B8 0040				mov	ax,40h
020A:0C33  8E D8				mov	ds,ax
020A:0C35  58					pop	ax
020A:0C36  E8 FB80				call	sub_3			; (07B9)
020A:0C39  0A E4				or	ah,ah			; Zero ?
020A:0C3B  75 3F				jnz	loc_68			; Jump if not zero
020A:0C3D			loc_66:
020A:0C3D  A0 0070				mov	al,byte ptr ds:[70h]	; (0040:0070=0)
020A:0C40  8B 0E 006E				mov	cx,word ptr ds:[6Eh]	; (0040:006E=0)
020A:0C44  8B 16 006C				mov	dx,word ptr ds:[6Ch]	; (0040:006C=9A83h)
020A:0C48  2E: 39 0E 0C1C			cmp	cs:data_95,cx		; (020A:0C1C=0)
020A:0C4D  75 35				jne	loc_69			; Jump if not equal
020A:0C4F  2E: 8B 1E 0C1A			mov	bx,cs:data_94		; (020A:0C1A=9A82h)
020A:0C54  3B DA				cmp	bx,dx
020A:0C56  74 05				je	loc_67			; Jump if equal
020A:0C58  43					inc	bx
020A:0C59  3B DA				cmp	bx,dx
020A:0C5B  75 27				jne	loc_69			; Jump if not equal
020A:0C5D			loc_67:
020A:0C5D  2E: FE 06 0C1E			inc	cs:data_96		; (020A:0C1E=1)
020A:0C62  2E: 80 3E 0C1E 10			cmp	cs:data_96,10h		; (020A:0C1E=1)
020A:0C68  72 20				jb	loc_70			; Jump if below
020A:0C6A  E8 FB6C				call	sub_4			; (07D9)
020A:0C6D  33 C0				xor	ax,ax			; Zero register
020A:0C6F  2E: FF 0E 0C1A			dec	cs:data_94		; (020A:0C1A=9A82h)
020A:0C74  C4					db	0C4h
020A:0C75  C4 5A E8				les	bx,dword ptr [bp+si-18h]	; Load seg:offset ptr
020A:0C78  3F					aas				; Ascii adjust
020A:0C79  FB					sti				; Enable interrupts
020A:0C7A  EB C1				jmp	short loc_66		; (0C3D)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 14

020A:0C7C			loc_68:
020A:0C7C  89 16 006C				mov	word ptr ds:[6Ch],dx	; (0040:006C=9A83h)
020A:0C80  89 0E 006E				mov	word ptr ds:[6Eh],cx	; (0040:006E=0)
020A:0C84			loc_69:
020A:0C84  2E: C6 06 0C1E 00			mov	cs:data_96,0		; (020A:0C1E=1)
020A:0C8A			loc_70:
020A:0C8A  2E: 89 16 0C1A			mov	cs:data_94,dx		; (020A:0C1A=9A82h)
020A:0C8F  2E: 89 0E 0C1C			mov	cs:data_95,cx		; (020A:0C1C=0)
020A:0C94  C6 06 0070 00			mov	byte ptr ds:[70h],0	; (0040:0070=0)
020A:0C99  5B					pop	bx
020A:0C9A  1F					pop	ds
020A:0C9B  E9 F9AE				jmp	$-64Fh
020A:0C9E  C4					db	0C4h
							                        ;* No entry point to code
020A:0C9F  C4 1E A8E9				les	bx,dword ptr data_185	; (020A:A8E9=8303h) Load seg:offset pt
020A:0CA3  F9					stc				; Set carry flag
020A:0CA4  C4					db	0C4h
020A:0CA5  C4 70 E9				les	si,dword ptr [bx+si-17h]	; Load seg:offset ptr
020A:0CA8  A2 E8F9				mov	byte ptr ds:[0E8F9h],al	; (020A:E8F9=57h)
020A:0CAB  2C FB				sub	al,0FBh
020A:0CAD  CD 4A				int	4Ah			; RTC Alarm occurred
020A:0CAF  EB 01				jmp	short $+3		; delay for I/O
020A:0CB1  90					nop
020A:0CB2  EB 01				jmp	short $+3		; delay for I/O
020A:0CB4  90					nop
020A:0CB5  EB 01				jmp	short $+3		; delay for I/O
020A:0CB7  90					nop
020A:0CB8  E8 FAFE				call	sub_3			; (07B9)
020A:0CBB  C4					db	0C4h
020A:0CBC  C4					db	0C4h
020A:0CBD  FE C4				inc	ah
020A:0CBF  C4 71 CD				les	si,dword ptr [bx+di-33h]	; Load seg:offset ptr
020A:0CC2  0A E9				or	ch,cl
020A:0CC4  86 F9				xchg	bh,cl
020A:0CC6  C4					db	0C4h
020A:0CC7			loc_71:
020A:0CC7  C4 75 CD				les	si,dword ptr [di-33h]	; Load seg:offset ptr
020A:0CCA  02 E9				add	ch,cl
020A:0CCC  7E F9				jle	loc_71			; Jump if < or =
020A:0CCE  E8 FB08				call	sub_4			; (07D9)
020A:0CD1  EB 00				jmp	short $+2		; delay for I/O
020A:0CD3  EB 00				jmp	short $+2		; delay for I/O
020A:0CD5  EB 00				jmp	short $+2		; delay for I/O
020A:0CD7  C4					db	0C4h
020A:0CD8  C4					db	0C4h
020A:0CD9  FE					db	0FEh
020A:0CDA  74 29				jz	loc_72			; Jump if zero
020A:0CDC  2E: 89 36 44FC			mov	cs:data_171,si		; (020A:44FC=3D1Dh)
020A:0CE1  D9					db	0D9h
020A:0CE2  02 4E 00				add	cl,[bp]
020A:0CE5  13 2E 488B				adc	bp,data_173		; (020A:488B=0AE8h)
020A:0CE9  49					dec	cx
020A:0CEA  4D					dec	bp
020A:0CEB  45					inc	bp
020A:0CEC  4D					dec	bp
020A:0CED  20 20				and	[bx+si],ah
020A:0CEF  20 24				and	[si],ah
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 15

020A:0CF1  00 70 00		;*		add	[bx+si+0],dh
020A:0CF1  00 70 00				db	 00h, 70h, 00h
020A:0CF4  00 A0 0041				add	byte ptr ds:[41h][bx+si],ah	; (020A:0041=18h)
020A:0CF8  4C					dec	sp
020A:0CF9  00 58 4D				add	[bx+si+4Dh],bl
020A:0CFC  53					push	bx
020A:0CFD  58					pop	ax
020A:0CFE  58					pop	ax
020A:0CFF  58					pop	ax
020A:0D00  58					pop	ax
020A:0D01  30			data_97		db	30h			; Data table (indexed access)
020A:0D02  DE					db	0DEh
020A:0D03  04 74				add	al,74h			; 't'
020A:0D05			loc_72:
020A:0D05  00 75 04				add	[di+4],dh
020A:0D08  05 548E				add	ax,548Eh
020A:0D0B  00 00				add	[bx+si],al
020A:0D0D  00 42 05				add	[bp+si+5],al
020A:0D10  0A 02				or	al,[bp+si]
020A:0D12  A4					movsb				; Mov [si] to es:[di]
020A:0D13  10 A7 0100				adc	byte ptr ds:[100h][bx],ah	; (020A:0100=28h)
020A:0D17  01 01				add	[bx+di],ax
020A:0D19  01 00				add	[bx+si],ax
020A:0D1B  01 00				add	[bx+si],ax
020A:0D1D  01 00				add	[bx+si],ax
020A:0D1F  01 00				add	[bx+si],ax
020A:0D21  000A[00]				db	10 dup (0)
020A:0D2B  02 01				add	al,[bx+di]
020A:0D2D  00					db	0
020A:0D2E  00 00				add	[bx+si],al
020A:0D30  00 2E 1E89				add	data_119,ch		; (020A:1E89=0)
020A:0D34  16					push	ss
020A:0D35  00 2E 068C				add	byte ptr ds:[68Ch],ch	; (020A:068C=2)
020A:0D39  18 00				sbb	[bx+si],al
020A:0D3B  CB					retf
							                        ;* No entry point to code
020A:0D3C  53					push	bx
020A:0D3D  1E					push	ds
020A:0D3E  2E: C5 1E 0016			lds	bx,dword ptr cs:[16h]	; (020A:0016=0) Load seg:offset ptr
020A:0D43  80 7F 02 10				cmp	byte ptr [bx+2],10h
020A:0D47  C7 47 03 0100			mov	word ptr [bx+3],100h
020A:0D4C  76 05				jbe	loc_73			; Jump if below or =
020A:0D4E  81 4F 03 8003			or	word ptr [bx+3],8003h
020A:0D53			loc_73:
020A:0D53  1F					pop	ds
020A:0D54  5B					pop	bx
020A:0D55  CB					retf
							                        ;* No entry point to code
020A:0D56  E8 03DB				call	sub_21			; (1134)
020A:0D59  80 FC 43				cmp	ah,43h			; 'C'
020A:0D5C  75 15				jne	loc_75			; Jump if not equal
020A:0D5E  0A C0				or	al,al			; Zero ?
020A:0D60  75 05				jnz	loc_74			; Jump if not zero
020A:0D62  B0 80				mov	al,80h
020A:0D64  E9 03F5				jmp	loc_126			; (115C)
020A:0D67			loc_74:
020A:0D67  3C 10				cmp	al,10h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 16

020A:0D69  75 08				jne	loc_75			; Jump if not equal
020A:0D6B  0E					push	cs
020A:0D6C  07					pop	es
020A:0D6D  BB 00AF				mov	bx,0AFh
020A:0D70  E9 03E9				jmp	loc_126			; (115C)
020A:0D73			loc_75:
020A:0D73  E8 039E				call	sub_20			; (1114)
020A:0D76  2E: FF 2E 0022			jmp	dword ptr cs:[22h]	; (020A:0022=0FFh)
							                        ;* No entry point to code
020A:0D7B  12 A0 0265				adc	ah,byte ptr ds:[265h][bx+si]	; (020A:0265=0)
020A:0D7F  98					cbw				; Convrt byte to word
020A:0D80  02 B2 D402				add	dh,[bp+si-2BFEh]
020A:0D84  02 F6				add	dh,dh
020A:0D86  02 30				add	dh,[bx+si]
020A:0D88  03 99 2B03				add	bx,data_162[bx+di]	; (020A:2B03=432Eh)
020A:0D8C  A0 A03C				mov	al,data_181		; (020A:A03C=8Fh)
020A:0D8F  94					xchg	sp,ax
020A:0D90  A0 A264				mov	al,data_184		; (020A:A264=6)
020A:0D93  CF					iret				; Interrupt return
							                        ;* No entry point to code
020A:0D94  A0 A0FF				mov	al,data_182		; (020A:A0FF=0E9h)
020A:0D97  23 A1 A159				and	sp,data_183[bx+di]	; (020A:A159=0FB01h)
020A:0D9B  11 A2 A216				adc	[bp+si-5DEAh],sp
020A:0D9F  EB 03				jmp	short loc_76		; (0DA4)
020A:0DA1  90					nop
020A:0DA2  90					nop
020A:0DA3  90					nop
020A:0DA4			loc_76:
020A:0DA4  51					push	cx
020A:0DA5  56					push	si
020A:0DA6  57					push	di
020A:0DA7  1E					push	ds
020A:0DA8  06					push	es
020A:0DA9  9C					pushf				; Push flags
020A:0DAA  FC					cld				; Clear direction
020A:0DAB  1E					push	ds
020A:0DAC  07					pop	es
020A:0DAD  0E					push	cs
020A:0DAE  1F					pop	ds
020A:0DAF  50					push	ax
020A:0DB0  0A E4				or	ah,ah			; Zero ?
020A:0DB2  74 31				jz	loc_79			; Jump if zero
020A:0DB4  80 FC 12				cmp	ah,12h
020A:0DB7  72 07				jb	loc_77			; Jump if below
020A:0DB9  58					pop	ax
020A:0DBA  33 C0				xor	ax,ax			; Zero register
020A:0DBC  B3 80				mov	bl,80h
020A:0DBE  EB 72				jmp	short loc_83		; (0E32)
020A:0DC0			loc_77:
020A:0DC0  9C					pushf				; Push flags
020A:0DC1  E8 0350				call	sub_20			; (1114)
020A:0DC4  83 3E 0020 00			cmp	word ptr data_17+2,0	; (020A:0020=0A3B9h)
020A:0DC9  75 05				jne	loc_78			; Jump if not equal
020A:0DCB  52					push	dx
020A:0DCC  E8 0076				call	sub_14			; (0E45)
020A:0DCF  5A					pop	dx
020A:0DD0			loc_78:
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 17

020A:0DD0  0E					push	cs
020A:0DD1  FF 16 0014				call	word ptr ds:[14h]	; (020A:0014=0E0Dh)
020A:0DD5  80 3E 002C 00			cmp	byte ptr ds:[2Ch],0	; (020A:002C=39h)
020A:0DDA  74 09				je	loc_79			; Jump if equal
020A:0DDC  58					pop	ax
020A:0DDD  33 C0				xor	ax,ax			; Zero register
020A:0DDF  B3 81				mov	bl,81h
020A:0DE1  33 D2				xor	dx,dx			; Zero register
020A:0DE3  EB 4D				jmp	short loc_83		; (0E32)
020A:0DE5			loc_79:
020A:0DE5  58					pop	ax
020A:0DE6  50					push	ax
020A:0DE7  8A C4				mov	al,ah
020A:0DE9  32 E4				xor	ah,ah			; Zero register
020A:0DEB  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:0DED  8B F8				mov	di,ax
020A:0DEF  58					pop	ax
020A:0DF0  8B BD 008B				mov	di,word ptr ds:[8Bh][di]	; (020A:008B=504Fh)
020A:0DF4  0B FF				or	di,di			; Zero ?
020A:0DF6  79 38				jns	loc_82			; Jump if not sign
020A:0DF8  80 3E 002B 00			cmp	byte ptr ds:[2Bh],0	; (020A:002B=38h)
020A:0DFD  74 12				je	loc_80			; Jump if equal
020A:0DFF  56					push	si
020A:0E00  57					push	di
020A:0E01  50					push	ax
020A:0E02  53					push	bx
020A:0E03  51					push	cx
020A:0E04  E8 01DF				call	sub_16			; (0FE6)
020A:0E07  3D 0001				cmp	ax,1
020A:0E0A  59					pop	cx
020A:0E0B  5B					pop	bx
020A:0E0C  58					pop	ax
020A:0E0D  5F					pop	di
020A:0E0E  5E					pop	si
020A:0E0F  75 17				jnz	loc_81			; Jump if not zero
020A:0E11			loc_80:
020A:0E11  0E E8 002A				callf	sub_13			; (0E3F)
020A:0E15  80 3E 002B 00			cmp	byte ptr ds:[2Bh],0	; (020A:002B=38h)
020A:0E1A  74 16				je	loc_83			; Jump if equal
020A:0E1C  50					push	ax
020A:0E1D  53					push	bx
020A:0E1E  E8 01FF				call	sub_17			; (1020)
020A:0E21  3D 0001				cmp	ax,1
020A:0E24  5B					pop	bx
020A:0E25  58					pop	ax
020A:0E26  74 0A				jz	loc_83			; Jump if zero
020A:0E28			loc_81:
020A:0E28  33 C0				xor	ax,ax			; Zero register
020A:0E2A  33 D2				xor	dx,dx			; Zero register
020A:0E2C  B3 82				mov	bl,82h
020A:0E2E  EB 02				jmp	short loc_83		; (0E32)
020A:0E30			loc_82:
020A:0E30  FF D7				call	di			;*
020A:0E32			loc_83:
020A:0E32  0E					push	cs
020A:0E33  FF 16 0014				call	word ptr ds:[14h]	; (020A:0014=0E0Dh)
020A:0E37  07					pop	es
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 18

020A:0E38  1F					pop	ds
020A:0E39  5F					pop	di
020A:0E3A  5E					pop	si
020A:0E3B  59					pop	cx
020A:0E3C  CB					retf				; Return far
020A:0E3D  6D					db	6Dh
020A:0E3E  FB					sti				; Enable interrupts

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0E3F			sub_13		proc	near
020A:0E3F  FF 36 014D				push	word ptr ds:[14Dh]	; (020A:014D=5582h)
020A:0E43  57					push	di
020A:0E44  CB					retf				; Return far
				sub_13		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0E45			sub_14		proc	near
020A:0E45  06					push	es
020A:0E46  E8 0071				call	sub_15			; (0EBA)
020A:0E49  80 3E 002C 00			cmp	byte ptr ds:[2Ch],0	; (020A:002C=39h)
020A:0E4E  74 02				je	loc_84			; Jump if equal
020A:0E50  07					pop	es
020A:0E51  C3					retn
020A:0E52			loc_84:
020A:0E52  B8 020D				mov	ax,20Dh
020A:0E55  C4					db	0C4h
020A:0E56  C4 52 09				les	dx,dword ptr [bp+si+9]	; Load seg:offset ptr
020A:0E59  C4 36 001A				les	si,dword ptr ds:[1Ah]	; (020A:001A=0AE9Ch) Load seg:offset p
020A:0E5D  26: 87 04				xchg	es:[si],ax
020A:0E60  A3 001E				mov	word ptr ds:[1Eh],ax	; (020A:001E=961Fh)
020A:0E63  8C C8				mov	ax,cs
020A:0E65  26: 87 44 02				xchg	es:[si+2],ax
020A:0E69  A3 0020				mov	word ptr data_17+2,ax	; (020A:0020=0A3B9h)
020A:0E6C  8B C1				mov	ax,cx
020A:0E6E  3D 3C00				cmp	ax,3C00h
020A:0E71  72 03				jb	loc_85			; Jump if below
020A:0E73  B8 3C00				mov	ax,3C00h
020A:0E76			loc_85:
020A:0E76  2B 06 0037				sub	ax,word ptr ds:[37h]	; (020A:0037=0)
020A:0E7A  3D 0040				cmp	ax,40h
020A:0E7D  72 0C				jb	loc_86			; Jump if below
020A:0E7F  83 3E 0035 00			cmp	word ptr ds:[35h],0	; (020A:0035=80Fh)
020A:0E84  75 05				jne	loc_86			; Jump if not equal
020A:0E86  C6 06 0029 01			mov	byte ptr ds:[29h],1	; (020A:0029=14h)
020A:0E8B			loc_86:
020A:0E8B  0B C0				or	ax,ax			; Zero ?
020A:0E8D  74 20				jz	loc_89			; Jump if zero
020A:0E8F  B9 0400				mov	cx,400h
020A:0E92  33 DB				xor	bx,bx			; Zero register
020A:0E94  80 3E 0029 00			cmp	byte ptr ds:[29h],0	; (020A:0029=14h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 19

020A:0E99  74 03				je	loc_87			; Jump if equal
020A:0E9B  BB 0040				mov	bx,40h
020A:0E9E			loc_87:
020A:0E9E  3B 1E 0035				cmp	bx,word ptr ds:[35h]	; (020A:0035=80Fh)
020A:0EA2  73 04				jae	loc_88			; Jump if above or =
020A:0EA4  8B 1E 0035				mov	bx,word ptr ds:[35h]	; (020A:0035=80Fh)
020A:0EA8			loc_88:
020A:0EA8  03 CB				add	cx,bx
020A:0EAA  2B C3				sub	ax,bx
020A:0EAC  E8 01E2				call	sub_19			; (1091)
020A:0EAF			loc_89:
020A:0EAF  07					pop	es
020A:0EB0  C3					retn
				sub_14		endp

							                        ;* No entry point to code
020A:0EB1  13 00				adc	ax,[bx+si]
020A:0EB3  FF					db	0FFh
020A:0EB4  FF 56 44				call	word ptr [bp+44h]	;*
020A:0EB7  49					dec	cx
020A:0EB8  53					push	bx
020A:0EB9  4B					dec	bx

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:0EBA			sub_15		proc	near
020A:0EBA  06					push	es
020A:0EBB  33 C0				xor	ax,ax			; Zero register
020A:0EBD  8E C0				mov	es,ax
020A:0EBF  26: 8E 06 0066			mov	es,word ptr es:[66h]	; (0000:0066=20Ah)
020A:0EC4  BF 0012				mov	di,12h
020A:0EC7  BE 01C5				mov	si,1C5h
020A:0ECA  B9 0005				mov	cx,5
020A:0ECD  FC					cld				; Clear direction
020A:0ECE  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020A:0ED0  07					pop	es
020A:0ED1  74 24				jz	loc_90			; Jump if zero
020A:0ED3  E8 0110				call	sub_16			; (0FE6)
020A:0ED6  06					push	es
020A:0ED7  2E: C4 3E 01C1			les	di,dword ptr cs:[1C1h]	; (020A:01C1=0) Load seg:offset ptr
020A:0EDC  BE 01C5				mov	si,1C5h
020A:0EDF  B9 0005				mov	cx,5
020A:0EE2  FC					cld				; Clear direction
020A:0EE3  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020A:0EE5  07					pop	es
020A:0EE6  9C					pushf				; Push flags
020A:0EE7  E8 0136				call	sub_17			; (1020)
020A:0EEA  0E					push	cs
020A:0EEB  FF 16 0014				call	word ptr ds:[14h]	; (020A:0014=0E0Dh)
020A:0EEF  74 06				jz	loc_90			; Jump if zero
020A:0EF1  C6 06 002C 00			mov	byte ptr ds:[2Ch],0	; (020A:002C=39h)
020A:0EF6  C3					retn
020A:0EF7			loc_90:
020A:0EF7  C6 06 002C 01			mov	byte ptr ds:[2Ch],1	; (020A:002C=39h)
020A:0EFC  C3					retn
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 20

				sub_15		endp

							                        ;* No entry point to code
020A:0EFD  80 FC 88				cmp	ah,88h
020A:0F00  74 0A				je	loc_91			; Jump if equal
020A:0F02  80 FC 87				cmp	ah,87h
020A:0F05  74 0C				je	loc_92			; Jump if equal
020A:0F07  2E: FF 2E 001E			jmp	dword ptr cs:[1Eh]	; (020A:001E=961Fh)
020A:0F0C			loc_91:
020A:0F0C  2E: A1 0035				mov	ax,word ptr cs:[35h]	; (020A:0035=80Fh)
020A:0F10  E9 0249				jmp	loc_126			; (115C)
020A:0F13			loc_92:
020A:0F13  E8 01FE				call	sub_20			; (1114)
020A:0F16  83 EC 04				sub	sp,4
020A:0F19  60					db	60h
020A:0F1A  E8 016C				call	sub_18			; (1089)
020A:0F1D  8B EC				mov	bp,sp
020A:0F1F  89 46 12				mov	[bp+12h],ax
020A:0F22  8B 46 18				mov	ax,[bp+18h]
020A:0F25  89 46 10				mov	[bp+10h],ax
020A:0F28  61					db	61h
020A:0F29  2E: FF 1E 001E			call	dword ptr cs:[1Eh]	; (020A:001E=961Fh)
020A:0F2E  50					push	ax
020A:0F2F  9C					pushf				; Push flags
020A:0F30  55					push	bp
020A:0F31  8B EC				mov	bp,sp
020A:0F33  8B 46 02				mov	ax,[bp+2]
020A:0F36  89 46 0C				mov	[bp+0Ch],ax
020A:0F39  83 7E 06 00				cmp	word ptr [bp+6],0
020A:0F3D  5D					pop	bp
020A:0F3E  58					pop	ax
020A:0F3F  58					pop	ax
020A:0F40  74 0B				jz	loc_93			; Jump if zero
020A:0F42  E8 01CF				call	sub_20			; (1114)
020A:0F45  60					db	60h
020A:0F46  B8 0001				mov	ax,1
020A:0F49  E8 0272				call	sub_22			; (11BE)
020A:0F4C  61					db	61h
020A:0F4D			loc_93:
020A:0F4D  83 C4 02				add	sp,2
020A:0F50  E9 0209				jmp	loc_126			; (115C)
020A:0F53  00 00				add	[bx+si],al
020A:0F55  E8 01BC				call	sub_20			; (1114)
020A:0F58  B3 91				mov	bl,91h
020A:0F5A  3C 40				cmp	al,40h			; '@'
020A:0F5C  75 06				jne	loc_94			; Jump if not equal
020A:0F5E  3B 16 0263				cmp	dx,word ptr ds:[263h]	; (020A:0263=0)
020A:0F62  74 21				je	loc_95			; Jump if equal
020A:0F64			loc_94:
020A:0F64  80 3E 0026 01			cmp	byte ptr ds:[26h],1	; (020A:0026=3)
020A:0F69  74 1A				je	loc_95			; Jump if equal
020A:0F6B  B3 90				mov	bl,90h
020A:0F6D  80 3E 0029 00			cmp	byte ptr ds:[29h],0	; (020A:0029=14h)
020A:0F72  74 11				je	loc_95			; Jump if equal
020A:0F74  B3 92				mov	bl,92h
020A:0F76  3B 16 0033				cmp	dx,word ptr ds:[33h]	; (020A:0033=0Ch)
020A:0F7A  72 09				jb	loc_95			; Jump if below
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 21

020A:0F7C  B8 0001				mov	ax,1
020A:0F7F  A2 0026				mov	byte ptr ds:[26h],al	; (020A:0026=3)
020A:0F82  32 DB				xor	bl,bl			; Zero register
020A:0F84  C3					retn
020A:0F85			loc_95:
020A:0F85  33 C0				xor	ax,ax			; Zero register
020A:0F87  C3					retn
							                        ;* No entry point to code
020A:0F88  E8 0189				call	sub_20			; (1114)
020A:0F8B  A0 0026				mov	al,byte ptr ds:[26h]	; (020A:0026=3)
020A:0F8E  0A C0				or	al,al			; Zero ?
020A:0F90  74 0B				jz	loc_96			; Jump if zero
020A:0F92  C6 06 0026 00			mov	byte ptr ds:[26h],0	; (020A:0026=3)
020A:0F97  B8 0001				mov	ax,1
020A:0F9A  32 DB				xor	bl,bl			; Zero register
020A:0F9C  C3					retn
020A:0F9D			loc_96:
020A:0F9D  33 C0				xor	ax,ax			; Zero register
020A:0F9F  B3 93				mov	bl,93h
020A:0FA1  C3					retn
							                        ;* No entry point to code
020A:0FA2  E8 016F				call	sub_20			; (1114)
020A:0FA5  83 3E 0031 01			cmp	word ptr ds:[31h],1	; (020A:0031=3F3Eh)
020A:0FAA  74 0D				je	loc_97			; Jump if equal
020A:0FAC  E8 0037				call	sub_16			; (0FE6)
020A:0FAF  0B C0				or	ax,ax			; Zero ?
020A:0FB1  74 0C				jz	loc_98			; Jump if zero
020A:0FB3  C7 06 0031 0001			mov	word ptr ds:[31h],1	; (020A:0031=3F3Eh)
020A:0FB9			loc_97:
020A:0FB9  B8 0001				mov	ax,1
020A:0FBC  32 DB				xor	bl,bl			; Zero register
020A:0FBE  C3					retn
020A:0FBF			loc_98:
020A:0FBF  B3 82				mov	bl,82h
020A:0FC1  33 C0				xor	ax,ax			; Zero register
020A:0FC3  C3					retn
							                        ;* No entry point to code
020A:0FC4  E8 014D				call	sub_20			; (1114)
020A:0FC7  83 3E 0031 00			cmp	word ptr ds:[31h],0	; (020A:0031=3F3Eh)
020A:0FCC  74 0D				je	loc_99			; Jump if equal
020A:0FCE  E8 004F				call	sub_17			; (1020)
020A:0FD1  0B C0				or	ax,ax			; Zero ?
020A:0FD3  74 0C				jz	loc_100			; Jump if zero
020A:0FD5  C7 06 0031 0000			mov	word ptr ds:[31h],0	; (020A:0031=3F3Eh)
020A:0FDB			loc_99:
020A:0FDB  B8 0001				mov	ax,1
020A:0FDE  32 DB				xor	bl,bl			; Zero register
020A:0FE0  C3					retn
020A:0FE1			loc_100:
020A:0FE1  B3 82				mov	bl,82h
020A:0FE3  33 C0				xor	ax,ax			; Zero register
020A:0FE5  C3					retn

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 22

020A:0FE6			sub_16		proc	near
020A:0FE6  E8 012B				call	sub_20			; (1114)
020A:0FE9  80 3E 0027 01			cmp	byte ptr ds:[27h],1	; (020A:0027=4)
020A:0FEE  75 25				jne	loc_104			; Jump if not equal
020A:0FF0  C6 06 003B 03			mov	byte ptr ds:[3Bh],3	; (020A:003B=0)
020A:0FF5  83 3E 002F 00			cmp	word ptr ds:[2Fh],0	; (020A:002F=3D3Ch)
020A:0FFA  74 07				je	loc_102			; Jump if equal
020A:0FFC			loc_101:
020A:0FFC  E8 008A				call	sub_18			; (1089)
020A:0FFF  0B C0				or	ax,ax			; Zero ?
020A:1001  75 0E				jnz	loc_103			; Jump if not zero
020A:1003			loc_102:
020A:1003  B8 0001				mov	ax,1
020A:1006  E8 01B5				call	sub_22			; (11BE)
020A:1009  FE 0E 003B				dec	byte ptr ds:[3Bh]	; (020A:003B=0)
020A:100D  75 ED				jnz	loc_101			; Jump if not zero
020A:100F  EB 0A				jmp	short loc_105		; (101B)
020A:1011			loc_103:
020A:1011  FF 06 002F				inc	word ptr ds:[2Fh]	; (020A:002F=3D3Ch)
020A:1015			loc_104:
020A:1015  B8 0001				mov	ax,1
020A:1018  32 DB				xor	bl,bl			; Zero register
020A:101A  C3					retn
020A:101B			loc_105:
020A:101B  B3 82				mov	bl,82h
020A:101D  33 C0				xor	ax,ax			; Zero register
020A:101F  C3					retn
				sub_16		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1020			sub_17		proc	near
020A:1020  E8 00F1				call	sub_20			; (1114)
020A:1023  80 3E 0027 00			cmp	byte ptr ds:[27h],0	; (020A:0027=4)
020A:1028  74 34				je	loc_110			; Jump if equal
020A:102A  83 3E 002F 00			cmp	word ptr ds:[2Fh],0	; (020A:002F=3D3Ch)
020A:102F  74 33				je	loc_111			; Jump if equal
020A:1031  C6 06 003B 03			mov	byte ptr ds:[3Bh],3	; (020A:003B=0)
020A:1036			loc_106:
020A:1036  E8 0050				call	sub_18			; (1089)
020A:1039  83 3E 002F 01			cmp	word ptr ds:[2Fh],1	; (020A:002F=3D3Ch)
020A:103E  75 08				jne	loc_107			; Jump if not equal
020A:1040  0B C0				or	ax,ax			; Zero ?
020A:1042  74 16				jz	loc_109			; Jump if zero
020A:1044  33 C0				xor	ax,ax			; Zero register
020A:1046  EB 07				jmp	short loc_108		; (104F)
020A:1048			loc_107:
020A:1048  0B C0				or	ax,ax			; Zero ?
020A:104A  75 0E				jnz	loc_109			; Jump if not zero
020A:104C  B8 0001				mov	ax,1
020A:104F			loc_108:
020A:104F  E8 016C				call	sub_22			; (11BE)
020A:1052  FE 0E 003B				dec	byte ptr ds:[3Bh]	; (020A:003B=0)
020A:1056  75 DE				jnz	loc_106			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 23

020A:1058  EB 0A				jmp	short loc_111		; (1064)
020A:105A			loc_109:
020A:105A  FF 0E 002F				dec	word ptr ds:[2Fh]	; (020A:002F=3D3Ch)
020A:105E			loc_110:
020A:105E  B8 0001				mov	ax,1
020A:1061  32 DB				xor	bl,bl			; Zero register
020A:1063  C3					retn
020A:1064			loc_111:
020A:1064  B3 82				mov	bl,82h
020A:1066  33 C0				xor	ax,ax			; Zero register
020A:1068  C3					retn
				sub_17		endp

							                        ;* No entry point to code
020A:1069  2E: 80 3E 002B 00			cmp	byte ptr cs:[2Bh],0	; (020A:002B=38h)
020A:106F  74 04				je	loc_112			; Jump if equal
020A:1071  B8 0001				mov	ax,1
020A:1074  CB					retf				; Return far
020A:1075			loc_112:
020A:1075  E8 FF6E				call	sub_16			; (0FE6)
020A:1078  CB					retf
							                        ;* No entry point to code
020A:1079  2E: 80 3E 002B 00			cmp	byte ptr cs:[2Bh],0	; (020A:002B=38h)
020A:107F  74 04				je	loc_113			; Jump if equal
020A:1081  B8 0001				mov	ax,1
020A:1084  CB					retf				; Return far
020A:1085			loc_113:
020A:1085  E8 FF98				call	sub_17			; (1020)
020A:1088  CB					retf				; Return far

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1089			sub_18		proc	near
020A:1089  2E: A0 003C				mov	al,byte ptr cs:[3Ch]	; (020A:003C=10h)
020A:108D  98					cbw				; Convrt byte to word
020A:108E  32 DB				xor	bl,bl			; Zero register
020A:1090  C3					retn
				sub_18		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1091			sub_19		proc	near
020A:1091  8B D0				mov	dx,ax
020A:1093  8B F1				mov	si,cx
020A:1095  33 FF				xor	di,di			; Zero register
020A:1097  06					push	es
020A:1098  8E 06 014D				mov	es,word ptr ds:[14Dh]	; (020A:014D=5582h)
020A:109C  26: 8B 1E A004			mov	bx,word ptr es:[0A004h]	; (5582:A004=6E61h)
020A:10A1  26: 8B 0E A008			mov	cx,word ptr es:[0A008h]	; (5582:A008=2020h)

020A:10A6			locloop_114:
020A:10A6  26: 80 3F 04				cmp	byte ptr es:[bx],4
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 24

020A:10AA  75 08				jne	loc_115			; Jump if not equal
020A:10AC  0B FF				or	di,di			; Zero ?
020A:10AE  75 48				jnz	loc_118			; Jump if not zero
020A:10B0  8B FB				mov	di,bx
020A:10B2  EB 44				jmp	short loc_118		; (10F8)
020A:10B4			loc_115:
020A:10B4  26: 80 3F 01				cmp	byte ptr es:[bx],1
020A:10B8  75 3E				jne	loc_118			; Jump if not equal
020A:10BA  26: 8B 47 02				mov	ax,es:[bx+2]
020A:10BE  26: 03 47 04				add	ax,es:[bx+4]
020A:10C2  3B C6				cmp	ax,si
020A:10C4  72 32				jb	loc_118			; Jump if below
020A:10C6  8B C6				mov	ax,si
020A:10C8  03 C2				add	ax,dx
020A:10CA  26: 3B 47 02				cmp	ax,es:[bx+2]
020A:10CE  72 28				jb	loc_118			; Jump if below
020A:10D0  26: 3B 77 02				cmp	si,es:[bx+2]
020A:10D4  76 08				jbe	loc_116			; Jump if below or =
020A:10D6  03 D6				add	dx,si
020A:10D8  26: 8B 77 02				mov	si,es:[bx+2]
020A:10DC  2B D6				sub	dx,si
020A:10DE			loc_116:
020A:10DE  26: 8B 47 02				mov	ax,es:[bx+2]
020A:10E2  26: 03 47 04				add	ax,es:[bx+4]
020A:10E6  2B C2				sub	ax,dx
020A:10E8  2B C6				sub	ax,si
020A:10EA  76 02				jbe	loc_117			; Jump if below or =
020A:10EC  03 D0				add	dx,ax
020A:10EE			loc_117:
020A:10EE  26: C6 07 04				mov	byte ptr es:[bx],4
020A:10F2  0B FF				or	di,di			; Zero ?
020A:10F4  75 02				jnz	loc_118			; Jump if not zero
020A:10F6  8B FB				mov	di,bx
020A:10F8			loc_118:
020A:10F8  83 C3 06				add	bx,6
020A:10FB  E2 A9				loop	locloop_114		; Loop if cx > 0

020A:10FD  0B FF				or	di,di			; Zero ?
020A:10FF  74 11				jz	loc_119			; Jump if zero
020A:1101  26: C6 45 01 00			mov	byte ptr es:[di+1],0
020A:1106  26: C6 05 01				mov	byte ptr es:[di],1
020A:110A  26: 89 75 02				mov	es:[di+2],si
020A:110E  26: 89 55 04				mov	es:[di+4],dx
020A:1112			loc_119:
020A:1112  07					pop	es
020A:1113  C3					retn
				sub_19		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1114			sub_20		proc	near
020A:1114  1E					push	ds
020A:1115  50					push	ax
020A:1116  B8 0040				mov	ax,40h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 25

020A:1119  8E D8				mov	ds,ax
020A:111B  9F					lahf				; Load ah from flags
020A:111C  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:1122  75 0C				jnz	loc_121			; Jump if not zero
020A:1124  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:112B			loc_120:
020A:112B  9E					sahf				; Store ah into flags
020A:112C  58					pop	ax
020A:112D  1F					pop	ds
020A:112E  EB 03				jmp	short loc_122		; (1133)
020A:1130			loc_121:
020A:1130  FA					cli				; Disable interrupts
020A:1131  EB F8				jmp	short loc_120		; (112B)
020A:1133			loc_122:
020A:1133  C3					retn
				sub_20		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1134			sub_21		proc	near
020A:1134  1E					push	ds
020A:1135  50					push	ax
020A:1136  B8 0040				mov	ax,40h
020A:1139  8E D8				mov	ds,ax
020A:113B  9F					lahf				; Load ah from flags
020A:113C  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:1142  75 14				jnz	loc_124			; Jump if not zero
020A:1144  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:114A  75 0C				jnz	loc_124			; Jump if not zero
020A:114C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:1153			loc_123:
020A:1153  9E					sahf				; Store ah into flags
020A:1154  58					pop	ax
020A:1155  1F					pop	ds
020A:1156  EB 03				jmp	short loc_125		; (115B)
020A:1158			loc_124:
020A:1158  FB					sti				; Enable interrupts
020A:1159  EB F8				jmp	short loc_123		; (1153)
020A:115B			loc_125:
020A:115B  C3					retn
				sub_21		endp

020A:115C			loc_126:
020A:115C  1E					push	ds
020A:115D  50					push	ax
020A:115E  B8 0040				mov	ax,40h
020A:1161  8E D8				mov	ds,ax
020A:1163  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:1169  75 4F				jnz	loc_134			; Jump if not zero
020A:116B  55					push	bp
020A:116C  8B EC				mov	bp,sp
020A:116E  8B 46 0A				mov	ax,[bp+0Ah]
020A:1171  5D					pop	bp
020A:1172  A9 0100				test	ax,100h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 26

020A:1175  75 43				jnz	loc_134			; Jump if not zero
020A:1177  A9 0200				test	ax,200h
020A:117A  74 22				jz	loc_130			; Jump if zero
020A:117C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:1183  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:1189  75 2F				jnz	loc_134			; Jump if not zero
020A:118B			loc_127:
020A:118B  86 E0				xchg	ah,al
020A:118D  FC					cld				; Clear direction
020A:118E  A8 04				test	al,4
020A:1190  75 25				jnz	loc_133			; Jump if not zero
020A:1192			loc_128:
020A:1192  A8 08				test	al,8
020A:1194  75 11				jnz	loc_131			; Jump if not zero
020A:1196  70 19				jo	loc_132			; Jump if overflow=1
020A:1198			loc_129:
020A:1198  9E					sahf				; Store ah into flags
020A:1199  58					pop	ax
020A:119A  1F					pop	ds
020A:119B  CA 0002				retf	2			; Return far
020A:119E			loc_130:
020A:119E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (020A:0314=3231h)
020A:11A5  EB E4				jmp	short loc_127		; (118B)
020A:11A7			loc_131:
020A:11A7  70 EF				jo	loc_129			; Jump if overflow=1
020A:11A9  50					push	ax
020A:11AA  B0 7F				mov	al,7Fh
020A:11AC  04 02				add	al,2
020A:11AE  58					pop	ax
020A:11AF  EB E7				jmp	short loc_129		; (1198)
020A:11B1			loc_132:
020A:11B1  50					push	ax
020A:11B2  32 C0				xor	al,al			; Zero register
020A:11B4  58					pop	ax
020A:11B5  EB E1				jmp	short loc_129		; (1198)
020A:11B7			loc_133:
020A:11B7  FD					std				; Set direction flag
020A:11B8  EB D8				jmp	short loc_128		; (1192)
020A:11BA			loc_134:
020A:11BA  58					pop	ax
020A:11BB  1F					pop	ds
020A:11BC  CF					iret				; Interrupt return
020A:11BD  00 3D				add	[di],bh
020A:11BF  02 00				add	al,[bx+si]
020A:11C1  75 06				jnz	loc_135			; Jump if not zero
020A:11C3  2E: A0 003C				mov	al,byte ptr cs:[3Ch]	; (020A:003C=10h)
020A:11C7  98					cbw				; Convrt byte to word
020A:11C8  C3					retn
020A:11C9			loc_135:
020A:11C9  C4					db	0C4h
020A:11CA  C4 52 00		;*		les	dx,dword ptr [bp+si+0]	; Load seg:offset ptr
020A:11CA  C4 52 00				db	0C4h, 52h, 00h
020A:11CD  C3					retn
							                        ;* No entry point to code
020A:11CE  2E: C6 46 28 03			mov	byte ptr cs:[bp+28h],3
020A:11D3  49					dec	cx
020A:11D4  00 00				add	[bx+si],al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 27

020A:11D6  3D 002F				cmp	ax,2Fh
020A:11D9  00 06 0600				add	byte ptr ds:[600h],al	; (020A:0600=2)
020A:11DD  00 FD				add	ch,bh
020A:11DF  35 FFFF				xor	ax,0FFFFh
020A:11E2  06					push	es
020A:11E3  00 23				add	[bp+di],ah
020A:11E5  0485[00]				db	1157 dup (0)
020A:166A  0C 00				or	al,0
020A:166C  82 01 54				add	byte ptr [bx+di],54h	; 'T'
020A:166F  03 58 72				add	bx,[bx+si+72h]
020A:1672  03 09				add	cx,[bx+di]
020A:1674  00 19				add	[bx+di],bl
020A:1676  00 00				add	[bx+si],al
020A:1678  0C 00				or	al,0
020A:167A  82 01 52				add	byte ptr [bx+di],52h	; 'R'
020A:167D  03 00				add	ax,[bx+si]
020A:167F  00 FF				add	bh,bh
020A:1681  FF					db	0FFh
020A:1682  D9					db	0D9h
020A:1683  19 04				sbb	[si],ax
020A:1685  00 00				add	[bx+si],al
020A:1687  00 41 41				add	[bx+di+41h],al
020A:168A  000F[41]				db	15 dup (41h)
020A:1699  00					db	0
020A:169A  00 00				add	[bx+si],al
020A:169C  00 41 41				add	[bx+di+41h],al
020A:169F  0008[41]				db	8 dup (41h)
020A:16A7  00 00				add	[bx+si],al
020A:16A9  0011[41]				db	17 dup (41h)
020A:16BA  00					db	0
020A:16BB  00 00				add	[bx+si],al
020A:16BD  00 41 41				add	[bx+di+41h],al
020A:16C0  0008[41]				db	8 dup (41h)
020A:16C8  00 00				add	[bx+si],al
020A:16CA  0011[41]				db	17 dup (41h)
020A:16DB  00					db	0
020A:16DC  00 00				add	[bx+si],al
020A:16DE  00 41 41				add	[bx+di+41h],al
020A:16E1  0008[41]				db	8 dup (41h)
020A:16E9  00 00				add	[bx+si],al
020A:16EB  0011[41]				db	17 dup (41h)
020A:16FC  00					db	0
020A:16FD  00 00				add	[bx+si],al
020A:16FF  00 41 41				add	[bx+di+41h],al
020A:1702  0008[41]				db	8 dup (41h)
020A:170A  00					db	0
020A:170B  00 00				add	[bx+si],al
020A:170D  00 95 4C1C				add	data_174[di],dl		; (020A:4C1C=2Eh)
020A:1711  7C 03				jl	loc_136			; Jump if <
020A:1713  12 00				adc	al,[bx+si]
020A:1715  00 52 03				add	[bp+si+3],dl
020A:1718  00					db	0
020A:1719  00 00				add	[bx+si],al
020A:171B  00 C7				add	bh,al
020A:171D  1C 00				sbb	al,0
020A:171F  00 41 3A				add	[bx+di+3Ah],al
020A:1722  5C					pop	sp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 28

020A:1723  0041[00]				db	65 dup (0)
020A:1764  58					pop	ax
020A:1765  02 00				add	al,[bx+si]
020A:1767  42					inc	dx
020A:1768  3A 5C 00		;*		cmp	bl,[si+0]
020A:1768  3A 5C 00				db	 3Ah, 5Ch, 00h
020A:176B  0040[00]				db	64 dup (0)
020A:17AB  58					pop	ax
020A:17AC  02 00				add	al,[bx+si]
020A:17AE  43					inc	bx
020A:17AF  3A 5C 00		;*		cmp	bl,[si+0]
020A:17AF  3A 5C 00				db	 3Ah, 5Ch, 00h
020A:17B2  0040[00]				db	64 dup (0)
020A:17F2  5C					pop	sp
020A:17F3  02 00				add	al,[bx+si]
020A:17F5  44					inc	sp
020A:17F6  3A 5C 00		;*		cmp	bl,[si+0]
020A:17F6  3A 5C 00				db	 3Ah, 5Ch, 00h
020A:17F9  0040[00]				db	64 dup (0)
020A:1839  5C					pop	sp
020A:183A  02 00				add	al,[bx+si]
020A:183C  B5 01				mov	ch,1
020A:183E  00 00				add	[bx+si],al
020A:1840  53					push	bx
020A:1841  8F 03				pop	word ptr [bp+di]
020A:1843  7D 00				jge	$+2			; delay for I/O
020A:1845  00 0C				add	[si],cl
020A:1847  00 58 00		;*		add	[bx+si+0],bl
020A:1847  00 58 00				db	 00h, 58h, 00h
020A:184A  AA					stosb				; Store al to es:[di]
020A:184B  03 00				add	ax,[bx+si]
020A:184D  00					db	0
020A:184E  00					db	0
020A:184F  00 00				add	[bx+si],al
020A:1851  00 09				add	[bx+di],cl
020A:1853  00 48 00		;*		add	[bx+si+0],cl
020A:1853  00 48 00				db	 00h, 48h, 00h
020A:1856  80 00 00				add	byte ptr [bx+si],0
020A:1859  00 BF 0003				add	byte ptr data_3+1[bx],bh	; (020A:0003=0)
020A:185D  00 40 00		;*		add	[bx+si+0],al
020A:185D  00 40 00				db	 00h, 40h, 00h
020A:1860  40					inc	ax
020A:1861  00 53 FF				add	[bp+di-1],dl
020A:1864  00 F0				add	al,dh
020A:1866  E8 01CE				call	sub_24			; (1A37)
020A:1869  12 00				adc	al,[bx+si]
020A:186B  46					inc	si
020A:186C  07					pop	es
020A:186D  0A 02				or	al,[bp+si]
020A:186F  E8 01C5				call	sub_24			; (1A37)
020A:1872  1B 00				sbb	ax,[bx+si]
020A:1874  0A 04				or	al,[si]
020A:1876  0A 02				or	al,[bp+si]
020A:1878  EB 02				jmp	short loc_137		; (187C)
020A:187A  90					nop
020A:187B  00 E8				add	al,ch
020A:187D  B8 2401				mov	ax,2401h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 29

020A:1880  00 A4 0A0C				add	data_92[si],ah		; (020A:0A0C=1Ch)
020A:1884  02 E8				add	ch,al
020A:1886  AF					scasw				; Scan es:[di] for ax
020A:1887  01 31				add	[bx+di],si
020A:1889  00 EB				add	bl,ch
020A:188B  10 FF				adc	bh,bh
020A:188D  03 0A				add	cx,[bp+si]
020A:188F  02 4B 42				add	cl,[bp+di+42h]
020A:1892  00 EB				add	bl,ch
020A:1894  0C 00				or	al,0
020A:1896  00					db	0
020A:1897  00					db	0
020A:1898  00					db	0
020A:1899  00 00				add	[bx+si],al
020A:189B  00 E8				add	al,ch
020A:189D  98					cbw				; Convrt byte to word
020A:189E  01 3C				add	[si],di
020A:18A0  00 E9				add	cl,ch
020A:18A2  32 01				xor	al,[bx+di]
020A:18A4  EB 10				jmp	short loc_138		; (18B6)
020A:18A6  FF 03				inc	word ptr [bp+di]
020A:18A8  0A 02				or	al,[bp+si]
020A:18AA  4B					dec	bx
020A:18AB  42					inc	dx
020A:18AC  00 EB				add	bl,ch
020A:18AE  0C 00				or	al,0
020A:18B0  00					db	0
020A:18B1  00					db	0
020A:18B2  00					db	0
020A:18B3  00 00				add	[bx+si],al
020A:18B5  00 E8				add	al,ch
020A:18B7  7E 01				jle	loc_139			; Jump if < or =
020A:18B9  56					push	si
020A:18BA			loc_139:
020A:18BA  00 E9				add	cl,ch
020A:18BC  18 01				sbb	[bx+di],al
020A:18BE  EB 10				jmp	short loc_140		; (18D0)
020A:18C0  FF 03				inc	word ptr [bp+di]
020A:18C2  0A 02				or	al,[bp+si]
020A:18C4  4B					dec	bx
020A:18C5  42					inc	dx
020A:18C6  00 EB				add	bl,ch
020A:18C8  0C 00				or	al,0
020A:18CA  00					db	0
020A:18CB  00					db	0
020A:18CC  00					db	0
020A:18CD  00 00				add	[bx+si],al
020A:18CF  00 E8				add	al,ch
020A:18D1  64					db	64h
020A:18D2  01 70 00		;*		add	[bx+si+0],si
020A:18D2  01 70 00				db	 01h, 70h, 00h
020A:18D5  E9 00FE				jmp	loc_153			; (19D6)
020A:18D8  EB 10				jmp	short loc_141		; (18EA)
020A:18DA  FF 03				inc	word ptr [bp+di]
020A:18DC  0A 02				or	al,[bp+si]
020A:18DE  4B					dec	bx
020A:18DF  42					inc	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 30

020A:18E0  00 EB				add	bl,ch
020A:18E2  0C 00				or	al,0
020A:18E4  00					db	0
020A:18E5  00					db	0
020A:18E6  00					db	0
020A:18E7  00 00				add	[bx+si],al
020A:18E9  00 E8				add	al,ch
020A:18EB  4A					dec	dx
020A:18EC  01 8A E900				add	[bp+si-1700h],cx
020A:18F0  E4 00				in	al,0			; port 0, DMA-1 bas&add ch 0
020A:18F2  EB 10				jmp	short loc_142		; (1904)
020A:18F4  B3 07				mov	bl,7
020A:18F6  0A 02				or	al,[bp+si]
020A:18F8  4B					dec	bx
020A:18F9  42					inc	dx
020A:18FA  00 EB				add	bl,ch
020A:18FC  0C 00				or	al,0
020A:18FE  00					db	0
020A:18FF  00					db	0
020A:1900  00					db	0
020A:1901  00 00				add	[bx+si],al
020A:1903  00 E8				add	al,ch
020A:1905  30 01				xor	[bx+di],al
020A:1907  A4					movsb				; Mov [si] to es:[di]
020A:1908  00 E9				add	cl,ch
020A:190A  CA EB00				retf	0EB00h			; Return far
020A:190D  10 B4 0A06				adc	data_91[si],dh		; (020A:0A06=74h)
020A:1911  02 4B 42				add	cl,[bp+di+42h]
020A:1914  00 EB				add	bl,ch
020A:1916  0C 00				or	al,0
020A:1918  00					db	0
020A:1919  00					db	0
020A:191A  00					db	0
020A:191B  00 00				add	[bx+si],al
020A:191D  00 E8				add	al,ch
020A:191F  16					push	ss
020A:1920  01 BE E900				add	[bp-1700h],di
020A:1924  B0 00				mov	al,0
020A:1926  EB 10				jmp	short loc_143		; (1938)
020A:1928  B4 06				mov	ah,6
020A:192A  0A 02				or	al,[bp+si]
020A:192C  4B					dec	bx
020A:192D  42					inc	dx
020A:192E  00 EB				add	bl,ch
020A:1930  0C 00				or	al,0
020A:1932  00					db	0
020A:1933  00					db	0
020A:1934  00					db	0
020A:1935  00 00				add	[bx+si],al
020A:1937  00 E8				add	al,ch
020A:1939  FC					cld				; Clear direction
020A:193A  00 D8				add	al,bl
020A:193C  00 E9				add	cl,ch
020A:193E  96					xchg	si,ax
020A:193F  00 EB				add	bl,ch
020A:1941  10 B4 0A06				adc	data_91[si],dh		; (020A:0A06=74h)
020A:1945  02 4B 42				add	cl,[bp+di+42h]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 31

020A:1948  00 EB				add	bl,ch
020A:194A  0C 00				or	al,0
020A:194C  00					db	0
020A:194D  00					db	0
020A:194E  00					db	0
020A:194F  00 00				add	[bx+si],al
020A:1951  00 E8				add	al,ch
020A:1953  E2 00				loop	locloop_144		; Loop if cx > 0


020A:1955			locloop_144:
020A:1955  F2					db	0F2h
020A:1956  00 EB				add	bl,ch
020A:1958  7D 90		;*		jge	loc_141			;*Jump if > or =
020A:1958  7D 90				db	 7Dh, 90h
020A:195A  EB 10				jmp	short loc_145		; (196C)
020A:195C  B4 06				mov	ah,6
020A:195E  0A 02				or	al,[bp+si]
020A:1960  4B					dec	bx
020A:1961  42					inc	dx
020A:1962  00 EB				add	bl,ch
020A:1964  0C 00				or	al,0
020A:1966  00					db	0
020A:1967  00					db	0
020A:1968  00					db	0
020A:1969  00 00				add	[bx+si],al
020A:196B  00 E8				add	al,ch
020A:196D  C8					db	0C8h
020A:196E  00 0C				add	[si],cl
020A:1970  01 EB				add	bx,bp
020A:1972  63					db	63h
020A:1973  90					nop
020A:1974  EB 10				jmp	short loc_146		; (1986)
020A:1976  B4 06				mov	ah,6
020A:1978  0A 02				or	al,[bp+si]
020A:197A  4B					dec	bx
020A:197B  42					inc	dx
020A:197C  00 EB				add	bl,ch
020A:197E  0C 00				or	al,0
020A:1980  00					db	0
020A:1981  00					db	0
020A:1982  00					db	0
020A:1983  00 00				add	[bx+si],al
020A:1985  00 E8				add	al,ch
020A:1987  AE					scasb				; Scan es:[di] for al
020A:1988  00 26 EB01				add	byte ptr ds:[0EB01h],ah	; (020A:EB01=14h)
020A:198C  49					dec	cx
020A:198D  90					nop

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:198E			sub_23		proc	near
020A:198E  1E					push	ds
020A:198F  50					push	ax
020A:1990  B8 0040				mov	ax,40h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 32

020A:1993  8E D8				mov	ds,ax
020A:1995  9F					lahf				; Load ah from flags
020A:1996  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:199C  75 0C				jnz	loc_148			; Jump if not zero
020A:199E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:19A5			loc_147:
020A:19A5  9E					sahf				; Store ah into flags
020A:19A6  58					pop	ax
020A:19A7  1F					pop	ds
020A:19A8  EB 03				jmp	short loc_149		; (19AD)
020A:19AA			loc_148:
020A:19AA  FA					cli				; Disable interrupts
020A:19AB  EB F8				jmp	short loc_147		; (19A5)
020A:19AD			loc_149:
020A:19AD  C3					retn
				sub_23		endp

							                        ;* No entry point to code
020A:19AE  1E					push	ds
020A:19AF  50					push	ax
020A:19B0  B8 0040				mov	ax,40h
020A:19B3  8E D8				mov	ds,ax
020A:19B5  9F					lahf				; Load ah from flags
020A:19B6  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:19BC  75 14				jnz	loc_151			; Jump if not zero
020A:19BE  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:19C4  75 0C				jnz	loc_151			; Jump if not zero
020A:19C6  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:19CD			loc_150:
020A:19CD  9E					sahf				; Store ah into flags
020A:19CE  58					pop	ax
020A:19CF  1F					pop	ds
020A:19D0  EB 03				jmp	short loc_152		; (19D5)
020A:19D2			loc_151:
020A:19D2  FB					sti				; Enable interrupts
020A:19D3  EB F8				jmp	short loc_150		; (19CD)
020A:19D5			loc_152:
020A:19D5  C3					retn
020A:19D6			loc_153:
020A:19D6  1E					push	ds
020A:19D7  50					push	ax
020A:19D8  B8 0040				mov	ax,40h
020A:19DB  8E D8				mov	ds,ax
020A:19DD  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:19E3  75 4F				jnz	loc_161			; Jump if not zero
020A:19E5  55					push	bp
020A:19E6  8B EC				mov	bp,sp
020A:19E8  8B 46 0A				mov	ax,[bp+0Ah]
020A:19EB  5D					pop	bp
020A:19EC  A9 0100				test	ax,100h
020A:19EF  75 43				jnz	loc_161			; Jump if not zero
020A:19F1  A9 0200				test	ax,200h
020A:19F4  74 22				jz	loc_157			; Jump if zero
020A:19F6  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:19FD  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:1A03  75 2F				jnz	loc_161			; Jump if not zero
020A:1A05			loc_154:
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 33

020A:1A05  86 E0				xchg	ah,al
020A:1A07  FC					cld				; Clear direction
020A:1A08  A8 04				test	al,4
020A:1A0A  75 25				jnz	loc_160			; Jump if not zero
020A:1A0C			loc_155:
020A:1A0C  A8 08				test	al,8
020A:1A0E  75 11				jnz	loc_158			; Jump if not zero
020A:1A10  70 19				jo	loc_159			; Jump if overflow=1
020A:1A12			loc_156:
020A:1A12  9E					sahf				; Store ah into flags
020A:1A13  58					pop	ax
020A:1A14  1F					pop	ds
020A:1A15  CA 0002				retf	2			; Return far
020A:1A18			loc_157:
020A:1A18  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (020A:0314=3231h)
020A:1A1F  EB E4				jmp	short loc_154		; (1A05)
020A:1A21			loc_158:
020A:1A21  70 EF				jo	loc_156			; Jump if overflow=1
020A:1A23  50					push	ax
020A:1A24  B0 7F				mov	al,7Fh
020A:1A26  04 02				add	al,2
020A:1A28  58					pop	ax
020A:1A29  EB E7				jmp	short loc_156		; (1A12)
020A:1A2B			loc_159:
020A:1A2B  50					push	ax
020A:1A2C  32 C0				xor	al,al			; Zero register
020A:1A2E  58					pop	ax
020A:1A2F  EB E1				jmp	short loc_156		; (1A12)
020A:1A31			loc_160:
020A:1A31  FD					std				; Set direction flag
020A:1A32  EB D8				jmp	short loc_155		; (1A0C)
020A:1A34			loc_161:
020A:1A34  58					pop	ax
020A:1A35  1F					pop	ds
020A:1A36  CF					iret				; Interrupt return

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1A37			sub_24		proc	near
020A:1A37  50					push	ax
020A:1A38  55					push	bp
020A:1A39  06					push	es
020A:1A3A  2E: 8E 06 000A			mov	es,word ptr cs:[0Ah]	; (020A:000A=272Dh)
020A:1A3F  2E: 8B 2E 0010			mov	bp,word ptr cs:[10h]	; (020A:0010=1FBFh)
020A:1A44  B0 01				mov	al,1
020A:1A46  26: 86 46 00				xchg	es:[bp],al
020A:1A4A  3C 00				cmp	al,0
020A:1A4C  75 51				jne	loc_163			; Jump if not equal
020A:1A4E  2E: 83 2E 0010 08			sub	word ptr cs:[10h],8	; (020A:0010=1FBFh)
020A:1A54			loc_162:
020A:1A54  26: 89 66 02				mov	es:[bp+2],sp
020A:1A58  26: 8C 56 04				mov	es:[bp+4],ss
020A:1A5C  8B C5				mov	ax,bp
020A:1A5E  26: 8B 6E 06				mov	bp,es:[bp+6]
020A:1A62  26: 39 46 00				cmp	es:[bp],ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 34

020A:1A66  75 44				jne	loc_165			; Jump if not equal
020A:1A68  55					push	bp
020A:1A69  8B EC				mov	bp,sp
020A:1A6B  8B 46 08				mov	ax,[bp+8]
020A:1A6E  5D					pop	bp
020A:1A6F  06					push	es
020A:1A70  17					pop	ss
020A:1A71  8B E5				mov	sp,bp
020A:1A73  8B E8				mov	bp,ax
020A:1A75  2E: 8B 6E 00				mov	bp,cs:[bp]
020A:1A79  9C					pushf				; Push flags
020A:1A7A  2E: FF 5E 00				call	dword ptr cs:[bp]	;*
020A:1A7E  8B EC				mov	bp,sp
020A:1A80  26: 8B 6E 00				mov	bp,es:[bp]
020A:1A84  26: 8E 56 04				mov	ss,es:[bp+4]
020A:1A88  26: 8B 66 02				mov	sp,es:[bp+2]
020A:1A8C  26: C6 46 00 00			mov	byte ptr es:[bp],0
020A:1A91  2E: 89 2E 0010			mov	word ptr cs:[10h],bp	; (020A:0010=1FBFh)
020A:1A96  07					pop	es
020A:1A97  5D					pop	bp
020A:1A98  58					pop	ax
020A:1A99  83 C4 02				add	sp,2
020A:1A9C  E9 FF37				jmp	loc_153			; (19D6)
020A:1A9F			loc_163:
020A:1A9F  3C 01				cmp	al,1
020A:1AA1  74 04				je	loc_164			; Jump if equal
020A:1AA3  26: 86 46 00				xchg	es:[bp],al
020A:1AA7			loc_164:
020A:1AA7  E8 0012				call	sub_25			; (1ABC)
020A:1AAA  EB A8				jmp	short loc_162		; (1A54)
020A:1AAC			loc_165:
020A:1AAC  2E: 3B 2E 000C			cmp	bp,word ptr cs:[0Ch]	; (020A:000C=9028h)
020A:1AB1  72 F4				jb	loc_164			; Jump if below
020A:1AB3  8B E8				mov	bp,ax
020A:1AB5  26: C6 46 00 03			mov	byte ptr es:[bp],3
020A:1ABA  EB EB				jmp	short loc_164		; (1AA7)
				sub_24		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:1ABC			sub_25		proc	near
020A:1ABC  2E: 8B 2E 000E			mov	bp,word ptr cs:[0Eh]	; (020A:000E=0A02Bh)
020A:1AC1			loc_166:
020A:1AC1  26: 80 7E 00 00			cmp	byte ptr es:[bp],0
020A:1AC6  75 12				jne	loc_167			; Jump if not equal
020A:1AC8  B0 01				mov	al,1
020A:1ACA  26: 86 46 00				xchg	es:[bp],al
020A:1ACE  3C 00				cmp	al,0
020A:1AD0  74 14				je	loc_168			; Jump if equal
020A:1AD2  3C 01				cmp	al,1
020A:1AD4  74 04				je	loc_167			; Jump if equal
020A:1AD6  26: 88 46 00				mov	es:[bp],al
020A:1ADA			loc_167:
020A:1ADA  2E: 3B 2E 000C			cmp	bp,word ptr cs:[0Ch]	; (020A:000C=9028h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 35

020A:1ADF  74 06				je	loc_169			; Jump if equal
020A:1AE1  83 ED 08				sub	bp,8
020A:1AE4  EB DB				jmp	short loc_166		; (1AC1)
020A:1AE6			loc_168:
020A:1AE6  C3					retn
020A:1AE7			loc_169:
020A:1AE7  E8 FEA4				call	sub_23			; (198E)
020A:1AEA  B0 FF				mov	al,0FFh
020A:1AEC  E6 21				out	21h,al			; port 21h, 8259-1 int comands
020A:1AEE  E6 A1				out	0A1h,al			; port 0A1h  al = 0FFh, inhibit interr
020A:1AF0  8C CE				mov	si,cs
020A:1AF2  8E DE				mov	ds,si
020A:1AF4  BE 02CB				mov	si,2CBh
020A:1AF7  50					push	ax
020A:1AF8  1E					push	ds
020A:1AF9  B8 0070				mov	ax,70h
020A:1AFC  8E D8				mov	ds,ax
020A:1AFE  F6 06 0337 01			test	byte ptr ds:[337h],1	; (0070:0337=0)
020A:1B03  1F					pop	ds
020A:1B04  58					pop	ax
020A:1B05  74 05				jz	loc_170			; Jump if zero
020A:1B07  9A 0070:0338		;*		call	far ptr sub_2		;*(0070:0338)
020A:1B07  9A					db	9Ah
020A:1B08  0338 0070				dw	338h, 70h
020A:1B0C			loc_170:
020A:1B0C  AC					lodsb				; String [si] to al
020A:1B0D  3C 24				cmp	al,24h			; '$'
020A:1B0F  74 08				je	loc_171			; Jump if equal
020A:1B11  B3 07				mov	bl,7
020A:1B13  B4 0E				mov	ah,0Eh
020A:1B15  CD 10				int	10h			; Video display   ah=functn 0Eh
										;  write char al, teletype mode
020A:1B17  EB F3				jmp	short loc_170		; (1B0C)
020A:1B19			loc_171:
020A:1B19  EB FE				jmp	short loc_171		; (1B19)
				sub_25		endp

020A:1B1B  0D 070A				or	ax,70Ah
020A:1B1E  0D 0A 49 6E 74 65			db	0Dh, 0Ah, 'Internal stack overflo'
020A:1B24  72 6E 61 6C 20 73
020A:1B2A  74 61 63 6B 20 6F
020A:1B30  76 65 72 66 6C 6F
020A:1B36  77 0D 0A 53 79 73			db	'w', 0Dh, 0Ah, 'System halted', 0Dh
020A:1B3C  74 65 6D 20 68 61
020A:1B42  6C 74 65 64 0D
020A:1B47  0A 24				db	0Ah, '$'
020A:1B49  52					db	'R'
020A:1B4A  00 00				add	[bx+si],al
020A:1B4C  06					push	es
020A:1B4D  00 05				add	[di],al
020A:1B4F  0007[00]				db	7 dup (0)
020A:1B56  C6 00 00				mov	byte ptr [bx+si],0
020A:1B59  00					db	0
020A:1B5A  00					db	0
020A:1B5B  00 00				add	[bx+si],al
020A:1B5D  00 46 01				add	[bp+1],al
020A:1B60  00					db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 36

020A:1B61  00					db	0
020A:1B62  00					db	0
020A:1B63  00 00				add	[bx+si],al
020A:1B65  00 C6				add	dh,al
020A:1B67  01 00				add	[bx+si],ax
020A:1B69  00					db	0
020A:1B6A  00					db	0
020A:1B6B  00 00				add	[bx+si],al
020A:1B6D  00 46 02				add	[bp+2],al
020A:1B70  00					db	0
020A:1B71  00					db	0
020A:1B72  00					db	0
020A:1B73  00 00				add	[bx+si],al
020A:1B75  00 C6				add	dh,al
020A:1B77  02 00				add	al,[bx+si]
020A:1B79  00					db	0
020A:1B7A  00					db	0
020A:1B7B  00 00				add	[bx+si],al
020A:1B7D  00 46 03				add	[bp+3],al
020A:1B80  00					db	0
020A:1B81  00					db	0
020A:1B82  00					db	0
020A:1B83  00 00				add	[bx+si],al
020A:1B85  00 C6				add	dh,al
020A:1B87  03 00				add	ax,[bx+si]
020A:1B89  00					db	0
020A:1B8A  00					db	0
020A:1B8B  00 00				add	[bx+si],al
020A:1B8D  00 46 04				add	[bp+4],al
020A:1B90  00 00				add	[bx+si],al
020A:1B92  F8					clc				; Clear carry flag
020A:1B93  05 8E05				add	ax,8E05h
020A:1B96  C6 04 00				mov	byte ptr [si],0
020A:1B99  00FD[00]				db	253 dup (0)
020A:1C96  08 00				or	[bx+si],al
020A:1C98  007E[00]				db	126 dup (0)
020A:1D16  10 00				adc	[bx+si],al
020A:1D18  007E[00]				db	126 dup (0)
020A:1D96  18 00				sbb	[bx+si],al
020A:1D98  007E[00]				db	126 dup (0)
020A:1E16  20 00				and	[bx+si],al
020A:1E18  0071[00]				db	113 dup (0)
020A:1E89  00			data_119	db	0
020A:1E8A  00					db	0
020A:1E8B  0000 0000		data_120	dd	00000h
020A:1E8F  00					db	0
020A:1E90  00					db	0
020A:1E91  00					db	0
020A:1E92  00					db	0
020A:1E93  00 00				add	[bx+si],al
020A:1E95  00 28				add	[bx+si],ch
020A:1E97  00					db	0
020A:1E98  007E[00]				db	126 dup (0)
020A:1F16  30 00				xor	[bx+si],al
020A:1F18  007E[00]				db	126 dup (0)
020A:1F96  38 00				cmp	[bx+si],al
020A:1F98  006C[00]				db	108 dup (0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 37

020A:2004  01 91 9101				add	data_177[bx+di],dx	; (020A:9101=3Ch)
020A:2008  05 F38E				add	ax,0F38Eh
020A:200B  03 B7 0500				add	si,word ptr ds:[500h][bx]	; (020A:0500=4F08h)
020A:200F  8E					db	8Eh
020A:2010  2E: 02 8F 4603			add	cl,cs:data_172[bx]	; (020A:4603=4)
020A:2015  30 40 00		;*		xor	[bx+si+0],al
020A:2015  30 40 00				db	 30h, 40h, 00h
020A:2018  06					push	es
020A:2019  00 1B				add	[bp+di],bl
020A:201B  39 00				cmp	[bx+si],ax
020A:201D  00 06 4D00				add	data_175,al		; (020A:4D00=0C2h)
020A:2021  0D A204				or	ax,0A204h
020A:2024  00 00				add	[bx+si],al
020A:2026  06					push	es
020A:2027  00 43 4F				add	[bp+di+4Fh],al
020A:202A  4D					dec	bp
020A:202B  4D					dec	bp
020A:202C  41					inc	cx
020A:202D  4E					dec	si
020A:202E  44					inc	sp
020A:202F  00 CD				add	ch,cl
020A:2031  20 FF				and	bh,bh
020A:2033  9F					lahf				; Load ah from flags
020A:2034  00 9A FEF0				add	[bp+si-110h],bl
020A:2038  1D 7FF0				sbb	ax,7FF0h
020A:203B  01 0D				add	[di],cx
020A:203D  04 4B				add	al,4Bh			; 'K'
020A:203F  01 0D				add	[di],cx
020A:2041  04 56				add	al,56h			; 'V'
020A:2043  01 0D				add	[di],cx
020A:2045  04 0D				add	al,0Dh
020A:2047  04 01				add	al,1
020A:2049  01 01				add	[bx+di],ax
020A:204B  00 02				add	[bp+si],al
020A:204D  000F[FF]				db	15 dup (0FFh)
020A:205C  B8 FA04				mov	ax,0FA04h
020A:205F  05 040D				add	ax,40Dh
020A:2062  14 00				adc	al,0
020A:2064  18 00				sbb	[bx+si],al
020A:2066  0D FF04				or	ax,0FF04h
020A:2069  FF					db	0FFh
020A:206A  FF					db	0FFh
020A:206B  FF 00				inc	word ptr [bx+si]
020A:206D  00 00				add	[bx+si],al
020A:206F  00 05				add	[di],al
020A:2071  000F[00]				db	15 dup (0)
020A:2080  CD 21				int	21h			; ??INT Non-standard interrupt
020A:2082  CB					retf				; Return far
020A:2083  000A[00]				db	10 dup (0)
020A:208D  000B[20]				db	11 dup (20h)
020A:2098  00					db	0
020A:2099  00					db	0
020A:209A  00			data_128	db	0
020A:209B  00 00				add	[bx+si],al
020A:209D  20 20				and	[bx+si],ah
020A:209F  20 20				and	[bx+si],ah
020A:20A1  20 20				and	[bx+si],ah
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 38

020A:20A3  20 20				and	[bx+si],ah
020A:20A5  20 20				and	[bx+si],ah
020A:20A7  20 00				and	[bx+si],al
020A:20A9  00					db	0
020A:20AA  00					db	0
020A:20AB  00					db	0
020A:20AC  00					db	0
020A:20AD  00					db	0
020A:20AE  00 00				add	[bx+si],al
020A:20B0  00 0D				add	[di],cl
020A:20B2  20 20				and	[bx+si],ah
020A:20B4  20 53 45				and	[bp+di+45h],dl
020A:20B7  54					push	sp
020A:20B8  20 42 4C				and	[bp+si+4Ch],al
020A:20BB  41					inc	cx
020A:20BC  53					push	bx
020A:20BD  4554			data_132	dw	4554h
020A:20BF  52					push	dx
020A:20C0  3D 3041				cmp	ax,3041h
020A:20C3  640D			data_134	dw	640Dh
020A:20C5  64					db	64h
020A:20C6  72 65				jc	$+67h			; Jump if carry Set
020A:20C8  73 73				jnc	$+75h			; Jump if carry=0
020A:20CA  2E: 20 20				and	cs:[bx+si],ah
020A:20CD  6F46			data_135	dw	6F46h
020A:20CF  72 20				jc	$+22h			; Jump if carry Set
020A:20D1  65					db	65h
020A:20D2  78 61				js	$+63h			; Jump if sign=1
020A:20D4  6D					db	6Dh
020A:20D5  70 6C				jo	$+6Eh			; Jump if overflow=1
020A:20D7  65					db	65h
020A:20D8  3A 0D				cmp	cl,[di]
020A:20DA  20 6F 6E				and	[bx+6Eh],ch
020A:20DD  20 4E 54				and	[bp+54h],cl
020A:20E0  56					push	si
020A:20E1  44					inc	sp
020A:20E2  4D					dec	bp
020A:20E3  2C 20				sub	al,20h			; ' '
020A:20E5  73 70				jnc	$+72h			; Jump if carry=0
020A:20E7  65					db	65h
020A:20E8  63					db	63h
020A:20E9  69					db	69h
020A:20EA  66					db	66h
020A:20EB  79 20				jns	$+22h			; Jump if not sign
020A:20ED  61					db	61h
020A:20EE  6E					db	6Eh
020A:20EF  20 69 6E				and	[bx+di+6Eh],ch
020A:20F2  76 61				jbe	$+63h			; Jump if below or =
020A:20F4  6C					db	6Ch
020A:20F5  69					db	69h
020A:20F6  64					db	64h
020A:20F7  0D 6F20				or	ax,6F20h
020A:20FA  6E					db	6Eh
020A:20FB  6C					db	6Ch
020A:20FC  79 2E				jns	$+30h			; Jump if not sign
020A:20FE  0D 0000				or	ax,0
020A:2101  00					db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 39

020A:2102  00					db	0
020A:2103  00					db	0
020A:2104  00					db	0
020A:2105  00					db	0
020A:2106  00					db	0
020A:2107  00					db	0
020A:2108  00					db	0
020A:2109  00					db	0
020A:210A  00					db	0
020A:210B  00					db	0
020A:210C  00					db	0
020A:210D  00					db	0
020A:210E  00					db	0
020A:210F  00					db	0
020A:2110  00					db	0
020A:2111  00					db	0
020A:2112  00					db	0
020A:2113  00					db	0
020A:2114  00					db	0
020A:2115  00					db	0
020A:2116  00					db	0
020A:2117  00					db	0
020A:2118  00					db	0
020A:2119  00					db	0
020A:211A  00					db	0
020A:211B  00					db	0
020A:211C  00					db	0
020A:211D  00					db	0
020A:211E  00					db	0
020A:211F  00					db	0
020A:2120  00					db	0
020A:2121  00					db	0
020A:2122  00					db	0
020A:2123  00					db	0
020A:2124  00					db	0
020A:2125  00					db	0
020A:2126  00					db	0
020A:2127  00					db	0
020A:2128  00					db	0
020A:2129  00					db	0
020A:212A  00					db	0
020A:212B  00					db	0
020A:212C  00					db	0
020A:212D  00 00				add	[bx+si],al
020A:212F  00 E9				add	cl,ch
020A:2131  5D					pop	bp
020A:2132  15 0700				adc	ax,700h
020A:2135  64					db	64h
020A:2136  FF					db	0FFh
020A:2137  FF 27				jmp	word ptr [bx]		;*
020A:2139  5E					pop	si
020A:213A  FF					db	0FFh
020A:213B  FF E5				jmp	bp			;*Register jump
020A:213D  5C					pop	sp
020A:213E  FF					db	0FFh
020A:213F  FF 14				call	word ptr [si]		;*
020A:2141  61					db	61h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 40

020A:2142  FF					db	0FFh
020A:2143  FF					db	0FFh
020A:2144  D9					db	0D9h
020A:2145  5C					pop	sp
020A:2146  FF					db	0FFh
020A:2147  FF 53 5F				call	word ptr [bp+di+5Fh]	;*
020A:214A  FF					db	0FFh
020A:214B  FF F1		;*		push	cx
020A:214B  FF F1				db	0FFh,0F1h
020A:214D  60					db	60h
020A:214E  FF					db	0FFh
020A:214F  FF 5E 5E				call	dword ptr [bp+5Eh]	;*
020A:2152  FF					db	0FFh
020A:2153  FF 4A 64				dec	word ptr [bp+si+64h]
020A:2156  FF					db	0FFh
020A:2157  FF 72 5F				push	word ptr [bp+si+5Fh]
020A:215A  FF					db	0FFh
020A:215B  FF C3				inc	bx
020A:215D  64					db	64h
020A:215E  FF					db	0FFh
020A:215F  FF AF D900				jmp	dword ptr ds:[0D900h][bx]	;*(020A:D900=2872h)
							                        ;* No entry point to code
020A:2163  02 01				add	al,[bx+di]
020A:2165  FB					sti				; Enable interrupts
020A:2166  E8 0064				call	sub_26			; (21CD)
020A:2169  1E					push	ds
020A:216A  0E					push	cs
020A:216B  2E: FF 2E 0104			jmp	dword ptr cs:[104h]	; (020A:0104=908h)
							                        ;* No entry point to code
020A:2170  FB					sti				; Enable interrupts
020A:2171  E8 0059				call	sub_26			; (21CD)
020A:2174  1E					push	ds
020A:2175  0E					push	cs
020A:2176  2E: FF 2E 0108			jmp	dword ptr cs:[108h]	; (020A:0108=0A302h)
							                        ;* No entry point to code
020A:217B  FB					sti				; Enable interrupts
020A:217C  E8 004E				call	sub_26			; (21CD)
020A:217F  1E					push	ds
020A:2180  0E					push	cs
020A:2181  2E: FF 2E 010C			jmp	dword ptr cs:[10Ch]	; (020A:010C=9028h)
							                        ;* No entry point to code
020A:2186  FB					sti				; Enable interrupts
020A:2187  E8 0043				call	sub_26			; (21CD)
020A:218A  1E					push	ds
020A:218B  0E					push	cs
020A:218C  2E: FF 2E 0110			jmp	dword ptr cs:[110h]	; (020A:0110=1FBFh)
020A:2191			loc_172:
020A:2191  E8 0039				call	sub_26			; (21CD)
020A:2194  1E					push	ds
020A:2195  0E					push	cs
020A:2196  2E: FF 2E 0114			jmp	dword ptr cs:[114h]	; (020A:0114=0C0Bh)
							                        ;* No entry point to code
020A:219B  E8 002F				call	sub_26			; (21CD)
020A:219E  1E					push	ds
020A:219F  0E					push	cs
020A:21A0  2E: FF 2E 0118			jmp	dword ptr cs:[118h]	; (020A:0118=0)
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 41

020A:21A5  E8 0025				call	sub_26			; (21CD)
020A:21A8  1E					push	ds
020A:21A9  0E					push	cs
020A:21AA  2E: FF 2E 011C			jmp	dword ptr cs:[11Ch]	; (020A:011C=145Dh)
020A:21AF			loc_173:
020A:21AF  E8 001B				call	sub_26			; (21CD)
020A:21B2  1E					push	ds
020A:21B3  0E					push	cs
020A:21B4  2E: FF 2E 0120			jmp	dword ptr cs:[120h]	; (020A:0120=0A3BAh)
							                        ;* No entry point to code
020A:21B9  E8 0011				call	sub_26			; (21CD)
020A:21BC  1E					push	ds
020A:21BD  0E					push	cs
020A:21BE  2E: FF 2E 0124			jmp	dword ptr cs:[124h]	; (020A:0124=201h)
							                        ;* No entry point to code
020A:21C3  E8 0007				call	sub_26			; (21CD)
020A:21C6  1E					push	ds
020A:21C7  0E					push	cs
020A:21C8  2E: FF 2E 0128			jmp	dword ptr cs:[128h]	; (020A:0128=1405h)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:21CD			sub_26		proc	near
020A:21CD  9C					pushf				; Push flags
020A:21CE  50					push	ax
020A:21CF  2E: 80 3E 0134 00			cmp	byte ptr cs:[134h],0	; (020A:0134=0)
020A:21D5  74 08				je	loc_174			; Jump if equal
020A:21D7  E8 000D				call	sub_27			; (21E7)
020A:21DA  73 03				jnc	loc_174			; Jump if carry=0
020A:21DC  E8 001B				call	sub_28			; (21FA)
020A:21DF			loc_174:
020A:21DF  58					pop	ax
020A:21E0  9D					popf				; Pop flags
020A:21E1  C3					retn
				sub_26		endp

020A:21E2  EA 040D:0135		;*		jmp	far ptr loc_270		;*(040D:0135)
020A:21E2  EA					db	0EAh
020A:21E3  0135 040D				dw	135h, 40Dh

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:21E7			sub_27		proc	near
020A:21E7  53					push	bx
020A:21E8  50					push	ax
020A:21E9  B4 07				mov	ah,7
020A:21EB  2E: FF 1E 0130			call	dword ptr cs:[130h]	; (020A:0130=3E3Dh)
020A:21F0  0B C0				or	ax,ax			; Zero ?
020A:21F2  58					pop	ax
020A:21F3  5B					pop	bx
020A:21F4  75 02				jnz	loc_175			; Jump if not zero
020A:21F6  F9					stc				; Set carry flag
020A:21F7  C3					retn
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 42

020A:21F8			loc_175:
020A:21F8  F8					clc				; Clear carry flag
020A:21F9  C3					retn
				sub_27		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:21FA			sub_28		proc	near
020A:21FA  53					push	bx
020A:21FB  50					push	ax
020A:21FC  B4 05				mov	ah,5
020A:21FE  2E: FF 1E 0130			call	dword ptr cs:[130h]	; (020A:0130=3E3Dh)
020A:2203  0B C0				or	ax,ax			; Zero ?
020A:2205  74 03				jz	loc_176			; Jump if zero
020A:2207  58					pop	ax
020A:2208  5B					pop	bx
020A:2209  C3					retn
020A:220A			loc_176:
020A:220A  EB FE				jmp	short loc_176		; (220A)
				sub_28		endp

							                        ;* No entry point to code
020A:220C  CD 21				int	21h			; ??INT Non-standard interrupt
020A:220E  FA					cli				; Disable interrupts
020A:220F  0E					push	cs
020A:2210  17					pop	ss
020A:2211  BC 0612				mov	sp,612h
020A:2214  FB					sti				; Enable interrupts
020A:2215  0E					push	cs
020A:2216  1F					pop	ds
020A:2217  9C					pushf				; Push flags
020A:2218  50					push	ax
020A:2219  2E: A0 0614				mov	al,byte ptr cs:[614h]	; (020A:0614=2Eh)
020A:221D  A8 80				test	al,80h
020A:221F  74 07				jz	loc_177			; Jump if zero
020A:2221  24 7F				and	al,7Fh
020A:2223  2E: FF 1E 012C			call	dword ptr cs:[12Ch]	; (020A:012C=3A39h)
020A:2228			loc_177:
020A:2228  2E: 80 26 0614 7F			and	byte ptr cs:[614h],7Fh	; (020A:0614=2Eh)
020A:222E  58					pop	ax
020A:222F  9D					popf				; Pop flags
020A:2230  E9 FF5E				jmp	loc_172			; (2191)
							                        ;* No entry point to code
020A:2233  02 00				add	al,[bx+si]
020A:2235  00 01				add	[bx+di],al
020A:2237  09 02				or	[bp+si],ax
020A:2239  41					inc	cx
020A:223A  02 00				add	al,[bx+si]
020A:223C  00 02				add	[bp+si],al
020A:223E  10 02				adc	[bp+si],al
020A:2240  0009[00]				db	9 dup (0)
020A:2249  02 22				add	ah,[bp+si]
020A:224B  02 03				add	al,[bp+di]
020A:224D  30 02				xor	[bp+si],al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 43

020A:224F  03 2E 0002				add	bp,word ptr ds:[2]	; (020A:0002=10h)
020A:2253  0010[00]				db	16 dup (0)
020A:2263  01 09				add	[bx+di],cx
020A:2265  02 02				add	al,[bp+si]
020A:2267  5A					pop	dx
020A:2268  02 01				add	al,[bx+di]
020A:226A  3C 02				cmp	al,2
020A:226C  43					inc	bx
020A:226D  02 7C 04				add	bh,[si+4]
020A:2270  000B[00]				db	11 dup (0)
020A:227B  0D 7F04				or	ax,7F04h
020A:227E  01 0D				add	[di],cx
020A:2280  04 00				add	al,0
020A:2282  00					db	0
020A:2283  00					db	0
020A:2284  00					db	0
020A:2285  00 00				add	[bx+si],al
020A:2287  00 43 3A				add	[bp+di+3Ah],al
020A:228A  5C					pop	sp
020A:228B  57					push	di
020A:228C  49					dec	cx
020A:228D  4E					dec	si
020A:228E  44					inc	sp
020A:228F  4F					dec	di
020A:2290  57					push	di
020A:2291  53					push	bx
020A:2292  5C					pop	sp
020A:2293  53					push	bx
020A:2294  59					pop	cx
020A:2295  53					push	bx
020A:2296  54					push	sp
020A:2297  45					inc	bp
020A:2298  4D					dec	bp
020A:2299  33 32				xor	si,[bp+si]
020A:229B  5C					pop	sp
020A:229C  43					inc	bx
020A:229D  4F					dec	di
020A:229E  4D					dec	bp
020A:229F  4D					dec	bp
020A:22A0  41					inc	cx
020A:22A1  4E					dec	si
020A:22A2  44					inc	sp
020A:22A3  2E					db	2Eh
020A:22A4  43					inc	bx
020A:22A5  4F					dec	di
020A:22A6  4D					dec	bp
020A:22A7  0021[00]				db	33 dup (0)
020A:22C8  77 02				ja	loc_178			; Jump if above
020A:22CA  2C 01				sub	al,1
020A:22CC			loc_178:
020A:22CC  EA 0000:0195		;*		jmp	far ptr loc_1		;*(0000:0195)
020A:22CC  EA					db	0EAh
020A:22CD  0195 0000				dw	195h, 0
							                        ;* No entry point to code
020A:22D1  03 FF				add	di,di
020A:22D3  9F					lahf				; Load ah from flags
020A:22D4  30 BA 0001				xor	[bp+si+1],bh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 44

020A:22D8  03 00				add	ax,[bx+si]
020A:22DA  01 00				add	[bx+si],ax
020A:22DC  01 01				add	[bx+di],ax
020A:22DE  01 00				add	[bx+si],ax
020A:22E0  01 00				add	[bx+si],ax
020A:22E2  00 00				add	[bx+si],al
020A:22E4  FF					db	0FFh
020A:22E5  FF 00				inc	word ptr [bx+si]
020A:22E7  000B[00]				db	11 dup (0)
020A:22F2  04 31				add	al,31h			; '1'
020A:22F4  0B A7 0000				or	sp,word ptr ds:[0][bx]	; (020A:0000=1828h)
020A:22F8  00 00				add	[bx+si],al
020A:22FA  00 E7				add	bh,ah
020A:22FC  0C A7				or	al,0A7h
020A:22FE  0058[00]				db	88 dup (0)
020A:2356  01 00				add	[bx+si],ax
020A:2358  00 00				add	[bx+si],al
020A:235A  01 00				add	[bx+si],ax
020A:235C  0007[00]				db	7 dup (0)
020A:2363  1E					push	ds
020A:2364  06					push	es
020A:2365  0E					push	cs
020A:2366  1F					pop	ds
020A:2367  8B 16 20CD				mov	dx,data_135		; (020A:20CD=6F46h)
020A:236B  A1 20C1				mov	ax,word ptr ds:[20C1h]	; (020A:20C1=3041h)
020A:236E  8B 1E 20BD				mov	bx,data_132		; (020A:20BD=4554h)
020A:2372  8B 0E 20C3				mov	cx,data_134		; (020A:20C3=640Dh)
020A:2376  50					push	ax
020A:2377  53					push	bx
020A:2378  51					push	cx
020A:2379  8C DB				mov	bx,ds
020A:237B  8E C3				mov	es,bx
020A:237D  8B 1E 0593				mov	bx,word ptr ds:[593h]	; (020A:0593=3)
020A:2381  B4 4A				mov	ah,4Ah
020A:2383  CD 21				int	21h			; DOS Services  ah=function 4Ah
										;  change memory allocation
										;   bx=bytes/16, es=mem segment
020A:2385  80 3E 02B0 01			cmp	byte ptr ds:[2B0h],1	; (020A:02B0=1Dh)
020A:238A  75 33				jne	loc_179			; Jump if not equal
020A:238C  83 3E 0256 00			cmp	word ptr ds:[256h],0	; (020A:0256=0)
020A:2391  74 2C				je	loc_179			; Jump if equal
020A:2393  BB 0007				mov	bx,7
020A:2396  B4 48				mov	ah,48h
020A:2398  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:239A  72 23				jc	loc_179			; Jump if carry Set
020A:239C  8E C0				mov	es,ax
020A:239E  33 FF				xor	di,di			; Zero register
020A:23A0  33 F6				xor	si,si			; Zero register
020A:23A2  1E					push	ds
020A:23A3  8E 1E 0256				mov	ds,word ptr ds:[256h]	; (020A:0256=0)
020A:23A7  B9 0021				mov	cx,21h
020A:23AA  83 C1 40				add	cx,40h
020A:23AD  FC					cld				; Clear direction
020A:23AE  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:23B0  1F					pop	ds
020A:23B1  8C C1				mov	cx,es
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 45

020A:23B3  8E 06 0256				mov	es,word ptr ds:[256h]	; (020A:0256=0)
020A:23B7  B4 49				mov	ah,49h
020A:23B9  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:23BB  89 0E 0256				mov	word ptr ds:[256h],cx	; (020A:0256=0)
020A:23BF			loc_179:
020A:23BF  59					pop	cx
020A:23C0  5B					pop	bx
020A:23C1  5D					pop	bp
020A:23C2  B4 48				mov	ah,48h
020A:23C4  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:23C6  72 41				jc	loc_180			; Jump if carry Set
020A:23C8  A3 0458				mov	word ptr ds:[458h],ax	; (020A:0458=0C40Eh)
020A:23CB  A3 002C				mov	word ptr ds:[2Ch],ax	; (020A:002C=3A39h)
020A:23CE  8E C0				mov	es,ax
020A:23D0  80 3E 02B0 01			cmp	byte ptr ds:[2B0h],1	; (020A:02B0=1Dh)
020A:23D5  75 34				jne	loc_181			; Jump if not equal
020A:23D7  53					push	bx
020A:23D8  BB 0000				mov	bx,0
020A:23DB  C4					db	0C4h
020A:23DC  C4 54 0F				les	dx,dword ptr [si+0Fh]	; Load seg:offset ptr
020A:23DF  8B C3				mov	ax,bx
020A:23E1  5B					pop	bx
020A:23E2  3D 0000				cmp	ax,0
020A:23E5  74 24				je	loc_181			; Jump if equal
020A:23E7  03 D8				add	bx,ax
020A:23E9  B4 49				mov	ah,49h
020A:23EB  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:23ED  B4 48				mov	ah,48h
020A:23EF  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:23F1  72 75				jc	loc_184			; Jump if carry Set
020A:23F3  A3 0458				mov	word ptr ds:[458h],ax	; (020A:0458=0C40Eh)
020A:23F6  A3 002C				mov	word ptr ds:[2Ch],ax	; (020A:002C=3A39h)
020A:23F9  8E C0				mov	es,ax
020A:23FB  89 1E 20BD				mov	data_132,bx		; (020A:20BD=4554h)
020A:23FF  53					push	bx
020A:2400  C4					db	0C4h
020A:2401  C4 54 0F				les	dx,dword ptr [si+0Fh]	; Load seg:offset ptr
020A:2404  58					pop	ax
020A:2405  3B D8				cmp	bx,ax
020A:2407  76 0D				jbe	loc_182			; Jump if below or =
020A:2409			loc_180:
020A:2409  EB 5D				jmp	short loc_184		; (2468)
020A:240B			loc_181:
020A:240B  1E					push	ds
020A:240C  8E DD				mov	ds,bp
020A:240E  33 F6				xor	si,si			; Zero register
020A:2410  8B FE				mov	di,si
020A:2412  FC					cld				; Clear direction
020A:2413  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:2415  1F					pop	ds
020A:2416			loc_182:
020A:2416  80 3E 209A 00			cmp	data_128,0		; (020A:209A=0)
020A:241B  75 06				jne	loc_183			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 46

020A:241D  8E C5				mov	es,bp
020A:241F  B4 49				mov	ah,49h
020A:2421  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:2423			loc_183:
020A:2423  C6 06 029E 01			mov	byte ptr ds:[29Eh],1	; (020A:029E=0)
020A:2428  06					push	es
020A:2429  BE 2570				mov	si,2570h
020A:242C  BF 0000				mov	di,0
020A:242F  B9 A14C				mov	cx,0A14Ch
020A:2432  BB FFFF				mov	bx,0FFFFh
020A:2435  B4 48				mov	ah,48h
020A:2437  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:2439  3B DA				cmp	bx,dx
020A:243B  72 2B				jb	loc_184			; Jump if below
020A:243D  B4 48				mov	ah,48h
020A:243F  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:2441  72 25				jc	loc_184			; Jump if carry Set
020A:2443  50					push	ax
020A:2444  03 C3				add	ax,bx
020A:2446  2B C2				sub	ax,dx
020A:2448  A3 029C				mov	word ptr ds:[29Ch],ax	; (020A:029C=0)
020A:244B  8E C0				mov	es,ax
020A:244D  58					pop	ax
020A:244E  03 F1				add	si,cx
020A:2450  4E					dec	si
020A:2451  03 F9				add	di,cx
020A:2453  4F					dec	di
020A:2454  FD					std				; Set direction flag
020A:2455  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:2457  FC					cld				; Clear direction
020A:2458  8E C0				mov	es,ax
020A:245A  B4 49				mov	ah,49h
020A:245C  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:245E  C6 06 0330 00			mov	byte ptr ds:[330h],0	; (020A:0330=61h)
020A:2463  07					pop	es
020A:2464  1F					pop	ds
020A:2465  E9 FD47				jmp	loc_173			; (21AF)
020A:2468			loc_184:
020A:2468  E9 1BD0				jmp	loc_269			; (403B)
020A:246B  0019[00]				db	25 dup (0)
020A:2484  33 03				xor	ax,[bp+di]
020A:2486  82 03 B8				add	byte ptr [bp+di],0B8h
020A:2489  04 80				add	al,80h
020A:248B  00 0D				add	[di],cl
020A:248D  04 5C				add	al,5Ch			; '\'
020A:248F  00 0D				add	[di],cl
020A:2491  04 6C				add	al,6Ch			; 'l'
020A:2493  00 0D				add	[di],cl
020A:2495  04 93				add	al,93h
020A:2497  01 0D				add	[di],cx
020A:2499  04 00				add	al,0
020A:249B  10 2F				adc	[bx],ch
020A:249D  5C					pop	sp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 47

020A:249E  DC					db	0DCh
020A:249F  01 0D				add	[di],cx
020A:24A1  04 6B				add	al,6Bh			; 'k'
020A:24A3  01 0D				add	[di],cx
020A:24A5  04 00				add	al,0
020A:24A7  00 FE				add	dh,bh
020A:24A9  04 00				add	al,0
020A:24AB  00 5A 3A				add	[bp+si+3Ah],bl
020A:24AE  5C					pop	sp
020A:24AF  53					push	bx
020A:24B0  52					push	dx
020A:24B1  43					inc	bx
020A:24B2  45					inc	bp
020A:24B3  52					push	dx
020A:24B4  38 30				cmp	[bx+si],dh
020A:24B6  31 5C 53				xor	[si+53h],bx
020A:24B9  52					push	dx
020A:24BA  2E					db	2Eh
020A:24BB  45					inc	bp
020A:24BC  58					pop	ax
020A:24BD  45					inc	bp
020A:24BE  00 2E 5845				add	data_176,ch		; (020A:5845=0EBh)
020A:24C2  45					inc	bp
020A:24C3  00 58 45				add	[bx+si+45h],bl
020A:24C6  00 45 00		;*		add	[di+0],al
020A:24C6  00 45 00				db	 00h, 45h, 00h
020A:24C9  00 58 45				add	[bx+si+45h],bl
020A:24CC  0054[00]				db	84 dup (0)
020A:2520  00			data_146	db	0
020A:2521  00					db	0
020A:2522  00					db	0
020A:2523  00					db	0
020A:2524  00					db	0
020A:2525  00					db	0
020A:2526  00					db	0
020A:2527  00					db	0
020A:2528  00					db	0
020A:2529  00					db	0
020A:252A  00					db	0
020A:252B  00					db	0
020A:252C  00					db	0
020A:252D  00					db	0
020A:252E  00					db	0
020A:252F  00					db	0
020A:2530  00					db	0
020A:2531  00					db	0
020A:2532  00					db	0
020A:2533  00					db	0
020A:2534  00					db	0
020A:2535  00					db	0
020A:2536  00					db	0
020A:2537  00					db	0
020A:2538  00					db	0
020A:2539  00					db	0
020A:253A  00					db	0
020A:253B  00					db	0
020A:253C  00					db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 48

020A:253D  00					db	0
020A:253E  00					db	0
020A:253F  00					db	0
020A:2540  00					db	0
020A:2541  00					db	0
020A:2542  00					db	0
020A:2543  00					db	0
020A:2544  00					db	0
020A:2545  00					db	0
020A:2546  00					db	0
020A:2547  00					db	0
020A:2548  00					db	0
020A:2549  00					db	0
020A:254A  00					db	0
020A:254B  00					db	0
020A:254C  00					db	0
020A:254D  00					db	0
020A:254E  00					db	0
020A:254F  00					db	0
020A:2550  00					db	0
020A:2551  00					db	0
020A:2552  00					db	0
020A:2553  00					db	0
020A:2554  00					db	0
020A:2555  00					db	0
020A:2556  00					db	0
020A:2557  00					db	0
020A:2558  00					db	0
020A:2559  00					db	0
020A:255A  00					db	0
020A:255B  00					db	0
020A:255C  00					db	0
020A:255D  00					db	0
020A:255E  00					db	0
020A:255F  00					db	0
020A:2560  00					db	0
020A:2561  00					db	0
020A:2562  00					db	0
020A:2563  00					db	0
020A:2564  00					db	0
020A:2565  00					db	0
020A:2566  00					db	0
020A:2567  00					db	0
020A:2568  00					db	0
020A:2569  00					db	0
020A:256A  00					db	0
020A:256B  00					db	0
020A:256C  00					db	0
020A:256D  00					db	0
020A:256E  00					db	0
020A:256F  00					db	0
020A:2570  00					db	0
020A:2571  00					db	0
020A:2572  00					db	0
020A:2573  00					db	0
020A:2574  00					db	0
020A:2575  00					db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 49

020A:2576  00					db	0
020A:2577  00					db	0
020A:2578  00					db	0
020A:2579  00					db	0
020A:257A  00					db	0
020A:257B  00					db	0
020A:257C  00					db	0
020A:257D  00					db	0
020A:257E  00					db	0
020A:257F  00					db	0
020A:2580  00					db	0
020A:2581  00					db	0
020A:2582  00					db	0
020A:2583  00					db	0
020A:2584  00					db	0
020A:2585  00					db	0
020A:2586  00					db	0
020A:2587  00					db	0
020A:2588  00					db	0
020A:2589  00					db	0
020A:258A  00					db	0
020A:258B  00					db	0
020A:258C  00					db	0
020A:258D  00					db	0
020A:258E  00					db	0
020A:258F  00					db	0
020A:2590  00					db	0
020A:2591  00					db	0
020A:2592  00					db	0
020A:2593  00					db	0
020A:2594  00					db	0
020A:2595  00					db	0
020A:2596  00					db	0
020A:2597  00					db	0
020A:2598  00					db	0
020A:2599  00					db	0
020A:259A  00					db	0
020A:259B  00					db	0
020A:259C  00					db	0
020A:259D  00					db	0
020A:259E  00					db	0
020A:259F  00					db	0
020A:25A0  00					db	0
020A:25A1  00					db	0
020A:25A2  00					db	0
020A:25A3  00					db	0
020A:25A4  00					db	0
020A:25A5  00					db	0
020A:25A6  00					db	0
020A:25A7  00					db	0
020A:25A8  00					db	0
020A:25A9  00					db	0
020A:25AA  00					db	0
020A:25AB  00					db	0
020A:25AC  00					db	0
020A:25AD  00					db	0
020A:25AE  00					db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 50

020A:25AF  00					db	0
020A:25B0  00					db	0
020A:25B1  00					db	0
020A:25B2  00					db	0
020A:25B3  00					db	0
020A:25B4  00					db	0
020A:25B5  00					db	0
020A:25B6  00					db	0
020A:25B7  00					db	0
020A:25B8  00					db	0
020A:25B9  00					db	0
020A:25BA  00 00				add	[bx+si],al
020A:25BC  00 66 00				add	[bp],ah
020A:25BF  D9					db	0D9h
020A:25C0  02 12				add	dl,[bp+si]
020A:25C2  0A A2 0000				or	ah,[bp+si+0]
020A:25C6  0041[00]				db	65 dup (0)
020A:2607  63					db	63h
020A:2608  AC					lodsb				; String [si] to al
020A:2609  90					nop
020A:260A  00					db	0
020A:260B  00 00				add	[bx+si],al
020A:260D  00 E7				add	bh,ah
020A:260F  0C D5				or	al,0D5h
020A:2611  20 45 02				and	[di+2],al
020A:2614  92					xchg	dx,ax
020A:2615  04 04				add	al,4
020A:2617  00 0A				add	[bp+si],cl
020A:2619  02 3D				add	bh,[di]
020A:261B  02 01				add	al,[bx+di]
020A:261D  00 0A				add	[bp+si],cl
020A:261F  07					pop	es
020A:2620  44					inc	sp
020A:2621  07					pop	es
020A:2622  00 01				add	[bx+di],al
020A:2624  81 00 2524				add	word ptr [bx+si],2524h
020A:2628  EA C83E:0095		;*		jmp	far ptr loc_271		;*(C83E:0095)
020A:2628  EA					db	0EAh
020A:2629  0095 C83E				dw	95h, 0C83Eh
							                        ;* No entry point to code
020A:262D  9A 0000:040D		;*		call	far ptr sub_1		;*(0000:040D)
020A:262D  9A					db	9Ah
020A:262E  040D 0000				dw	40Dh, 0
020A:2632  00 01				add	[bx+di],al
020A:2634  00 01				add	[bx+di],al
020A:2636  81 00 040D				add	word ptr [bx+si],40Dh
020A:263A  0D DE04				or	ax,0DE04h
020A:263D  01 0D				add	[di],cx
020A:263F  04 46				add	al,46h			; 'F'
020A:2641  32 00				xor	al,[bx+si]
020A:2643  00 00				add	[bx+si],al
020A:2645  41					inc	cx
020A:2646  52					push	dx
020A:2647  49					dec	cx
020A:2648  46					inc	si
020A:2649  59					pop	cx
020A:264A  4E					dec	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 51

020A:264B  05 6241				add	ax,6241h
020A:264E  6F					db	6Fh
020A:264F  72 74				jc	loc_186			; Jump if carry Set
020A:2651  07					pop	es
020A:2652  2C 20				sub	al,20h			; ' '
020A:2654  52					push	dx
020A:2655  65					db	65h
020A:2656  74 72				jz	loc_188			; Jump if zero
020A:2658  79 08				jns	loc_185			; Jump if not sign
020A:265A  2C 20				sub	al,20h			; ' '
020A:265C  49					dec	cx
020A:265D  67					db	67h
020A:265E  6E					db	6Eh
020A:265F  6F					db	6Fh
020A:2660  72 65				jc	loc_187			; Jump if carry Set
020A:2662			loc_185:
020A:2662  06					push	es
020A:2663  2C 20				sub	al,20h			; ' '
020A:2665  46					inc	si
020A:2666  61					db	61h
020A:2667  69					db	69h
020A:2668  6C					db	6Ch
020A:2669  01 3F				add	[bx],di
020A:266B  08 72 65				or	[bp+si+65h],dh
020A:266E  61					db	61h
020A:266F  64					db	64h
020A:2670  69					db	69h
020A:2671  6E					db	6Eh
020A:2672  67					db	67h
020A:2673  00 08				add	[bx+si],cl
020A:2675  77 72				ja	loc_190			; Jump if above
020A:2677  69					db	69h
020A:2678  74 69				jz	loc_189			; Jump if zero
020A:267A  6E					db	6Eh
020A:267B  67					db	67h
020A:267C  00 0E 2520				add	data_146,cl		; (020A:2520=0)
020A:2680  2031 7264		data_148	dw	2031h, 7264h
020A:2684  69					db	69h
020A:2685  76 65				jbe	loc_191			; Jump if below or =
020A:2687  20 25				and	[di],ah
020A:2689  32 0D				xor	cl,[di]
020A:268B  0A 0F				or	cl,[bx]
020A:268D  20 25 31 20 64 65			db	' %1 device %2', 0Dh, 0Ah, '&Plea'
020A:2693  76 69 63 65 20 25
020A:2699  32 0D 0A 26 50 6C
020A:269F  65 61
020A:26A1  73 65 20 69 6E 73			db	'se insert volume %1 serial %2-%3'
020A:26A7  65 72 74 20 76 6F
020A:26AD  6C 75 6D 65 20 25
020A:26B3  31 20 73 65 72 69
020A:26B9  61 6C 20 25 32 2D
020A:26BF  25 33
020A:26C1  0D 0A 25 46				db	0Dh, 0Ah, '%F'
020A:26C5			loc_186:
020A:26C5  69 6C				db	'il'
020A:26C7			loc_187:
020A:26C7  65 20 61				db	'e a'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 52

020A:26CA			loc_188:
020A:26CA  6C					db	6Ch
020A:26CB  6C					db	6Ch
020A:26CC  6F					db	6Fh
020A:26CD  63					db	63h
020A:26CE  61					db	61h
020A:26CF  74 69				jz	loc_192			; Jump if zero
020A:26D1  6F					db	6Fh
020A:26D2  6E					db	6Eh
020A:26D3  20 74 61				and	[si+61h],dh
020A:26D6  62					db	62h
020A:26D7  6C					db	6Ch
020A:26D8  65					db	65h
020A:26D9  20 62 61				and	[bp+si+61h],ah
020A:26DC  64					db	64h
020A:26DD  2C 20				sub	al,20h			; ' '
020A:26DF  64					db	64h
020A:26E0  72 69				jc	loc_194			; Jump if carry Set
020A:26E2  76 65				jbe	loc_193			; Jump if below or =
020A:26E4  20 25				and	[di],ah
020A:26E6  31 0D				xor	[di],cx
020A:26E8  0A 15				or	dl,[di]
020A:26EA  49 6E 76 61 6C 69			db	'Invalid COMMAND.COM', 0Dh, 0Ah, '!'
020A:26F0  64 20 43 4F 4D 4D
020A:26F6  41 4E 44 2E 43 4F
020A:26FC  4D 0D 0A 21
020A:2700  49 6E 73 65 72 74			db	'Insert disk with %1 in drive %2', 0Dh
020A:2706  20 64 69 73 6B 20
020A:270C  77 69 74 68 20 25
020A:2712  31 20 69 6E 20 64
020A:2718  72 69 76 65 20 25
020A:271E  32 0D
020A:2720  0A 21 50 72 65 73			db	0Ah, '!Press any key to continu'
020A:2726  73 20 61 6E 79 20
020A:272C  6B 65 79 20 74 6F
020A:2732  20 63 6F 6E 74 69
020A:2738  6E 75
020A:273A			loc_192:
020A:273A  65					db	65h
020A:273B  20 2E 2E20				and	data_163,ch		; (020A:2E20=0)
020A:273F  20 2E 0A0D				and	data_93,ch		; (020A:0A0D=0)
020A:2743  1C 0D				sbb	al,0Dh
020A:2745  0A 54 65				or	dl,[si+65h]
020A:2748  72 6D				jc	loc_197			; Jump if carry Set
020A:274A  69					db	69h
020A:274B			loc_194:
020A:274B  6E					db	6Eh
020A:274C  61					db	61h
020A:274D  74 65				jz	loc_196			; Jump if zero
020A:274F  20 62 61				and	[bp+si+61h],ah
020A:2752  74 63				jz	loc_197			; Jump if zero
020A:2754  68					db	68h
020A:2755  20 6A 6F				and	[bp+si+6Fh],ch
020A:2758  62					db	62h
020A:2759  20 28				and	[bx+si],ch
020A:275B  59					pop	cx
020A:275C  2F					das				; Decimal adjust
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 53

020A:275D  4E					dec	si
020A:275E  29 3F				sub	[bx],di
020A:2760  13 43 61				adc	ax,[bp+di+61h]
020A:2763  6E					db	6Eh
020A:2764  6E					db	6Eh
020A:2765  6F					db	6Fh
020A:2766  74 20				jz	loc_195			; Jump if zero
020A:2768  65					db	65h
020A:2769  78 65				js	loc_198			; Jump if sign=1
020A:276B  63					db	63h
020A:276C  75 74				jnz	loc_200			; Jump if not zero
020A:276E  65					db	65h
020A:276F  20 25				and	[di],ah
020A:2771  31 0D				xor	[di],cx
020A:2773  0A 13				or	dl,[bp+di]
020A:2775  45 72 72 6F 72 20			db	'Error in EXE file', 0Dh, 0Ah
020A:277B  69 6E 20 45 58 45
020A:2781  20 66 69 6C 65 0D
020A:2787  0A
020A:2788			loc_195:
020A:2788  22 50 72 6F 67 72			db	'"Program too big to fit in memor'
020A:278E  61 6D 20 74 6F 6F
020A:2794  20 62 69 67 20 74
020A:279A  6F 20 66 69 74 20
020A:27A0  69 6E 20 6D 65 6D
020A:27A6  6F 72
020A:27A8  79 0D 0A				db	'y', 0Dh, 0Ah
020A:27AB  16					push	ss
020A:27AC  0D 4E0A				or	ax,4E0Ah
020A:27AF  6F					db	6Fh
020A:27B0  20 66 72				and	[bp+72h],ah
020A:27B3  65					db	65h
020A:27B4			loc_196:
020A:27B4  65					db	65h
020A:27B5  20 66 69				and	[bp+69h],ah
020A:27B8  6C					db	6Ch
020A:27B9  65					db	65h
020A:27BA  20 68 61				and	[bx+si+61h],ch
020A:27BD  6E					db	6Eh
020A:27BE  64					db	64h
020A:27BF  6C					db	6Ch
020A:27C0  65					db	65h
020A:27C1  73 1A				jnc	loc_199			; Jump if carry=0
020A:27C3  42					inc	dx
020A:27C4  61					db	61h
020A:27C5  64					db	64h
020A:27C6  20 43 6F				and	[bp+di+6Fh],al
020A:27C9  6D					db	6Dh
020A:27CA  6D					db	6Dh
020A:27CB  61					db	61h
020A:27CC  6E					db	6Eh
020A:27CD  64					db	64h
020A:27CE  20 6F 72				and	[bx+72h],ch
020A:27D1  20 66 69				and	[bp+69h],ah
020A:27D4  6C					db	6Ch
020A:27D5  65					db	65h
020A:27D6  20 6E 61				and	[bp+61h],ch
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 54

020A:27D9  6D					db	6Dh
020A:27DA  65					db	65h
020A:27DB  0D 0E0A				or	ax,0E0Ah
020A:27DE  41					inc	cx
020A:27DF  63					db	63h
020A:27E0  63					db	63h
020A:27E1  65					db	65h
020A:27E2			loc_200:
020A:27E2  73 73				jnc	loc_201			; Jump if carry=0
020A:27E4  20 64 65				and	[si+65h],ah
020A:27E7  6E					db	6Eh
020A:27E8  69					db	69h
020A:27E9  65					db	65h
020A:27EA  64					db	64h
020A:27EB  20 19				and	[bx+di],bl
020A:27ED  0D 0A 4D 65 6D 6F			db	0Dh, 0Ah, 'Memory allocation erro'
020A:27F3  72 79 20 61 6C 6C
020A:27F9  6F 63 61 74 69 6F
020A:27FF  6E 20 65 72 72 6F
020A:2805  72 26 0D 0A 43 61			db	'r&', 0Dh, 0Ah, 'Cannot load COMM'
020A:280B  6E 6E 6F 74 20 6C
020A:2811  6F 61 64 20 43 4F
020A:2817  4D 4D
020A:2819  41 4E 44 2C 20 73			db	'AND, system halted', 0Dh, 0Ah, '!'
020A:281F  79 73 74 65 6D 20
020A:2825  68 61 6C 74 65 64
020A:282B  0D 0A 21
020A:282E  0D 0A 43 61 6E 6E			db	0Dh, 0Ah, 'Cannot start COMMAND, '
020A:2834  6F 74 20 73 74 61
020A:283A  72 74 20 43 4F 4D
020A:2840  4D 41 4E 44 2C 20
020A:2846  65 78 69 74 69 6E			db	'exiting', 0Dh, 0Ah, '.', 0Dh, 0Ah
020A:284C  67 0D 0A 2E 0D 0A
020A:2852  54 6F 70 20 6C			db	'Top l'
020A:2857			loc_201:
020A:2857  65 76 65 6C 20 70			db	'evel process aborted, cannot con'
020A:285D  72 6F 63 65 73 73
020A:2863  20 61 62 6F 72 74
020A:2869  65 64 2C 20 63 61
020A:286F  6E 6E 6F 74 20 63
020A:2875  6F 6E
020A:2877  74 69 6E 75 65 0D			db	'tinue', 0Dh, 0Ah
020A:287D  0A
020A:287E  02 0D				add	cl,[di]
020A:2880  0A 60 0D				or	ah,[bx+si+0Dh]
020A:2883  01 00				add	[bx+si],ax
020A:2885  0C 0B				or	al,0Bh
020A:2887  01 00				add	[bx+si],ax
020A:2889  60					db	60h
020A:288A  0D 0001				or	ax,1
020A:288D  00					db	0
020A:288E  00 00				add	[bx+si],al
020A:2890  00 89 0D01				add	data_97[bx+di],cl	; (020A:0D01=30h)
020A:2894  04 13				add	al,13h
020A:2896  57 72 69 74 65 20			db	'Write protect error', 0Ch, 'Inva'
020A:289C  70 72 6F 74 65 63
020A:28A2  74 20 65 72 72 6F
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 55

020A:28A8  72 0C 49 6E 76 61
020A:28AE  6C 69 64 20 75 6E			db	'lid unit', 9, 'Not ready'
020A:28B4  69 74 09 4E 6F 74
020A:28BA  20 72 65 61 64 79
020A:28C0  16					push	ss
020A:28C1  49 6E 76 61 6C 69			db	'Invalid device request', 0Ah, 'D'
020A:28C7  64 20 64 65 76 69
020A:28CD  63 65 20 72 65 71
020A:28D3  75 65 73 74 0A 44
020A:28D9  61 74 61 20 65 72			db	'ata error!Invalid device request'
020A:28DF  72 6F 72 21 49 6E
020A:28E5  76 61 6C 69 64 20
020A:28EB  64 65 76 69 63 65
020A:28F1  20 72 65 71 75 65
020A:28F7  73 74
020A:28F9  20 70 61 72 61 6D			db	' parameters', 0Ah, 'Seek error'
020A:28FF  65 74 65 72 73 0A
020A:2905  53 65 65 6B 20 65
020A:290B  72 72 6F 72
020A:290F  12 49 6E				adc	cl,[bx+di+6Eh]
020A:2912  76 61				jbe	loc_208			; Jump if below or =
020A:2914  6C					db	6Ch
020A:2915  69					db	69h
020A:2916  64					db	64h
020A:2917  20 6D 65				and	[di+65h],ch
020A:291A  64					db	64h
020A:291B  69					db	69h
020A:291C  61					db	61h
020A:291D  20 74 79				and	[si+79h],dh
020A:2920  70 65				jo	loc_211			; Jump if overflow=1
020A:2922  10 53 65				adc	[bp+di+65h],dl
020A:2925  63					db	63h
020A:2926  74 6F				jz	loc_213			; Jump if zero
020A:2928  72 20				jc	loc_202			; Jump if carry Set
020A:292A  6E					db	6Eh
020A:292B  6F					db	6Fh
020A:292C  74 20				jz	loc_203			; Jump if zero
020A:292E  66					db	66h
020A:292F  6F					db	6Fh
020A:2930  75 6E				jnz	loc_215			; Jump if not zero
020A:2932  64					db	64h
020A:2933  1A 50 72				sbb	dl,[bx+si+72h]
020A:2936  69					db	69h
020A:2937  6E					db	6Eh
020A:2938  74 65				jz	loc_214			; Jump if zero
020A:293A  72 20				jc	loc_204			; Jump if carry Set
020A:293C  6F					db	6Fh
020A:293D  75 74				jnz	loc_217			; Jump if not zero
020A:293F  20 6F 66				and	[bx+66h],ch
020A:2942  20 70 61				and	[bx+si+61h],dh
020A:2945  70 65				jo	loc_216			; Jump if overflow=1
020A:2947  72 20				jc	loc_206			; Jump if carry Set
020A:2949  65					db	65h
020A:294A			loc_202:
020A:294A  72 72				jc	loc_220			; Jump if carry Set
020A:294C  6F					db	6Fh
020A:294D  72 11				jc	loc_205			; Jump if carry Set
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 56

020A:294F  57					push	di
020A:2950  72 69				jc	loc_219			; Jump if carry Set
020A:2952  74 65				jz	loc_218			; Jump if zero
020A:2954  20 66 61				and	[bp+61h],ah
020A:2957  75 6C				jnz	loc_221			; Jump if not zero
020A:2959  74 20				jz	loc_209			; Jump if zero
020A:295B  65					db	65h
020A:295C			loc_204:
020A:295C  72 72				jc	loc_222			; Jump if carry Set
020A:295E  6F					db	6Fh
020A:295F  72 10				jc	loc_207			; Jump if carry Set
020A:2961  52					push	dx
020A:2962  65					db	65h
020A:2963  61					db	61h
020A:2964  64					db	64h
020A:2965  20 66 61				and	[bp+61h],ah
020A:2968  75 6C				jnz	loc_223			; Jump if not zero
020A:296A  74 20				jz	loc_212			; Jump if zero
020A:296C  65					db	65h
020A:296D  72 72				jc	loc_225			; Jump if carry Set
020A:296F  6F					db	6Fh
020A:2970  72 0F				jc	loc_210			; Jump if carry Set
020A:2972  47					inc	di
020A:2973  65					db	65h
020A:2974  6E					db	6Eh
020A:2975			loc_208:
020A:2975  65					db	65h
020A:2976  72 61				jc	loc_224			; Jump if carry Set
020A:2978  6C					db	6Ch
020A:2979  20 66 61				and	[bp+61h],ah
020A:297C  69					db	69h
020A:297D  6C					db	6Ch
020A:297E  75 72				jnz	loc_227			; Jump if not zero
020A:2980  65					db	65h
020A:2981			loc_210:
020A:2981  11 53 68				adc	[bp+di+68h],dx
020A:2984  61					db	61h
020A:2985  72 69				jc	loc_226			; Jump if carry Set
020A:2987			loc_211:
020A:2987  6E					db	6Eh
020A:2988  67					db	67h
020A:2989  20 76 69				and	[bp+69h],dh
020A:298C			loc_212:
020A:298C  6F					db	6Fh
020A:298D  6C					db	6Ch
020A:298E  61					db	61h
020A:298F  74 69				jz	loc_228			; Jump if zero
020A:2991  6F					db	6Fh
020A:2992  6E					db	6Eh
020A:2993  0E					push	cs
020A:2994  4C					dec	sp
020A:2995  6F					db	6Fh
020A:2996  63					db	63h
020A:2997			loc_213:
020A:2997  6B					db	6Bh
020A:2998  20 76 69				and	[bp+69h],dh
020A:299B  6F					db	6Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 57

020A:299C  6C					db	6Ch
020A:299D  61					db	61h
020A:299E  74 69				jz	loc_230			; Jump if zero
020A:29A0			loc_215:
020A:29A0  6F					db	6Fh
020A:29A1  6E					db	6Eh
020A:29A2  13 49 6E				adc	cx,[bx+di+6Eh]
020A:29A5  76 61				jbe	loc_229			; Jump if below or =
020A:29A7  6C					db	6Ch
020A:29A8  69					db	69h
020A:29A9  64					db	64h
020A:29AA  20 64 69				and	[si+69h],ah
020A:29AD  73 6B				jnc	loc_232			; Jump if carry=0
020A:29AF  20 63 68				and	[bp+di+68h],ah
020A:29B2  61					db	61h
020A:29B3			loc_217:
020A:29B3  6E					db	6Eh
020A:29B4  67					db	67h
020A:29B5  65					db	65h
020A:29B6  0F			;*		pop	cs			; Dangerous-8088 only
020A:29B6  0F					db	0Fh
020A:29B7  46					inc	si
020A:29B8  43					inc	bx
020A:29B9			loc_218:
020A:29B9  42					inc	dx
020A:29BA  20 75 6E				and	[di+6Eh],dh
020A:29BD  61					db	61h
020A:29BE			loc_220:
020A:29BE  76 61				jbe	loc_233			; Jump if below or =
020A:29C0  69					db	69h
020A:29C1  6C					db	6Ch
020A:29C2  61					db	61h
020A:29C3  62					db	62h
020A:29C4  6C					db	6Ch
020A:29C5			loc_221:
020A:29C5  65					db	65h
020A:29C6  19 53 79				sbb	[bp+di+79h],dx
020A:29C9  73 74				jnc	loc_235			; Jump if carry=0
020A:29CB  65					db	65h
020A:29CC  6D					db	6Dh
020A:29CD  20 72 65				and	[bp+si+65h],dh
020A:29D0			loc_222:
020A:29D0  73 6F				jnc	loc_236			; Jump if carry=0
020A:29D2  75 72				jnz	loc_238			; Jump if not zero
020A:29D4  63					db	63h
020A:29D5  65					db	65h
020A:29D6			loc_223:
020A:29D6  20 65 78				and	[di+78h],ah
020A:29D9			loc_224:
020A:29D9  68					db	68h
020A:29DA  61					db	61h
020A:29DB  75 73				jnz	loc_239			; Jump if not zero
020A:29DD  74 65				jz	loc_237			; Jump if zero
020A:29DF  64					db	64h
020A:29E0  12 43 6F				adc	al,[bp+di+6Fh]
020A:29E3  64					db	64h
020A:29E4  65					db	65h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 58

020A:29E5  20 70 61				and	[bx+si+61h],dh
020A:29E8  67					db	67h
020A:29E9  65					db	65h
020A:29EA  20 6D 69				and	[di+69h],ch
020A:29ED  73 6D				jnc	loc_241			; Jump if carry=0
020A:29EF  61					db	61h
020A:29F0			loc_226:
020A:29F0  74 63				jz	loc_240			; Jump if zero
020A:29F2			loc_227:
020A:29F2  68					db	68h
020A:29F3  0C 4F				or	al,4Fh			; 'O'
020A:29F5  75 74				jnz	loc_242			; Jump if not zero
020A:29F7  20 6F 66				and	[bx+66h],ch
020A:29FA			loc_228:
020A:29FA  20 69 6E				and	[bx+di+6Eh],ch
020A:29FD  70 75				jo	loc_244			; Jump if overflow=1
020A:29FF  74 17				jz	loc_231			; Jump if zero
020A:2A01  49					dec	cx
020A:2A02  6E					db	6Eh
020A:2A03  73 75				jnc	loc_245			; Jump if carry=0
020A:2A05  66					db	66h
020A:2A06  66					db	66h
020A:2A07  69					db	69h
020A:2A08			loc_229:
020A:2A08  63					db	63h
020A:2A09			loc_230:
020A:2A09  69					db	69h
020A:2A0A  65					db	65h
020A:2A0B  6E					db	6Eh
020A:2A0C  74 20				jz	loc_234			; Jump if zero
020A:2A0E  64					db	64h
020A:2A0F  69					db	69h
020A:2A10  73 6B				jnc	loc_246			; Jump if carry=0
020A:2A12  20 73 70				and	[bp+di+70h],dh
020A:2A15  61					db	61h
020A:2A16  63					db	63h
020A:2A17  65					db	65h
020A:2A18			loc_231:
020A:2A18  65					db	65h
020A:2A19  08 79 08				or	[bx+di+8],bh
020A:2A1C  86 08				xchg	[bx+si],cl
020A:2A1E  90					nop
020A:2A1F  08 A7 B208				or	data_186[bx],ah		; (020A:B208=0C6h)
020A:2A23  08 D4				or	ah,dl
020A:2A25  08 DF				or	bh,bl
020A:2A27  08 F2				or	dl,dh
020A:2A29  08 03				or	[bp+di],al
020A:2A2B  09 1E 3009				or	data_168,bx		; (020A:3009=4D56h)
020A:2A2F  09 41 09				or	[bx+di+9],ax
020A:2A32  51					push	cx
020A:2A33  09 63 09				or	[bp+di+9],sp
020A:2A36  72 09				jc	loc_236			; Jump if carry Set
020A:2A38  86 09				xchg	[bx+di],cl
020A:2A3A  96					xchg	si,ax
020A:2A3B  09 B0 C309				or	word ptr ds:[0C309h][bx+si],si	; (020A:C309=0A302h)
020A:2A3F			loc_235:
020A:2A3F  09 D0				or	ax,dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 59

020A:2A41			loc_236:
020A:2A41  09 13				or	[bp+di],dx
020A:2A43  54					push	sp
020A:2A44			loc_237:
020A:2A44  6F					db	6Fh
020A:2A45  6F					db	6Fh
020A:2A46			loc_238:
020A:2A46  20 6D 61				and	[di+61h],ch
020A:2A49  6E					db	6Eh
020A:2A4A  79 20				jns	loc_243			; Jump if not sign
020A:2A4C  70 61				jo	loc_247			; Jump if overflow=1
020A:2A4E  72 61				jc	loc_248			; Jump if carry Set
020A:2A50			loc_239:
020A:2A50  4D					dec	bp
020A:2A51  00 00				add	[bx+si],al
020A:2A53  07					pop	es
020A:2A54  00 73 1A				add	[bp+di+1Ah],dh
020A:2A57  52					push	dx
020A:2A58  65					db	65h
020A:2A59  71 75				jno	loc_251			; Jump if not overflw
020A:2A5B  69					db	69h
020A:2A5C			loc_241:
020A:2A5C  72 65				jc	loc_249			; Jump if carry Set
020A:2A5E  64					db	64h
020A:2A5F  20 00				and	[bx+si],al
020A:2A61  01 00				add	[bx+si],ax
020A:2A63  00					db	0
020A:2A64  00					db	0
020A:2A65  00 00				add	[bx+si],al
020A:2A67  00 87 0006				add	byte ptr data_5+1[bx],al	; (020A:0006=3)
020A:2A6B			loc_242:
020A:2A6B  00 FF				add	bh,bh
020A:2A6D  0013[FF]				db	19 dup (0FFh)
020A:2A80  43					inc	bx
020A:2A81  3A 5C 57				cmp	bl,[si+57h]
020A:2A84  49					dec	cx
020A:2A85  4E					dec	si
020A:2A86  44					inc	sp
020A:2A87  4F					dec	di
020A:2A88  57					push	di
020A:2A89  53					push	bx
020A:2A8A  5C					pop	sp
020A:2A8B  54					push	sp
020A:2A8C  45					inc	bp
020A:2A8D  4D					dec	bp
020A:2A8E  50					push	ax
020A:2A8F  5C					pop	sp
020A:2A90  73 63				jnc	loc_253			; Jump if carry=0
020A:2A92  73 31				jnc	loc_250			; Jump if carry=0
020A:2A94  35 742E				xor	ax,742Eh
020A:2A97  6D					db	6Dh
020A:2A98  70 00				jo	$+2			; delay for I/O
020A:2A9A  0027[00]				db	39 dup (0)
020A:2AC1  20 76 61				and	[bp+61h],dh
020A:2AC4  6C					db	6Ch
020A:2AC5			loc_250:
020A:2AC5  75 65				jnz	loc_254			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 60

020A:2AC7  20 6E 6F				and	[bp+6Fh],ch
020A:2ACA  74 20				jz	loc_252			; Jump if zero
020A:2ACC  61					db	61h
020A:2ACD  6C					db	6Ch
020A:2ACE  6C					db	6Ch
020A:2ACF  6F					db	6Fh
020A:2AD0			loc_251:
020A:2AD0  4D					dec	bp
020A:2AD1  0D 4504				or	ax,4504h
020A:2AD4  00 61 72				add	[bx+di+72h],ah
020A:2AD7  61 6D 65 74 65 72			db	'ameter vaCOMSPEC=C:\WINDOWS\SYST'
020A:2ADD  20 76 61 43 4F 4D
020A:2AE3  53 50 45 43 3D 43
020A:2AE9  3A 5C 57 49 4E 44
020A:2AEF  4F 57 53 5C 53 59
020A:2AF5  53 54
020A:2AF7  45 4D 33 32 5C 43			db	'EM32\COMMAND'
020A:2AFD  4F 4D 4D 41 4E 44
020A:2B03  432E			data_162	dw	432Eh			; Data table (indexed access)
020A:2B05  4F					dec	di
020A:2B06  4D					dec	bp
020A:2B07  00 41 4C				add	[bx+di+4Ch],al
020A:2B0A  4C					dec	sp
020A:2B0B  55					push	bp
020A:2B0C  53					push	bx
020A:2B0D  45					inc	bp
020A:2B0E  52					push	dx
020A:2B0F  53					push	bx
020A:2B10  50					push	ax
020A:2B11  52					push	dx
020A:2B12  4F					dec	di
020A:2B13  46					inc	si
020A:2B14  49					dec	cx
020A:2B15  4C					dec	sp
020A:2B16  45					inc	bp
020A:2B17  3D 3A43				cmp	ax,3A43h
020A:2B1A  5C					pop	sp
020A:2B1B  44					inc	sp
020A:2B1C  4F					dec	di
020A:2B1D  43					inc	bx
020A:2B1E  55					push	bp
020A:2B1F  4D					dec	bp
020A:2B20  45					inc	bp
020A:2B21  7E 31				jle	$+33h			; Jump if < or =
020A:2B23  5C					pop	sp
020A:2B24  41					inc	cx
020A:2B25  4C					dec	sp
020A:2B26  4C					dec	sp
020A:2B27  55					push	bp
020A:2B28  53					push	bx
020A:2B29  45					inc	bp
020A:2B2A  7E 31				jle	$+33h			; Jump if < or =
020A:2B2C			loc_254:
020A:2B2C  00 41 50				add	[bx+di+50h],al
020A:2B2F  50					push	ax
020A:2B30  44					inc	sp
020A:2B31  41					inc	cx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 61

020A:2B32  54					push	sp
020A:2B33  41					inc	cx
020A:2B34  3D 3A43				cmp	ax,3A43h
020A:2B37  5C					pop	sp
020A:2B38  44					inc	sp
020A:2B39  4F					dec	di
020A:2B3A  43					inc	bx
020A:2B3B  55					push	bp
020A:2B3C  4D					dec	bp
020A:2B3D  45					inc	bp
020A:2B3E  7E 31				jle	$+33h			; Jump if < or =
020A:2B40  5C					pop	sp
020A:2B41  41					inc	cx
020A:2B42  64					db	64h
020A:2B43  6D					db	6Dh
020A:2B44  69					db	69h
020A:2B45  6E					db	6Eh
020A:2B46  5C					pop	sp
020A:2B47  41					inc	cx
020A:2B48  50					push	ax
020A:2B49  50					push	ax
020A:2B4A  4C					dec	sp
020A:2B4B  49					dec	cx
020A:2B4C  43					inc	bx
020A:2B4D  7E 31				jle	$+33h			; Jump if < or =
020A:2B4F  00 43 4C				add	[bp+di+4Ch],al
020A:2B52  49					dec	cx
020A:2B53  45					inc	bp
020A:2B54  4E					dec	si
020A:2B55  54					push	sp
020A:2B56  4E					dec	si
020A:2B57  41					inc	cx
020A:2B58  4D					dec	bp
020A:2B59  45					inc	bp
020A:2B5A  3D 6F43				cmp	ax,6F43h
020A:2B5D  6E					db	6Eh
020A:2B5E  73 6F				jnc	$+71h			; Jump if carry=0
020A:2B60  6C					db	6Ch
020A:2B61  65					db	65h
020A:2B62  00 43 4F				add	[bp+di+4Fh],al
020A:2B65  4D					dec	bp
020A:2B66  4D					dec	bp
020A:2B67  4F					dec	di
020A:2B68  4E					dec	si
020A:2B69  50					push	ax
020A:2B6A  52					push	dx
020A:2B6B  4F					dec	di
020A:2B6C  47					inc	di
020A:2B6D  52					push	dx
020A:2B6E  41					inc	cx
020A:2B6F  4D					dec	bp
020A:2B70  46					inc	si
020A:2B71  49					dec	cx
020A:2B72  4C					dec	sp
020A:2B73  45					inc	bp
020A:2B74  53					push	bx
020A:2B75  3D 3A43				cmp	ax,3A43h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 62

020A:2B78  5C					pop	sp
020A:2B79  50					push	ax
020A:2B7A  52					push	dx
020A:2B7B  4F					dec	di
020A:2B7C  47					inc	di
020A:2B7D  52					push	dx
020A:2B7E  41					inc	cx
020A:2B7F  7E 31				jle	$+33h			; Jump if < or =
020A:2B81  5C					pop	sp
020A:2B82  43					inc	bx
020A:2B83  4F					dec	di
020A:2B84  4D					dec	bp
020A:2B85  4D					dec	bp
020A:2B86  4F					dec	di
020A:2B87  4E					dec	si
020A:2B88  7E 31				jle	$+33h			; Jump if < or =
020A:2B8A  00 43 4F				add	[bp+di+4Fh],al
020A:2B8D  4D					dec	bp
020A:2B8E  50					push	ax
020A:2B8F  55					push	bp
020A:2B90  54					push	sp
020A:2B91  45					inc	bp
020A:2B92  52					push	dx
020A:2B93  4E					dec	si
020A:2B94  41					inc	cx
020A:2B95  4D					dec	bp
020A:2B96  45					inc	bp
020A:2B97  3D 4957				cmp	ax,4957h
020A:2B9A  4E					dec	si
020A:2B9B  58					pop	ax
020A:2B9C  50					push	ax
020A:2B9D  49					dec	cx
020A:2B9E  45					inc	bp
020A:2B9F  2D 3831				sub	ax,3831h
020A:2BA2  31 32				xor	[bp+si],si
020A:2BA4  36: 33 00				xor	ax,ss:[bx+si]
020A:2BA7  44					inc	sp
020A:2BA8  45					inc	bp
020A:2BA9  56					push	si
020A:2BAA  4D					dec	bp
020A:2BAB  47					inc	di
020A:2BAC  52					push	dx
020A:2BAD  5F					pop	di
020A:2BAE  53					push	bx
020A:2BAF  48					dec	ax
020A:2BB0  4F					dec	di
020A:2BB1  57					push	di
020A:2BB2  5F					pop	di
020A:2BB3  4E					dec	si
020A:2BB4  4F					dec	di
020A:2BB5  4E					dec	si
020A:2BB6  50					push	ax
020A:2BB7  52					push	dx
020A:2BB8  45					inc	bp
020A:2BB9  53					push	bx
020A:2BBA  45					inc	bp
020A:2BBB  4E					dec	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 63

020A:2BBC  54					push	sp
020A:2BBD  5F					pop	di
020A:2BBE  44					inc	sp
020A:2BBF  45					inc	bp
020A:2BC0  56					push	si
020A:2BC1  49					dec	cx
020A:2BC2  43					inc	bx
020A:2BC3  45					inc	bp
020A:2BC4  53					push	bx
020A:2BC5  3D 0031				cmp	ax,31h
020A:2BC8  46					inc	si
020A:2BC9  50					push	ax
020A:2BCA  5F					pop	di
020A:2BCB  4E					dec	si
020A:2BCC  4F					dec	di
020A:2BCD  5F					pop	di
020A:2BCE  48					dec	ax
020A:2BCF  4F					dec	di
020A:2BD0  53					push	bx
020A:2BD1  54					push	sp
020A:2BD2  5F					pop	di
020A:2BD3  43					inc	bx
020A:2BD4  48					dec	ax
020A:2BD5  45					inc	bp
020A:2BD6  43					inc	bx
020A:2BD7  4B					dec	bx
020A:2BD8  3D 4F4E				cmp	ax,4F4Eh
020A:2BDB  00 48 4F				add	[bx+si+4Fh],cl
020A:2BDE  4D					dec	bp
020A:2BDF  45					inc	bp
020A:2BE0  44					inc	sp
020A:2BE1  52					push	dx
020A:2BE2  49					dec	cx
020A:2BE3  56					push	si
020A:2BE4  45					inc	bp
020A:2BE5  3D 3A43				cmp	ax,3A43h
020A:2BE8  00 48 4F				add	[bx+si+4Fh],cl
020A:2BEB  4D					dec	bp
020A:2BEC  45					inc	bp
020A:2BED  50					push	ax
020A:2BEE  41					inc	cx
020A:2BEF  54					push	sp
020A:2BF0  48					dec	ax
020A:2BF1  3D 445C				cmp	ax,445Ch
020A:2BF4  6F					db	6Fh
020A:2BF5  63					db	63h
020A:2BF6  75 6D				jnz	$+6Fh			; Jump if not zero
020A:2BF8  65					db	65h
020A:2BF9  6E					db	6Eh
020A:2BFA  74 73				jz	$+75h			; Jump if zero
020A:2BFC  20 61 6E				and	[bx+di+6Eh],ah
020A:2BFF  64					db	64h
020A:2C00  20 53 65				and	[bp+di+65h],dl
020A:2C03  74 74				jz	$+76h			; Jump if zero
020A:2C05  69					db	69h
020A:2C06  6E					db	6Eh
020A:2C07  67					db	67h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 64

020A:2C08  73 5C				jnc	$+5Eh			; Jump if carry=0
020A:2C0A  41					inc	cx
020A:2C0B  64					db	64h
020A:2C0C  6D					db	6Dh
020A:2C0D  69					db	69h
020A:2C0E  6E					db	6Eh
020A:2C0F  00 4C 4F				add	[si+4Fh],cl
020A:2C12  47					inc	di
020A:2C13  4F					dec	di
020A:2C14  4E					dec	si
020A:2C15  53					push	bx
020A:2C16  45					inc	bp
020A:2C17  52					push	dx
020A:2C18  56					push	si
020A:2C19  45					inc	bp
020A:2C1A  52					push	dx
020A:2C1B  3D 5C5C				cmp	ax,5C5Ch
020A:2C1E  57					push	di
020A:2C1F  49					dec	cx
020A:2C20  4E					dec	si
020A:2C21  58					pop	ax
020A:2C22  50					push	ax
020A:2C23  49					dec	cx
020A:2C24  45					inc	bp
020A:2C25  2D 3831				sub	ax,3831h
020A:2C28  31 32				xor	[bp+si],si
020A:2C2A  36: 33 00				xor	ax,ss:[bx+si]
020A:2C2D  4E					dec	si
020A:2C2E  55					push	bp
020A:2C2F  4D					dec	bp
020A:2C30  42					inc	dx
020A:2C31  45					inc	bp
020A:2C32  52					push	dx
020A:2C33  5F					pop	di
020A:2C34  4F					dec	di
020A:2C35  46					inc	si
020A:2C36  5F					pop	di
020A:2C37  50					push	ax
020A:2C38  52					push	dx
020A:2C39  4F					dec	di
020A:2C3A  43					inc	bx
020A:2C3B  45					inc	bp
020A:2C3C  53					push	bx
020A:2C3D  53					push	bx
020A:2C3E  4F					dec	di
020A:2C3F  52					push	dx
020A:2C40  53					push	bx
020A:2C41  3D 0031				cmp	ax,31h
020A:2C44  4F					dec	di
020A:2C45  53					push	bx
020A:2C46  3D 6957				cmp	ax,6957h
020A:2C49  6E					db	6Eh
020A:2C4A  64					db	64h
020A:2C4B  6F					db	6Fh
020A:2C4C  77 73				ja	$+75h			; Jump if above
020A:2C4E  5F					pop	di
020A:2C4F  4E					dec	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 65

020A:2C50  54					push	sp
020A:2C51  00 50 41				add	[bx+si+41h],dl
020A:2C54  54					push	sp
020A:2C55  48					dec	ax
020A:2C56  3D 3A43				cmp	ax,3A43h
020A:2C59  5C					pop	sp
020A:2C5A  57					push	di
020A:2C5B  49					dec	cx
020A:2C5C  4E					dec	si
020A:2C5D  44					inc	sp
020A:2C5E  4F					dec	di
020A:2C5F  57					push	di
020A:2C60  53					push	bx
020A:2C61  5C					pop	sp
020A:2C62  73 79				jnc	$+7Bh			; Jump if carry=0
020A:2C64  73 74				jnc	$+76h			; Jump if carry=0
020A:2C66  65					db	65h
020A:2C67  6D					db	6Dh
020A:2C68  33 32				xor	si,[bp+si]
020A:2C6A  3B 43 3A				cmp	ax,[bp+di+3Ah]
020A:2C6D  5C					pop	sp
020A:2C6E  57					push	di
020A:2C6F  49					dec	cx
020A:2C70  4E					dec	si
020A:2C71  44					inc	sp
020A:2C72  4F					dec	di
020A:2C73  57					push	di
020A:2C74  53					push	bx
020A:2C75  3B 43 3A				cmp	ax,[bp+di+3Ah]
020A:2C78  5C					pop	sp
020A:2C79  57					push	di
020A:2C7A  49					dec	cx
020A:2C7B  4E					dec	si
020A:2C7C  44					inc	sp
020A:2C7D  4F					dec	di
020A:2C7E  57					push	di
020A:2C7F  53					push	bx
020A:2C80  5C					pop	sp
020A:2C81  73 79				jnc	$+7Bh			; Jump if carry=0
020A:2C83  73 74				jnc	$+76h			; Jump if carry=0
020A:2C85  65					db	65h
020A:2C86  6D					db	6Dh
020A:2C87  33 32				xor	si,[bp+si]
020A:2C89  5C					pop	sp
020A:2C8A  57					push	di
020A:2C8B  42					inc	dx
020A:2C8C  45					inc	bp
020A:2C8D  4D					dec	bp
020A:2C8E  00 50 41				add	[bx+si+41h],dl
020A:2C91  54					push	sp
020A:2C92  48					dec	ax
020A:2C93  45					inc	bp
020A:2C94  58					pop	ax
020A:2C95  54					push	sp
020A:2C96  3D 432E				cmp	ax,432Eh
020A:2C99  4F					dec	di
020A:2C9A  4D					dec	bp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 66

020A:2C9B  3B 2E 5845				cmp	bp,word ptr data_176	; (020A:5845=0D5EBh)
020A:2C9F  45					inc	bp
020A:2CA0  3B 2E 4142				cmp	bp,word ptr ds:[4142h]	; (020A:4142=0BFAAh)
020A:2CA4  54					push	sp
020A:2CA5  3B 2E 4D43				cmp	bp,word ptr ds:[4D43h]	; (020A:4D43=2B4h)
020A:2CA9  44					inc	sp
020A:2CAA  3B 2E 4256				cmp	bp,word ptr ds:[4256h]	; (020A:4256=7206h)
020A:2CAE  53					push	bx
020A:2CAF  3B 2E 4256				cmp	bp,word ptr ds:[4256h]	; (020A:4256=7206h)
020A:2CB3  45					inc	bp
020A:2CB4  3B 2E 534A				cmp	bp,word ptr ds:[534Ah]	; (020A:534A=2CACh)
020A:2CB8  3B 2E 534A				cmp	bp,word ptr ds:[534Ah]	; (020A:534A=2CACh)
020A:2CBC  45					inc	bp
020A:2CBD  3B 2E 5357				cmp	bp,word ptr ds:[5357h]	; (020A:5357=83h)
020A:2CC1  46					inc	si
020A:2CC2  3B 2E 5357				cmp	bp,word ptr ds:[5357h]	; (020A:5357=83h)
020A:2CC6  48					dec	ax
020A:2CC7  00 50 52				add	[bx+si+52h],dl
020A:2CCA  4F					dec	di
020A:2CCB  43					inc	bx
020A:2CCC  45					inc	bp
020A:2CCD  53					push	bx
020A:2CCE  53					push	bx
020A:2CCF  4F					dec	di
020A:2CD0  52					push	dx
020A:2CD1  5F					pop	di
020A:2CD2  41					inc	cx
020A:2CD3  52					push	dx
020A:2CD4  43					inc	bx
020A:2CD5  48					dec	ax
020A:2CD6  49					dec	cx
020A:2CD7  54					push	sp
020A:2CD8  45					inc	bp
020A:2CD9  43					inc	bx
020A:2CDA  54					push	sp
020A:2CDB  55					push	bp
020A:2CDC  52					push	dx
020A:2CDD  45					inc	bp
020A:2CDE  3D 3878				cmp	ax,3878h
020A:2CE1  36: 00 50 52				add	ss:[bx+si+52h],dl
020A:2CE5  4F					dec	di
020A:2CE6  43					inc	bx
020A:2CE7  45					inc	bp
020A:2CE8  53					push	bx
020A:2CE9  53					push	bx
020A:2CEA  4F					dec	di
020A:2CEB  52					push	dx
020A:2CEC  5F					pop	di
020A:2CED  49					dec	cx
020A:2CEE  44					inc	sp
020A:2CEF  45					inc	bp
020A:2CF0  4E					dec	si
020A:2CF1  54					push	sp
020A:2CF2  49					dec	cx
020A:2CF3  46					inc	si
020A:2CF4  49					dec	cx
020A:2CF5  45					inc	bp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 67

020A:2CF6  52					push	dx
020A:2CF7  3D 3878				cmp	ax,3878h
020A:2CFA  36					db	36h
020A:2CFB  20 46 61				and	[bp+61h],al
020A:2CFE  6D					db	6Dh
020A:2CFF  69					db	69h
020A:2D00  6C					db	6Ch
020A:2D01  79 20				jns	$+22h			; Jump if not sign
020A:2D03  36: 20 4D 6F				and	ss:[di+6Fh],cl
020A:2D07  64					db	64h
020A:2D08  65					db	65h
020A:2D09  6C					db	6Ch
020A:2D0A  20 31				and	[bx+di],dh
020A:2D0C  35 2038				xor	ax,2038h
020A:2D0F  53					push	bx
020A:2D10  74 65				jz	$+67h			; Jump if zero
020A:2D12  70 70				jo	$+72h			; Jump if overflow=1
020A:2D14  69					db	69h
020A:2D15  6E					db	6Eh
020A:2D16  67					db	67h
020A:2D17  20 31				and	[bx+di],dh
020A:2D19  30 2C				xor	[si],ch
020A:2D1B  20 47 65				and	[bx+65h],al
020A:2D1E  6E					db	6Eh
020A:2D1F  75 69				jnz	$+6Bh			; Jump if not zero
020A:2D21  6E					db	6Eh
020A:2D22  65					db	65h
020A:2D23  49					dec	cx
020A:2D24  6E					db	6Eh
020A:2D25  74 65				jz	$+67h			; Jump if zero
020A:2D27  6C					db	6Ch
020A:2D28  00 50 52				add	[bx+si+52h],dl
020A:2D2B  4F					dec	di
020A:2D2C  43					inc	bx
020A:2D2D  45					inc	bp
020A:2D2E  53					push	bx
020A:2D2F  53					push	bx
020A:2D30  4F					dec	di
020A:2D31  52					push	dx
020A:2D32  5F					pop	di
020A:2D33  4C					dec	sp
020A:2D34  45					inc	bp
020A:2D35  56					push	si
020A:2D36  45					inc	bp
020A:2D37  4C					dec	sp
020A:2D38  3D 0036				cmp	ax,36h
020A:2D3B  50					push	ax
020A:2D3C  52					push	dx
020A:2D3D  4F					dec	di
020A:2D3E  43					inc	bx
020A:2D3F  45					inc	bp
020A:2D40  53					push	bx
020A:2D41  53					push	bx
020A:2D42  4F					dec	di
020A:2D43  52					push	dx
020A:2D44  5F					pop	di
020A:2D45  52					push	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 68

020A:2D46  45					inc	bp
020A:2D47  56					push	si
020A:2D48  49					dec	cx
020A:2D49  53					push	bx
020A:2D4A  49					dec	cx
020A:2D4B  4F					dec	di
020A:2D4C  4E					dec	si
020A:2D4D  3D 6539				cmp	ax,6539h
020A:2D50  30 61 00		;*		xor	[bx+di+0],ah
020A:2D50  30 61 00				db	 30h, 61h, 00h
020A:2D53  50					push	ax
020A:2D54  52					push	dx
020A:2D55  4F					dec	di
020A:2D56  47					inc	di
020A:2D57  52					push	dx
020A:2D58  41					inc	cx
020A:2D59  4D					dec	bp
020A:2D5A  46					inc	si
020A:2D5B  49					dec	cx
020A:2D5C  4C					dec	sp
020A:2D5D  45					inc	bp
020A:2D5E  53					push	bx
020A:2D5F  3D 3A43				cmp	ax,3A43h
020A:2D62  5C					pop	sp
020A:2D63  50					push	ax
020A:2D64  52					push	dx
020A:2D65  4F					dec	di
020A:2D66  47					inc	di
020A:2D67  52					push	dx
020A:2D68  41					inc	cx
020A:2D69  7E 31				jle	$+33h			; Jump if < or =
020A:2D6B  00 50 52				add	[bx+si+52h],dl
020A:2D6E  4F					dec	di
020A:2D6F  4D					dec	bp
020A:2D70  50					push	ax
020A:2D71  54					push	sp
020A:2D72  3D 5024				cmp	ax,5024h
020A:2D75  24 47				and	al,47h			; 'G'
020A:2D77  00 53 45				add	[bp+di+45h],dl
020A:2D7A  53					push	bx
020A:2D7B  53					push	bx
020A:2D7C  49					dec	cx
020A:2D7D  4F					dec	di
020A:2D7E  4E					dec	si
020A:2D7F  4E					dec	si
020A:2D80  41					inc	cx
020A:2D81  4D					dec	bp
020A:2D82  45					inc	bp
020A:2D83  3D 6F43				cmp	ax,6F43h
020A:2D86  6E					db	6Eh
020A:2D87  73 6F				jnc	$+71h			; Jump if carry=0
020A:2D89  6C					db	6Ch
020A:2D8A  65					db	65h
020A:2D8B  00 53 59				add	[bp+di+59h],dl
020A:2D8E  53					push	bx
020A:2D8F  54					push	sp
020A:2D90  45					inc	bp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 69

020A:2D91  4D					dec	bp
020A:2D92  44					inc	sp
020A:2D93  52					push	dx
020A:2D94  49					dec	cx
020A:2D95  56					push	si
020A:2D96  45					inc	bp
020A:2D97  3D 3A43				cmp	ax,3A43h
020A:2D9A  00 53 59				add	[bp+di+59h],dl
020A:2D9D  53					push	bx
020A:2D9E  54					push	sp
020A:2D9F  45					inc	bp
020A:2DA0  4D					dec	bp
020A:2DA1  52					push	dx
020A:2DA2  4F					dec	di
020A:2DA3  4F					dec	di
020A:2DA4  54					push	sp
020A:2DA5  3D 3A43				cmp	ax,3A43h
020A:2DA8  5C					pop	sp
020A:2DA9  57					push	di
020A:2DAA  49					dec	cx
020A:2DAB  4E					dec	si
020A:2DAC  44					inc	sp
020A:2DAD  4F					dec	di
020A:2DAE  57					push	di
020A:2DAF  53					push	bx
020A:2DB0  00 54 45				add	[si+45h],dl
020A:2DB3  4D					dec	bp
020A:2DB4  50					push	ax
020A:2DB5  3D 3A43				cmp	ax,3A43h
020A:2DB8  5C					pop	sp
020A:2DB9  57					push	di
020A:2DBA  49					dec	cx
020A:2DBB  4E					dec	si
020A:2DBC  44					inc	sp
020A:2DBD  4F					dec	di
020A:2DBE  57					push	di
020A:2DBF  53					push	bx
020A:2DC0  5C					pop	sp
020A:2DC1  54					push	sp
020A:2DC2  45					inc	bp
020A:2DC3  4D					dec	bp
020A:2DC4  50					push	ax
020A:2DC5  00 54 4D				add	[si+4Dh],dl
020A:2DC8  50					push	ax
020A:2DC9  3D 3A43				cmp	ax,3A43h
020A:2DCC  5C					pop	sp
020A:2DCD  57					push	di
020A:2DCE  49					dec	cx
020A:2DCF  4E					dec	si
020A:2DD0  44					inc	sp
020A:2DD1  4F					dec	di
020A:2DD2  57					push	di
020A:2DD3  53					push	bx
020A:2DD4  5C					pop	sp
020A:2DD5  54					push	sp
020A:2DD6  45					inc	bp
020A:2DD7  4D					dec	bp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 70

020A:2DD8  50					push	ax
020A:2DD9  00 55 53				add	[di+53h],dl
020A:2DDC  45					inc	bp
020A:2DDD  52					push	dx
020A:2DDE  44					inc	sp
020A:2DDF  4F					dec	di
020A:2DE0  4D					dec	bp
020A:2DE1  41					inc	cx
020A:2DE2  49					dec	cx
020A:2DE3  4E					dec	si
020A:2DE4  3D 4957				cmp	ax,4957h
020A:2DE7  4E					dec	si
020A:2DE8  58					pop	ax
020A:2DE9  50					push	ax
020A:2DEA  49					dec	cx
020A:2DEB  45					inc	bp
020A:2DEC  2D 3831				sub	ax,3831h
020A:2DEF  31 32				xor	[bp+si],si
020A:2DF1  36: 33 00				xor	ax,ss:[bx+si]
020A:2DF4  55					push	bp
020A:2DF5  53					push	bx
020A:2DF6  45					inc	bp
020A:2DF7  52					push	dx
020A:2DF8  4E					dec	si
020A:2DF9  41					inc	cx
020A:2DFA  4D					dec	bp
020A:2DFB  45					inc	bp
020A:2DFC  3D 6441				cmp	ax,6441h
020A:2DFF  6D					db	6Dh
020A:2E00  69					db	69h
020A:2E01  6E					db	6Eh
020A:2E02  00 55 53				add	[di+53h],dl
020A:2E05  45					inc	bp
020A:2E06  52					push	dx
020A:2E07  50					push	ax
020A:2E08  52					push	dx
020A:2E09  4F					dec	di
020A:2E0A  46					inc	si
020A:2E0B  49					dec	cx
020A:2E0C  4C					dec	sp
020A:2E0D  45					inc	bp
020A:2E0E  3D 3A43				cmp	ax,3A43h
020A:2E11  5C					pop	sp
020A:2E12  44					inc	sp
020A:2E13  4F					dec	di
020A:2E14  43					inc	bx
020A:2E15  55					push	bp
020A:2E16  4D					dec	bp
020A:2E17  45					inc	bp
020A:2E18  7E 31				jle	$+33h			; Jump if < or =
020A:2E1A  5C					pop	sp
020A:2E1B  41					inc	cx
020A:2E1C  64					db	64h
020A:2E1D  6D					db	6Dh
020A:2E1E  69					db	69h
020A:2E1F  6E					db	6Eh
020A:2E20  00			data_163	db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 71

020A:2E21  42					inc	dx
020A:2E22  4C					dec	sp
020A:2E23  41					inc	cx
020A:2E24  53					push	bx
020A:2E25  54					push	sp
020A:2E26  45					inc	bp
020A:2E27  52					push	dx
020A:2E28  3D 3241				cmp	ax,3241h
020A:2E2B  32 30				xor	dh,[bx+si]
020A:2E2D  20 49 35				and	[bx+di+35h],cl
020A:2E30  20 44 31				and	[si+31h],al
020A:2E33  20 50 33				and	[bx+si+33h],dl
020A:2E36  33 30				xor	si,[bx+si]
020A:2E38  20 54 33				and	[si+33h],dl
020A:2E3B  00 00				add	[bx+si],al
020A:2E3D  0C 03				or	al,3
020A:2E3F  0D 0D16				or	ax,0D16h
020A:2E42  38 0D				cmp	[di],cl
020A:2E44  000C[00]				db	12 dup (0)
020A:2E50			loc_255:
020A:2E50  BB 0792				mov	bx,792h
020A:2E53  3C 02				cmp	al,2
020A:2E55  74 1B				je	loc_256			; Jump if equal
020A:2E57  BB 0758				mov	bx,758h
020A:2E5A  3C 08				cmp	al,8
020A:2E5C  74 14				je	loc_256			; Jump if equal
020A:2E5E  BB 0744				mov	bx,744h
020A:2E61  3C 0B				cmp	al,0Bh
020A:2E63  74 0D				je	loc_256			; Jump if equal
020A:2E65  BB 07AD				mov	bx,7ADh
020A:2E68  3C 05				cmp	al,5
020A:2E6A  74 06				je	loc_256			; Jump if equal
020A:2E6C  BB 0730				mov	bx,730h
020A:2E6F  BE 023D				mov	si,23Dh
020A:2E72			loc_256:
020A:2E72  8B D3				mov	dx,bx
020A:2E74  E8 068C				call	sub_34			; (3503)
020A:2E77  EB 09				jmp	short loc_257		; (2E82)
							                        ;* No entry point to code
020A:2E79  72 D5				jc	loc_255			; Jump if carry Set
020A:2E7B  B4 4D				mov	ah,4Dh
020A:2E7D  CD 21				int	21h			; DOS Services  ah=function 4Dh
										;  get return code info in ax
020A:2E7F  A3 02A7				mov	word ptr ds:[2A7h],ax	; (020A:02A7=0FFh)
020A:2E82			loc_257:
020A:2E82  E9 0179				jmp	loc_266			; (2FFE)
							                        ;* No entry point to code
020A:2E85  1F					pop	ds
020A:2E86  F6 06 0330 01			test	byte ptr ds:[330h],1	; (C0C4:0330=7)
020A:2E8B  74 0D				jz	loc_259			; Jump if zero
020A:2E8D  F6 06 0330 02			test	byte ptr ds:[330h],2	; (C0C4:0330=7)
020A:2E92  74 04				jz	loc_258			; Jump if zero
020A:2E94  1F					pop	ds
020A:2E95  E9 0F5A				jmp	loc_268			; (3DF2)
020A:2E98			loc_258:
020A:2E98  1F					pop	ds
020A:2E99  CF					iret				; Interrupt return
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 72

020A:2E9A			loc_259:
020A:2E9A  F6 06 0330 04			test	byte ptr ds:[330h],4	; (020A:0330=61h)
020A:2E9F  74 12				jz	loc_260			; Jump if zero
020A:2EA1  80 FC 01				cmp	ah,1
020A:2EA4  72 F2				jb	loc_258			; Jump if below
020A:2EA6  80 FC 0C				cmp	ah,0Ch
020A:2EA9  77 ED				ja	loc_258			; Jump if above
020A:2EAB  1F					pop	ds
020A:2EAC  83 C4 06				add	sp,6
020A:2EAF  F9					stc				; Set carry flag
020A:2EB0  CA 0002				retf	2			; Return far
020A:2EB3			loc_260:
020A:2EB3  80 0E 0330 04			or	byte ptr ds:[330h],4	; (020A:0330=61h)
020A:2EB8  FB					sti				; Enable interrupts
020A:2EB9  58					pop	ax
020A:2EBA  A1 02B1				mov	ax,word ptr ds:[2B1h]	; (020A:02B1=362Ah)
020A:2EBD  0B C0				or	ax,ax			; Zero ?
020A:2EBF  75 06				jnz	loc_261			; Jump if not zero
020A:2EC1  50					push	ax
020A:2EC2  B4 0D				mov	ah,0Dh
020A:2EC4  CD 21				int	21h			; DOS Services  ah=function 0Dh
										;  flush disk buffers to disk
020A:2EC6  58					pop	ax
020A:2EC7			loc_261:
020A:2EC7  F7 06 0256 FFFF			test	word ptr ds:[256h],0FFFFh	; (020A:0256=0)
020A:2ECD  74 52				jz	loc_265			; Jump if zero
020A:2ECF  0B C0				or	ax,ax			; Zero ?
020A:2ED1  75 4E				jnz	loc_265			; Jump if not zero
020A:2ED3  E8 02AC				call	sub_30			; (3182)
020A:2ED6  E8 03BF				call	sub_32			; (3298)
020A:2ED9  73 40				jnc	loc_264			; Jump if carry=0
020A:2EDB  8A 0E 02AA				mov	cl,byte ptr ds:[2AAh]	; (020A:02AA=0)
020A:2EDF  53					push	bx
020A:2EE0			loc_262:
020A:2EE0  8E 06 0256				mov	es,word ptr ds:[256h]	; (020A:0256=0)
020A:2EE4  BF 0020				mov	di,20h
020A:2EE7  26: 8B 1E 0005			mov	bx,word ptr es:[5]	; (0000:0005=7001h)
020A:2EEC  83 FB 00				cmp	bx,0
020A:2EEF  74 08				je	loc_263			; Jump if equal
020A:2EF1  06					push	es
020A:2EF2  8E C3				mov	es,bx
020A:2EF4  B4 49				mov	ah,49h
020A:2EF6  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:2EF8  07					pop	es
020A:2EF9			loc_263:
020A:2EF9  26: 8A 0E 0001			mov	cl,byte ptr es:[1]	; (0000:0001=10h)
020A:2EFE  26: 8B 1E 0003			mov	bx,word ptr es:[3]	; (0000:0003=8B00h)
020A:2F03  B4 49				mov	ah,49h
020A:2F05  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:2F07  89 1E 0256				mov	word ptr ds:[256h],bx	; (020A:0256=0)
020A:2F0B  FF 0E 02BB				dec	word ptr ds:[2BBh]	; (020A:02BB=0FF1Bh)
020A:2F0F  75 CF				jnz	loc_262			; Jump if not zero
020A:2F11  5B					pop	bx
020A:2F12  88 0E 02AA				mov	byte ptr ds:[2AAh],cl	; (020A:02AA=0)
020A:2F16  C6 06 0331 00			mov	byte ptr ds:[331h],0	; (020A:0331=73h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 73

020A:2F1B			loc_264:
020A:2F1B  E8 05E2				call	sub_33			; (3500)
020A:2F1E  E8 028A				call	sub_31			; (31AB)
020A:2F21			loc_265:
020A:2F21  33 C0				xor	ax,ax			; Zero register
020A:2F23  8B E8				mov	bp,ax
020A:2F25  A2 02B7				mov	byte ptr ds:[2B7h],al	; (020A:02B7=8)
020A:2F28  A2 02B8				mov	byte ptr ds:[2B8h],al	; (020A:02B8=4)
020A:2F2B  E8 001C				call	sub_29			; (2F4A)
020A:2F2E  39 06 374D				cmp	data_170,ax		; (020A:374D=9A20h)
020A:2F32  05 0038				add	ax,38h
020A:2F35  06					push	es
020A:2F36  B1 02				mov	cl,2
020A:2F38  FF					db	0FFh
020A:2F39  FF 80 3026				inc	data_169[bx+si]		; (020A:3026=31h)
020A:2F3D  03 FB				add	di,bx
020A:2F3F  38 43 4F 4D 53 50			db	'8COMSPEC=C:'
020A:2F45  45 43 3D 43 3A

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

020A:2F4A			sub_29		proc	near
020A:2F4A  5C					db	'\'
020A:2F4B  57 49 4E 44 4F 57			db	'WINDOWS\SYSTEM32\COMMAND.COM', 0
020A:2F51  53 5C 53 59 53 54
020A:2F57  45 4D 33 32 5C 43
020A:2F5D  4F 4D 4D 41 4E 44
020A:2F63  2E 43 4F 4D 00
020A:2F68  41 4C 4C 55 53 45			db	'ALLUSERSPROFILE=C:\DOCUME~1\ALLU'
020A:2F6E  52 53 50 52 4F 46
020A:2F74  49 4C 45 3D 43 3A
020A:2F7A  5C 44 4F 43 55 4D
020A:2F80  45 7E 31 5C 41 4C
020A:2F86  4C 55
020A:2F88  53 45 7E 31 00			db	'SE~1', 0
020A:2F8D  41 50 50 44 41 54			db	'APPDATA=C:\DOCUME~1\Admin\APPLIC'
020A:2F93  41 3D 43 3A 5C 44
020A:2F99  4F 43 55 4D 45 7E
020A:2F9F  31 5C 41 64 6D 69
020A:2FA5  6E 5C 41 50 50 4C
020A:2FAB  49 43
020A:2FAD  7E 31 00				db	'~1', 0
020A:2FB0  43 4C 49 45 4E 54			db	'CLIENTNAME=Console', 0
020A:2FB6  4E 41 4D 45 3D 43
020A:2FBC  6F 6E 73 6F 6C 65
020A:2FC2  00
020A:2FC3  43 4F 4D 4D 4F 4E			db	'COMMONPROGRAMFILES=C:\PROGRA~1\C'
020A:2FC9  50 52 4F 47 52 41
020A:2FCF  4D 46 49 4C 45 53
020A:2FD5  3D 43 3A 5C 50 52
020A:2FDB  4F 47 52 41 7E 31
020A:2FE1  5C 43
020A:2FE3  4F 4D 4D 4F 4E 7E			db	'OMMON~1', 0
020A:2FE9  31 00
020A:2FEB  43 4F 4D 50 55 54			db	'COMPUTERNAME=WINXPIE-181263', 0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 74

020A:2FF1  45 52 4E 41 4D 45
020A:2FF7  3D 57 49 4E 58 50
020A:2FFD  49 45 2D 31 38 31
020A:3003  32 36 33 00
020A:3007  44 45				db	'DE'
020A:3009  4D56			data_168	dw	4D56h
020A:300B  47					inc	di
020A:300C  52					push	dx
020A:300D  5F					pop	di
020A:300E  53					push	bx
020A:300F  48					dec	ax
020A:3010  4F					dec	di
020A:3011  57					push	di
020A:3012  5F					pop	di
020A:3013  4E					dec	si
020A:3014  4F					dec	di
020A:3015  4E					dec	si
020A:3016  50					push	ax
020A:3017  52					push	dx
020A:3018  45					inc	bp
020A:3019  53					push	bx
020A:301A  45					inc	bp
020A:301B  4E					dec	si
020A:301C  54					push	sp
020A:301D  5F					pop	di
020A:301E  44					inc	sp
020A:301F  45					inc	bp
020A:3020  56					push	si
020A:3021  49					dec	cx
020A:3022  43					inc	bx
020A:3023  45					inc	bp
020A:3024  53					push	bx
020A:3025  3D 0031				cmp	ax,31h
020A:3028  46					inc	si
020A:3029  50					push	ax
020A:302A  5F					pop	di
020A:302B  4E					dec	si
020A:302C  4F					dec	di
020A:302D  5F					pop	di
020A:302E  48					dec	ax
020A:302F  4F					dec	di
020A:3030  53					push	bx
020A:3031  54					push	sp
020A:3032  5F					pop	di
020A:3033  43					inc	bx
020A:3034  48					dec	ax
020A:3035  45					inc	bp
020A:3036  43					inc	bx
020A:3037  4B					dec	bx
020A:3038  3D 4F4E				cmp	ax,4F4Eh
020A:303B  00 48 4F				add	[bx+si+4Fh],cl
020A:303E  4D					dec	bp
020A:303F  45					inc	bp
020A:3040  44					inc	sp
020A:3041  52					push	dx
020A:3042  49					dec	cx
020A:3043  56					push	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 75

020A:3044  45					inc	bp
020A:3045  3D 3A43				cmp	ax,3A43h
020A:3048  00 48 4F				add	[bx+si+4Fh],cl
020A:304B  4D					dec	bp
020A:304C  45					inc	bp
020A:304D  50					push	ax
020A:304E  41					inc	cx
020A:304F  54					push	sp
020A:3050  48					dec	ax
020A:3051  3D 445C				cmp	ax,445Ch
020A:3054  6F					db	6Fh
020A:3055  63					db	63h
020A:3056  75 6D				jnz	$+6Fh			; Jump if not zero
020A:3058  65					db	65h
020A:3059  6E					db	6Eh
020A:305A  74 73				jz	$+75h			; Jump if zero
020A:305C  20 61 6E				and	[bx+di+6Eh],ah
020A:305F  64					db	64h
020A:3060  20 53 65				and	[bp+di+65h],dl
020A:3063  74 74				jz	$+76h			; Jump if zero
020A:3065  69					db	69h
020A:3066  6E					db	6Eh
020A:3067  67					db	67h
020A:3068  73 5C				jnc	$+5Eh			; Jump if carry=0
020A:306A  41					inc	cx
020A:306B  64					db	64h
020A:306C  6D					db	6Dh
020A:306D  69					db	69h
020A:306E  6E					db	6Eh
020A:306F  00 4C 4F				add	[si+4Fh],cl
020A:3072  47					inc	di
020A:3073  4F					dec	di
020A:3074  4E					dec	si
020A:3075  53					push	bx
020A:3076  45					inc	bp
020A:3077  52					push	dx
020A:3078  56					push	si
020A:3079  45					inc	bp
020A:307A  52					push	dx
020A:307B  3D 5C5C				cmp	ax,5C5Ch
020A:307E  57					push	di
020A:307F  49					dec	cx
020A:3080  4E					dec	si
020A:3081  58					pop	ax
020A:3082  50					push	ax
020A:3083  49					dec	cx
020A:3084  45					inc	bp
020A:3085  2D 3831				sub	ax,3831h
020A:3088  31 32				xor	[bp+si],si
020A:308A  36: 33 00				xor	ax,ss:[bx+si]
020A:308D  4E					dec	si
020A:308E  55					push	bp
020A:308F  4D					dec	bp
020A:3090  42					inc	dx
020A:3091  45					inc	bp
020A:3092  52					push	dx
020A:3093  5F					pop	di
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 76

020A:3094  4F					dec	di
020A:3095  46					inc	si
020A:3096  5F					pop	di
020A:3097  50					push	ax
020A:3098  52					push	dx
020A:3099  4F					dec	di
020A:309A  43					inc	bx
020A:309B  45					inc	bp
020A:309C  53					push	bx
020A:309D  53					push	bx
020A:309E  4F					dec	di
020A:309F  52					push	dx
020A:30A0  53					push	bx
020A:30A1  3D 0031				cmp	ax,31h
020A:30A4  4F					dec	di
020A:30A5  53					push	bx
020A:30A6  3D 6957				cmp	ax,6957h
020A:30A9  6E					db	6Eh
020A:30AA  64					db	64h
020A:30AB  6F					db	6Fh
020A:30AC  77 73				ja	$+75h			; Jump if above
020A:30AE  5F					pop	di
020A:30AF  4E					dec	si
020A:30B0  54					push	sp
020A:30B1  00 50 41				add	[bx+si+41h],dl
020A:30B4  54					push	sp
020A:30B5  48					dec	ax
020A:30B6  3D 3A43				cmp	ax,3A43h
020A:30B9  5C					pop	sp
020A:30BA  57					push	di
020A:30BB  49					dec	cx
020A:30BC  4E					dec	si
020A:30BD  44					inc	sp
020A:30BE  4F					dec	di
020A:30BF  57					push	di
020A:30C0  53					push	bx
020A:30C1  5C					pop	sp
020A:30C2  73 79				jnc	$+7Bh			; Jump if carry=0
020A:30C4  73 74				jnc	$+76h			; Jump if carry=0
020A:30C6  65					db	65h
020A:30C7  6D					db	6Dh
020A:30C8  33 32				xor	si,[bp+si]
020A:30CA  3B 43 3A				cmp	ax,[bp+di+3Ah]
020A:30CD  5C					pop	sp
020A:30CE  57					push	di
020A:30CF  49					dec	cx
020A:30D0  4E					dec	si
020A:30D1  44					inc	sp
020A:30D2  4F					dec	di
020A:30D3  57					push	di
020A:30D4  53					push	bx
020A:30D5  3B 43 3A				cmp	ax,[bp+di+3Ah]
020A:30D8  5C					pop	sp
020A:30D9  57					push	di
020A:30DA  49					dec	cx
020A:30DB  4E					dec	si
020A:30DC  44					inc	sp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 77

020A:30DD  4F					dec	di
020A:30DE  57					push	di
020A:30DF  53					push	bx
020A:30E0  5C					pop	sp
020A:30E1  73 79				jnc	$+7Bh			; Jump if carry=0
020A:30E3  73 74				jnc	$+76h			; Jump if carry=0
020A:30E5  65					db	65h
020A:30E6  6D					db	6Dh
020A:30E7  33 32				xor	si,[bp+si]
020A:30E9  5C					pop	sp
020A:30EA  57					push	di
020A:30EB  42					inc	dx
020A:30EC  45					inc	bp
020A:30ED  4D					dec	bp
020A:30EE  00 50 41				add	[bx+si+41h],dl
020A:30F1  54					push	sp
020A:30F2  48					dec	ax
020A:30F3  45					inc	bp
020A:30F4  58					pop	ax
020A:30F5  54					push	sp
020A:30F6  3D 432E				cmp	ax,432Eh
020A:30F9  4F					dec	di
020A:30FA  4D					dec	bp
020A:30FB  3B 2E 5845				cmp	bp,word ptr data_176	; (020A:5845=0D5EBh)
020A:30FF  45					inc	bp
020A:3100  3B 2E 4142				cmp	bp,word ptr ds:[4142h]	; (020A:4142=0BFAAh)
020A:3104  54					push	sp
020A:3105  3B 2E 4D43				cmp	bp,word ptr ds:[4D43h]	; (020A:4D43=2B4h)
020A:3109  44					inc	sp
020A:310A  3B 2E 4256				cmp	bp,word ptr ds:[4256h]	; (020A:4256=7206h)
020A:310E  53					push	bx
020A:310F  3B 2E 4256				cmp	bp,word ptr ds:[4256h]	; (020A:4256=7206h)
020A:3113  45					inc	bp
020A:3114  3B 2E 534A				cmp	bp,word ptr ds:[534Ah]	; (020A:534A=2CACh)
020A:3118  3B 2E 534A				cmp	bp,word ptr ds:[534Ah]	; (020A:534A=2CACh)
020A:311C  45					inc	bp
020A:311D  3B 2E 5357				cmp	bp,word ptr ds:[5357h]	; (020A:5357=83h)
020A:3121  46					inc	si
020A:3122  3B 2E 5357				cmp	bp,word ptr ds:[5357h]	; (020A:5357=83h)
020A:3126  48					dec	ax
020A:3127  00 50 52				add	[bx+si+52h],dl
020A:312A  4F					dec	di
020A:312B  43					inc	bx
020A:312C  45					inc	bp
020A:312D  53					push	bx
020A:312E  53					push	bx
020A:312F  4F					dec	di
020A:3130  52					push	dx
020A:3131  5F					pop	di
020A:3132  41					inc	cx
020A:3133  52					push	dx
020A:3134  43					inc	bx
020A:3135  48					dec	ax
020A:3136  49					dec	cx
020A:3137  54					push	sp
020A:3138  45					inc	bp
020A:3139  43					inc	bx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 78

020A:313A  54					push	sp
020A:313B  55					push	bp
020A:313C  52					push	dx
020A:313D  45					inc	bp
020A:313E  3D 3878				cmp	ax,3878h
020A:3141  36: 00 50 52				add	ss:[bx+si+52h],dl
020A:3145  4F					dec	di
020A:3146  43					inc	bx
020A:3147  45					inc	bp
020A:3148  53					push	bx
020A:3149  53					push	bx
020A:314A  4F					dec	di
020A:314B  52					push	dx
020A:314C  5F					pop	di
020A:314D  49					dec	cx
020A:314E  44					inc	sp
020A:314F  45					inc	bp
020A:3150  4E					dec	si
020A:3151  54					push	sp
020A:3152  49					dec	cx
020A:3153  46					inc	si
020A:3154  49					dec	cx
020A:3155  45					inc	bp
020A:3156  52					push	dx
020A:3157  3D 3878				cmp	ax,3878h
020A:315A  36					db	36h
020A:315B  20 46 61				and	[bp+61h],al
020A:315E  6D					db	6Dh
020A:315F  69					db	69h
020A:3160  6C					db	6Ch
020A:3161  79 20				jns	$+22h			; Jump if not sign
020A:3163  36: 20 4D 6F				and	ss:[di+6Fh],cl
020A:3167  64					db	64h
020A:3168  65					db	65h
020A:3169  6C					db	6Ch
020A:316A  20 31				and	[bx+di],dh
020A:316C  35 2038				xor	ax,2038h
020A:316F  53					push	bx
020A:3170  74 65				jz	$+67h			; Jump if zero
020A:3172  70 70				jo	$+72h			; Jump if overflow=1
020A:3174  69					db	69h
020A:3175  6E					db	6Eh
020A:3176  67					db	67h
020A:3177  20 31				and	[bx+di],dh
020A:3179  30 2C				xor	[si],ch
020A:317B  20 47 65				and	[bx+65h],al
020A:317E  6E					db	6Eh
020A:317F  75 69				jnz	$+6Bh			; Jump if not zero
020A:3181  6E					db	6Eh

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

020A:3182			sub_30:
020A:3182  65					db	65h
020A:3183  49					dec	cx
020A:3184  6E					db	6Eh
020A:3185  74 65				jz	$+67h			; Jump if zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 79

020A:3187  6C					db	6Ch
020A:3188  00 50 52				add	[bx+si+52h],dl
020A:318B  4F					dec	di
020A:318C  43					inc	bx
020A:318D  45					inc	bp
020A:318E  53					push	bx
020A:318F  53					push	bx
020A:3190  4F					dec	di
020A:3191  52					push	dx
020A:3192  5F					pop	di
020A:3193  4C					dec	sp
020A:3194  45					inc	bp
020A:3195  56					push	si
020A:3196  45					inc	bp
020A:3197  4C					dec	sp
020A:3198  3D 0036				cmp	ax,36h
020A:319B  50					push	ax
020A:319C  52					push	dx
020A:319D  4F					dec	di
020A:319E  43					inc	bx
020A:319F  45					inc	bp
020A:31A0  53					push	bx
020A:31A1  53					push	bx
020A:31A2  4F					dec	di
020A:31A3  52					push	dx
020A:31A4  5F					pop	di
020A:31A5  52					push	dx
020A:31A6  45					inc	bp
020A:31A7  56					push	si
020A:31A8  49					dec	cx
020A:31A9  53					push	bx
020A:31AA  49					dec	cx

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

020A:31AB			sub_31:
020A:31AB  4F					dec	di
020A:31AC  4E					dec	si
020A:31AD  3D 6539				cmp	ax,6539h
020A:31B0  30 61 00		;*		xor	[bx+di+0],ah
020A:31B0  30 61 00				db	 30h, 61h, 00h
020A:31B3  50					push	ax
020A:31B4  52					push	dx
020A:31B5  4F					dec	di
020A:31B6  47					inc	di
020A:31B7  52					push	dx
020A:31B8  41					inc	cx
020A:31B9  4D					dec	bp
020A:31BA  46					inc	si
020A:31BB  49					dec	cx
020A:31BC  4C					dec	sp
020A:31BD  45					inc	bp
020A:31BE  53					push	bx
020A:31BF  3D 3A43				cmp	ax,3A43h
020A:31C2  5C					pop	sp
020A:31C3  50					push	ax
020A:31C4  52					push	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 80

020A:31C5  4F					dec	di
020A:31C6  47					inc	di
020A:31C7  52					push	dx
020A:31C8  41					inc	cx
020A:31C9  7E 31				jle	$+33h			; Jump if < or =
020A:31CB  00 50 52				add	[bx+si+52h],dl
020A:31CE  4F					dec	di
020A:31CF  4D					dec	bp
020A:31D0  50					push	ax
020A:31D1  54					push	sp
020A:31D2  3D 5024				cmp	ax,5024h
020A:31D5  24 47				and	al,47h			; 'G'
020A:31D7  00 53 45				add	[bp+di+45h],dl
020A:31DA  53					push	bx
020A:31DB  53					push	bx
020A:31DC  49					dec	cx
020A:31DD  4F					dec	di
020A:31DE  4E					dec	si
020A:31DF  4E					dec	si
020A:31E0  41					inc	cx
020A:31E1  4D					dec	bp
020A:31E2  45					inc	bp
020A:31E3  3D 6F43				cmp	ax,6F43h
020A:31E6  6E					db	6Eh
020A:31E7  73 6F				jnc	$+71h			; Jump if carry=0
020A:31E9  6C					db	6Ch
020A:31EA  65					db	65h
020A:31EB  00 53 59				add	[bp+di+59h],dl
020A:31EE  53					push	bx
020A:31EF  54					push	sp
020A:31F0  45					inc	bp
020A:31F1  4D					dec	bp
020A:31F2  44					inc	sp
020A:31F3  52					push	dx
020A:31F4  49					dec	cx
020A:31F5  56					push	si
020A:31F6  45					inc	bp
020A:31F7  3D 3A43				cmp	ax,3A43h
020A:31FA  00 53 59				add	[bp+di+59h],dl
020A:31FD  53					push	bx
020A:31FE  54					push	sp
020A:31FF  45					inc	bp
020A:3200  4D					dec	bp
020A:3201  52					push	dx
020A:3202  4F					dec	di
020A:3203  4F					dec	di
020A:3204  54					push	sp
020A:3205  3D 3A43				cmp	ax,3A43h
020A:3208  5C					pop	sp
020A:3209  57					push	di
020A:320A  49					dec	cx
020A:320B  4E					dec	si
020A:320C  44					inc	sp
020A:320D  4F					dec	di
020A:320E  57					push	di
020A:320F  53					push	bx
020A:3210  00 54 45				add	[si+45h],dl
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 81

020A:3213  4D					dec	bp
020A:3214  50					push	ax
020A:3215  3D 3A43				cmp	ax,3A43h
020A:3218  5C					pop	sp
020A:3219  57					push	di
020A:321A  49					dec	cx
020A:321B  4E					dec	si
020A:321C  44					inc	sp
020A:321D  4F					dec	di
020A:321E  57					push	di
020A:321F  53					push	bx
020A:3220  5C					pop	sp
020A:3221  54					push	sp
020A:3222  45					inc	bp
020A:3223  4D					dec	bp
020A:3224  50					push	ax
020A:3225  00 54 4D				add	[si+4Dh],dl
020A:3228  50					push	ax
020A:3229  3D 3A43				cmp	ax,3A43h
020A:322C  5C					pop	sp
020A:322D  57					push	di
020A:322E  49					dec	cx
020A:322F  4E					dec	si
020A:3230  44					inc	sp
020A:3231  4F					dec	di
020A:3232  57					push	di
020A:3233  53					push	bx
020A:3234  5C					pop	sp
020A:3235  54					push	sp
020A:3236  45					inc	bp
020A:3237  4D					dec	bp
020A:3238  50					push	ax
020A:3239  00 55 53				add	[di+53h],dl
020A:323C  45					inc	bp
020A:323D  52					push	dx
020A:323E  44					inc	sp
020A:323F  4F					dec	di
020A:3240  4D					dec	bp
020A:3241  41					inc	cx
020A:3242  49					dec	cx
020A:3243  4E					dec	si
020A:3244  3D 4957				cmp	ax,4957h
020A:3247  4E					dec	si
020A:3248  58					pop	ax
020A:3249  50					push	ax
020A:324A  49					dec	cx
020A:324B  45					inc	bp
020A:324C  2D 3831				sub	ax,3831h
020A:324F  31 32				xor	[bp+si],si
020A:3251  36: 33 00				xor	ax,ss:[bx+si]
020A:3254  55					push	bp
020A:3255  53					push	bx
020A:3256  45					inc	bp
020A:3257  52					push	dx
020A:3258  4E					dec	si
020A:3259  41					inc	cx
020A:325A  4D					dec	bp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 82

020A:325B  45					inc	bp
020A:325C  3D 6441				cmp	ax,6441h
020A:325F  6D					db	6Dh
020A:3260  69					db	69h
020A:3261  6E					db	6Eh
020A:3262  00 55 53				add	[di+53h],dl
020A:3265  45					inc	bp
020A:3266  52					push	dx
020A:3267  50					push	ax
020A:3268  52					push	dx
020A:3269  4F					dec	di
020A:326A  46					inc	si
020A:326B  49					dec	cx
020A:326C  4C					dec	sp
020A:326D  45					inc	bp
020A:326E  3D 3A43				cmp	ax,3A43h
020A:3271  5C					pop	sp
020A:3272  44					inc	sp
020A:3273  4F					dec	di
020A:3274  43					inc	bx
020A:3275  55					push	bp
020A:3276  4D					dec	bp
020A:3277  45					inc	bp
020A:3278  7E 31				jle	$+33h			; Jump if < or =
020A:327A  5C					pop	sp
020A:327B  41					inc	cx
020A:327C  64					db	64h
020A:327D  6D					db	6Dh
020A:327E  69					db	69h
020A:327F  6E					db	6Eh
020A:3280  00 42 4C				add	[bp+si+4Ch],al
020A:3283  41					inc	cx
020A:3284  53					push	bx
020A:3285  54					push	sp
020A:3286  45					inc	bp
020A:3287  52					push	dx
020A:3288  3D 3241				cmp	ax,3241h
020A:328B  32 30				xor	dh,[bx+si]
020A:328D  20 49 35				and	[bx+di+35h],cl
020A:3290  20 44 31				and	[si+31h],al
020A:3293  20 50 33				and	[bx+si+33h],dl
020A:3296  33 30				xor	si,[bx+si]

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

020A:3298			sub_32:
020A:3298  20 54 33				and	[si+33h],dl
020A:329B  00 00				add	[bx+si],al
020A:329D  01 00				add	[bx+si],ax
020A:329F  5A					pop	dx
020A:32A0  3A 5C 53				cmp	bl,[si+53h]
020A:32A3  52					push	dx
020A:32A4  43					inc	bx
020A:32A5  45					inc	bp
020A:32A6  52					push	dx
020A:32A7  38 30				cmp	[bx+si],dh
020A:32A9  31 5C 53				xor	[si+53h],bx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 83

020A:32AC  52					push	dx
020A:32AD  2E					db	2Eh
020A:32AE  45					inc	bp
020A:32AF  58					pop	ax
020A:32B0  45					inc	bp
020A:32B1  00 F9				add	cl,bh
020A:32B3  C3					retn
				sub_29		endp

020A:32B4  1F					pop	ds
020A:32B5  8F 06 0612				pop	word ptr ds:[612h]	; (0000:0612=0)
020A:32B9  FB					sti				; Enable interrupts
020A:32BA  06					push	es
020A:32BB  56					push	si
020A:32BC  51					push	cx
020A:32BD  57					push	di
020A:32BE  51					push	cx
020A:32BF  50					push	ax
020A:32C0  5A					pop	dx
020A:32C1  37					aaa				; Ascii adjust
020A:32C2  05 9AC8				add	ax,9AC8h
020A:32C5  44					inc	sp
020A:32C6  04 26				add	al,26h			; '&'
020A:32C8  53					push	bx
020A:32C9  52					push	dx
020A:32CA  00 02				add	[bp+si],al
020A:32CC  BF 0210				mov	di,210h
020A:32CF  B9 20CD				mov	cx,20CDh
020A:32D2  FF 9F 9A00				call	dword ptr ds:[9A00h][bx]	; (0000:9A00=675h)
020A:32D6  F0					db	0F0h
020A:32D7  FE					db	0FEh
020A:32D8  1D DEF0				sbb	ax,0DEF0h
020A:32DB  01 0D				add	[di],cx
020A:32DD  04 4B				add	al,4Bh			; 'K'
020A:32DF  01 0D				add	[di],cx
020A:32E1  04 56				add	al,56h			; 'V'
020A:32E3  01 0D				add	[di],cx
020A:32E5  04 0D				add	al,0Dh
020A:32E7  04 01				add	al,1
020A:32E9  01 01				add	[bx+di],ax
020A:32EB  00 02				add	[bp+si],al
020A:32ED  03 FF				add	di,di
020A:32EF  FF					db	0FFh
020A:32F0  FF					db	0FFh
020A:32F1  FF					db	0FFh
020A:32F2  FF					db	0FFh
020A:32F3  FF					db	0FFh
020A:32F4  FF					db	0FFh
020A:32F5  FF					db	0FFh
020A:32F6  FF					db	0FFh
020A:32F7  FF					db	0FFh
020A:32F8  FF					db	0FFh
020A:32F9  FF					db	0FFh
020A:32FA  FF					db	0FFh
020A:32FB  FF					db	0FFh
020A:32FC  FE 04				inc	byte ptr [si]
020A:32FE  0C 03				or	al,3
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 84

020A:3300  FD					std				; Set direction flag
020A:3301  20 14				and	[si],dl
020A:3303  00 18				add	[bx+si],bl
020A:3305  00 37				add	[bx],dh
020A:3307  05 FFFF				add	ax,0FFFFh
020A:330A  FF					db	0FFh
020A:330B  FF 00				inc	word ptr [bx+si]
020A:330D  00 00				add	[bx+si],al
020A:330F  00 05				add	[di],al
020A:3311  00					db	0
020A:3312  00					db	0
020A:3313  00					db	0
020A:3314  00					db	0
020A:3315  00					db	0
020A:3316  00					db	0
020A:3317  00					db	0
020A:3318  00					db	0
020A:3319  00					db	0
020A:331A  00					db	0
020A:331B  00					db	0
020A:331C  00					db	0
020A:331D  00 00				add	[bx+si],al
020A:331F  00 CD				add	ch,cl
020A:3321  21 CB				and	bx,cx
020A:3323  00					db	0
020A:3324  00					db	0
020A:3325  00					db	0
020A:3326  00					db	0
020A:3327  00					db	0
020A:3328  00					db	0
020A:3329  00					db	0
020A:332A  00 00				add	[bx+si],al
020A:332C  00 20				add	[bx+si],ah
020A:332E  20 20				and	[bx+si],ah
020A:3330  20 20				and	[bx+si],ah
020A:3332  20 20				and	[bx+si],ah
020A:3334  20 20				and	[bx+si],ah
020A:3336  20 20				and	[bx+si],ah
020A:3338  00					db	0
020A:3339  00					db	0
020A:333A  00 00				add	[bx+si],al
020A:333C  00 20				add	[bx+si],ah
020A:333E  20 20				and	[bx+si],ah
020A:3340  20 20				and	[bx+si],ah
020A:3342  20 20				and	[bx+si],ah
020A:3344  20 20				and	[bx+si],ah
020A:3346  20 20				and	[bx+si],ah
020A:3348  00					db	0
020A:3349  00					db	0
020A:334A  00					db	0
020A:334B  00					db	0
020A:334C  00					db	0
020A:334D  00					db	0
020A:334E  00 00				add	[bx+si],al
020A:3350  00 0D				add	[di],cl
020A:3352  20 20				and	[bx+si],ah
020A:3354  20 53 45				and	[bp+di+45h],dl
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 85

020A:3357  54					push	sp
020A:3358  20 42 4C				and	[bp+si+4Ch],al
020A:335B  41					inc	cx
020A:335C  53					push	bx
020A:335D  54					push	sp
020A:335E  45					inc	bp
020A:335F  52					push	dx
020A:3360  3D 3041				cmp	ax,3041h
020A:3363  0D 6464				or	ax,6464h
020A:3366  72 65				jc	$+67h			; Jump if carry Set
020A:3368  73 73				jnc	$+75h			; Jump if carry=0
020A:336A  2E: 20 20				and	cs:[bx+si],ah
020A:336D  46					inc	si
020A:336E  6F					db	6Fh
020A:336F  72 20				jc	$+22h			; Jump if carry Set
020A:3371  65					db	65h
020A:3372  78 61				js	$+63h			; Jump if sign=1
020A:3374  6D					db	6Dh
020A:3375  70 6C				jo	$+6Eh			; Jump if overflow=1
020A:3377  65					db	65h
020A:3378  3A 0D				cmp	cl,[di]
020A:337A  20 6F 6E				and	[bx+6Eh],ch
020A:337D  20 4E 54				and	[bp+54h],cl
020A:3380  56					push	si
020A:3381  44					inc	sp
020A:3382  4D					dec	bp
020A:3383  2C 20				sub	al,20h			; ' '
020A:3385  73 70				jnc	$+72h			; Jump if carry=0
020A:3387  65					db	65h
020A:3388  63					db	63h
020A:3389  69					db	69h
020A:338A  66					db	66h
020A:338B  79 20				jns	$+22h			; Jump if not sign
020A:338D  61					db	61h
020A:338E  6E					db	6Eh
020A:338F  20 69 6E				and	[bx+di+6Eh],ch
020A:3392  76 61				jbe	$+63h			; Jump if below or =
020A:3394  6C					db	6Ch
020A:3395  69					db	69h
020A:3396  64					db	64h
020A:3397  0D 6F20				or	ax,6F20h
020A:339A  6E					db	6Eh
020A:339B  6C					db	6Ch
020A:339C  79 2E				jns	$+30h			; Jump if not sign
020A:339E  0D 0000				or	ax,0
020A:33A1  00					db	0
020A:33A2  00					db	0
020A:33A3  00					db	0
020A:33A4  00					db	0
020A:33A5  00					db	0
020A:33A6  00					db	0
020A:33A7  00					db	0
020A:33A8  00					db	0
020A:33A9  00					db	0
020A:33AA  00					db	0
020A:33AB  00					db	0
020A:33AC  00					db	0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 86

020A:33AD  00					db	0
020A:33AE  00					db	0
020A:33AF  00					db	0
020A:33B0  00					db	0
020A:33B1  00					db	0
020A:33B2  00					db	0
020A:33B3  00					db	0
020A:33B4  00					db	0
020A:33B5  00					db	0
020A:33B6  00					db	0
020A:33B7  00					db	0
020A:33B8  00					db	0
020A:33B9  00					db	0
020A:33BA  00					db	0
020A:33BB  00					db	0
020A:33BC  00					db	0
020A:33BD  00					db	0
020A:33BE  00					db	0
020A:33BF  00					db	0
020A:33C0  00					db	0
020A:33C1  00					db	0
020A:33C2  00					db	0
020A:33C3  00					db	0
020A:33C4  00					db	0
020A:33C5  00					db	0
020A:33C6  00					db	0
020A:33C7  00					db	0
020A:33C8  00					db	0
020A:33C9  00					db	0
020A:33CA  00					db	0
020A:33CB  00					db	0
020A:33CC  00					db	0
020A:33CD  00 00				add	[bx+si],al
020A:33CF  00 53 6F				add	[bp+di+6Fh],dl
020A:33D2  75 72				jnz	$+74h			; Jump if not zero
020A:33D4  63					db	63h
020A:33D5  65					db	65h
020A:33D6  72 20				jc	$+22h			; Jump if carry Set
020A:33D8  2D 5620				sub	ax,5620h
020A:33DB  20 43 6F				and	[bp+di+6Fh],al
020A:33DE  6D					db	6Dh
020A:33DF  6D					db	6Dh
020A:33E0  75 6E				jnz	$+70h			; Jump if not zero
020A:33E2  69					db	69h
020A:33E3  63					db	63h
020A:33E4  61					db	61h
020A:33E5  74 69				jz	$+6Bh			; Jump if zero
020A:33E7  6F					db	6Fh
020A:33E8  6E					db	6Eh
020A:33E9  73 2C				jnc	$+2Eh			; Jump if carry=0
020A:33EB  20 49 6E				and	[bx+di+6Eh],cl
020A:33EE  63					db	63h
020A:33EF  2E: 20 43 6F				and	cs:[bp+di+6Fh],al
020A:33F3  70 79				jo	$+7Bh			; Jump if overflow=1
020A:33F5  72 69				jc	$+6Bh			; Jump if carry Set
020A:33F7  67					db	67h
020A:33F8  68					db	68h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 87

020A:33F9  74 20				jz	$+22h			; Jump if zero
020A:33FB  31 39				xor	[bx+di],di
020A:33FD  38 38				cmp	[bx+si],bh
020A:33FF  2D 3032				sub	ax,3032h
020A:3402  30 31				xor	[bx+di],dh
020A:3404  20 20				and	[bx+si],ah
020A:3406  42					inc	dx
020A:3407  79 3A				jns	$+3Ch			; Jump if not sign
020A:3409  20 46 72				and	[bp+72h],al
020A:340C  61					db	61h
020A:340D  6E					db	6Eh
020A:340E  6B					db	6Bh
020A:340F  20 76 61				and	[bp+61h],dh
020A:3412  6E					db	6Eh
020A:3413  20 47 69				and	[bx+69h],al
020A:3416  6C					db	6Ch
020A:3417  6C					db	6Ch
020A:3418  75 77				jnz	$+79h			; Jump if not zero
020A:341A  65					db	65h
020A:341B  20 28				and	[bx+si],ch
020A:341D  30 31				xor	[bx+di],dh
020A:341F  2F					das				; Decimal adjust
020A:3420  32 36 302F				xor	dh,byte ptr ds:[302Fh]	; (0000:302F=0C0h)
020A:3424  31 2C				xor	[si],bp
020A:3426  31 30				xor	[bx+si],si
020A:3428  3A 30				cmp	dh,[bx+si]
020A:342A  37					aaa				; Ascii adjust
020A:342B  3A 31				cmp	dh,[bx+di]
020A:342D  35 2029				xor	ax,2029h
020A:3430  56					push	si
020A:3431  38 2E 3130				cmp	byte ptr ds:[3130h],ch	; (0000:3130=0C3h)
020A:3435  20 73 2F				and	[bp+di+2Fh],dh
020A:3438  6E					db	6Eh
020A:3439  20 53 41				and	[bp+di+41h],dl
020A:343C  36					db	36h
020A:343D  30 32				xor	[bp+si],dh
020A:343F  34 37				xor	al,37h			; '7'
020A:3441  33 2D				xor	bp,[di]
020A:3443  58					pop	ax
020A:3444  42					inc	dx
020A:3445  49					dec	cx
020A:3446  4F					dec	di
020A:3447  46					inc	si
020A:3448  9E					sahf				; Store ah into flags
020A:3449  A4					movsb				; Mov [si] to es:[di]
020A:344A  9D					popf				; Pop flags
020A:344B  A0 9DA1				mov	al,byte ptr ds:[9DA1h]	; (0000:9DA1=9Dh)
020A:344E  A7					cmpsw				; Cmp [si] to es:[di]
020A:344F  A7					cmpsw				; Cmp [si] to es:[di]
020A:3450  6E					db	6Eh
020A:3451  6A					db	6Ah
020A:3452  55					push	bp
020A:3453  C6					db	0C6h
020A:3454  F2					db	0F2h
020A:3455  E1 EE				loopz	$-10h			; Loop if zf=1, cx>0

020A:3457  EB A0				jmp	short $-5Eh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 88

020A:3459  F6 E1				mul	cl			; ax = reg * al
020A:345B  EE					out	dx,al			; port 0C002h ??I/O Non-standard
020A:345C  A0 E9C7				mov	al,byte ptr ds:[0E9C7h]	; (0000:E9C7=6)
020A:345F  EC					in	al,dx			; port 0C002h ??I/O Non-standard
020A:3460  EC					in	al,dx			; port 0C002h ??I/O Non-standard
020A:3461  F5					cmc				; Complement carry
020A:3462  F7 E5				mul	bp			; dx:ax = reg * ax
020A:3464  56					push	si
020A:3465  C0					db	0C0h
020A:3466  07					pop	es
020A:3467  D6					db	0D6h
020A:3468  A0 EFC3				mov	al,byte ptr ds:[0EFC3h]	; (0000:EFC3=7)
020A:346B  ED					in	ax,dx			; port 1, DMA-1 bas&cnt ch 0
020A:346C  ED					in	ax,dx			; port 1, DMA-1 bas&cnt ch 0
020A:346D  F5					cmc				; Complement carry
020A:346E  EE					out	dx,al			; port 1, DMA-1 bas&cnt ch 0
020A:346F  E9 E1E3				jmp	$-1E1Ah
020A:3472  F4					hlt				; Halt processor
020A:3473  E9 EEEF				jmp	$-110Eh
020A:3476  F3					db	0F3h
020A:3477  3E					db	3Eh
020A:3478  1E					push	ds
020A:3479  12 64 1E				adc	ah,[si+1Eh]
020A:347C  6F					db	6Fh
020A:347D  04 33				add	al,33h			; '3'
020A:347F  7D 0F				jge	$+11h			; Jump if > or =
020A:3481  4D					dec	bp
020A:3482  2F					das				; Decimal adjust
020A:3483  00					db	0
020A:3484  00					db	0
020A:3485  00					db	0
020A:3486  00					db	0
020A:3487  00					db	0
020A:3488  00					db	0
020A:3489  00					db	0
020A:348A  00					db	0
020A:348B  00					db	0
020A:348C  00					db	0
020A:348D  00 00				add	[bx+si],al
020A:348F  00 37				add	[bx],dh
020A:3491  05 1B3D				add	ax,1B3Dh
020A:3494  00 00				add	[bx+si],al
020A:3496  46					inc	si
020A:3497  32 00				xor	al,[bx+si]
020A:3499  2E: 8C 06 00C0			mov	word ptr cs:[0C0h],es	; (020A:00C0=325Eh)
020A:349E  E8 3F57				call	$+3F5Ah
020A:34A1  9A 7E4B:54C4				call	far ptr $+2023h
020A:34A6  9A 7E4B:5B60				call	far ptr $+26BAh
020A:34AB  B4 03				mov	ah,3
020A:34AD  32 FF				xor	bh,bh			; Zero register
020A:34AF  9A 1481:3240				call	far ptr $-26Fh
020A:34B4  89 0E 1D8D				mov	word ptr ds:[1D8Dh],cx	; (0000:1D8D=0)
020A:34B8  9A 7E4B:5A18				call	far ptr $+2560h
020A:34BD  3C 03				cmp	al,3
020A:34BF  72 06				jb	$+8			; Jump if below
020A:34C1  C7 06 1D62 0020			mov	word ptr ds:[1D62h],20h	; (0000:1D62=7272h)
020A:34C7  E8 3EDA				call	$+3EDDh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 89

020A:34CA  E8 8287				call	$-7D76h
020A:34CD  BE 0080				mov	si,80h
020A:34D0  E8 43CD				call	$+43D0h
020A:34D3  2E: A1 00C0				mov	ax,word ptr cs:[0C0h]	; (020A:00C0=325Eh)
020A:34D7  A3 448F				mov	word ptr ds:[448Fh],ax	; (0000:448F=21CDh)
020A:34DA  BF 5808				mov	di,5808h
020A:34DD  03 FE				add	di,si
020A:34DF  B8 7E4B				mov	ax,7E4Bh
020A:34E2  8E C0				mov	es,ax
020A:34E4  26: 80 85 0100 CD			add	byte ptr es:[100h][di],0CDh	; (7E4B:0100=0FFh)
020A:34EA  C6 06 17A2 00			mov	byte ptr ds:[17A2h],0	; (0000:17A2=0AFh)
020A:34EF  83 3E 1321 00			cmp	word ptr ds:[1321h],0	; (0000:1321=0)
020A:34F4  74 14				je	$+16h			; Jump if equal
020A:34F6  BE 1321				mov	si,1321h
020A:34F9  8B C6				mov	ax,si
020A:34FB  05 0004				add	ax,4
020A:34FE  A3 4018				mov	word ptr ds:[4018h],ax	; (0000:4018=0)
020A:3501  E8 0730				call	$+733h
020A:3504  72 04				jc	$+6			; Jump if carry Set
020A:3506  89 16 131F				mov	word ptr ds:[131Fh],dx	; (0000:131F=0)
020A:350A  B9 0072				mov	cx,72h
020A:350D  81 E9 0065				sub	cx,65h
020A:3511  BF 01C5				mov	di,1C5h
020A:3514  BE 0065				mov	si,65h
020A:3517  B8 0547				mov	ax,547h
020A:351A  8E D8				mov	ds,ax
020A:351C  E8 439F				call	$+43A2h
020A:351F  FC					cld				; Clear direction
020A:3520  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:3522  E8 437B				call	$+437Eh
020A:3525  9A 7E4B:5928				call	far ptr $+2403h
020A:352A  B6 00				mov	dh,0
020A:352C  E8 2539				call	$+253Ch
020A:352F  B4 01				mov	ah,1
020A:3531  9A 1481:3A5C				call	far ptr $+52Bh
020A:3536  BF 1141				mov	di,1141h
020A:3539  81 EF 1023				sub	di,1023h
020A:353D  9A 1481:0984				call	far ptr $-2BB9h
020A:3542  8C C8				mov	ax,cs
020A:3544  50					push	ax
020A:3545  B8 5B90				mov	ax,5B90h
020A:3548  A3 4724				mov	word ptr ds:[4724h],ax	; (ss:4724=2E05h)
020A:354B  E8 4391				call	$+4394h
020A:354E  A3 4726				mov	word ptr ds:[4726h],ax	; (ss:4726=0B6A1h)
020A:3551  58					pop	ax
020A:3552  FF 1E 4724				call	dword ptr ds:[4724h]	; (ss:4724=2E05h)
020A:3556  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (ss:17B1=8Bh)
020A:355B  74 07				je	$+9			; Jump if equal
020A:355D  80 3E 17AD 01			cmp	byte ptr ds:[17ADh],1	; (ss:17AD=89h)
020A:3562  75 45				jne	$+47h			; Jump if not equal
020A:3564  E8 4357				call	$+435Ah
020A:3567  BF 00E8				mov	di,0E8h
020A:356A  B0 2A				mov	al,2Ah			; '*'
020A:356C  B9 0029				mov	cx,29h
020A:356F  FC					cld				; Clear direction
020A:3570  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:3572  BF 0188				mov	di,188h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 90

020A:3575  B9 0029				mov	cx,29h
020A:3578  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:357A  B0 20				mov	al,20h			; ' '
020A:357C  AA					stosb				; Store al to es:[di]
020A:357D  BE 006F				mov	si,6Fh
020A:3580  BF 0138				mov	di,138h
020A:3583  B9 0027				mov	cx,27h
020A:3586  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:3588  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (ss:1326=82h)
020A:358C  A0 1209				mov	al,byte ptr ds:[1209h]	; (ss:1209=0FDh)
020A:358F  88 47 59				mov	[bx+59h],al
020A:3592  88 47 46				mov	[bx+46h],al
020A:3595  88 47 5B				mov	[bx+5Bh],al
020A:3598  B0 07				mov	al,7
020A:359A  88 47 57				mov	[bx+57h],al
020A:359D  88 47 58				mov	[bx+58h],al
020A:35A0  88 47 5A				mov	[bx+5Ah],al
020A:35A3  88 47 42				mov	[bx+42h],al
020A:35A6  88 47 45				mov	[bx+45h],al
020A:35A9  9A 1481:31BC				call	far ptr $-3EDh
020A:35AE  E8 23FF				call	$+2402h
020A:35B1  E8 7FA8				call	$+7FABh
020A:35B4  80 3E 17AD 01			cmp	byte ptr ds:[17ADh],1	; (ss:17AD=89h)
020A:35B9  75 14				jne	$+16h			; Jump if not equal
020A:35BB  53					push	bx
020A:35BC  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (ss:1326=82h)
020A:35C0  C6 47 41 07				mov	byte ptr [bx+41h],7
020A:35C4  C6 06 1207 07			mov	byte ptr ds:[1207h],7	; (ss:1207=32h)
020A:35C9  C6 06 1208 07			mov	byte ptr ds:[1208h],7	; (ss:1208=0EDh)
020A:35CE  5B					pop	bx
020A:35CF  9A 1481:BC90				call	far ptr $-793Fh
020A:35D4  80 3E 2FE0 00			cmp	byte ptr ds:[2FE0h],0	; (ss:2FE0=96h)
020A:35D9  74 42				je	$+44h			; Jump if equal
020A:35DB  BF 2FE0				mov	di,2FE0h
020A:35DE  B0 00				mov	al,0
020A:35E0  9A 1481:2C48				call	far ptr $-998h
020A:35E5  9A 1481:2CD0				call	far ptr $-915h
020A:35EA  A2 1F83				mov	byte ptr ds:[1F83h],al	; (ss:1F83=0F6h)
020A:35ED  3C 00				cmp	al,0
020A:35EF  74 2C				je	$+2Eh			; Jump if equal
020A:35F1  50					push	ax
020A:35F2  57					push	di
020A:35F3  BE 2FE0				mov	si,2FE0h
020A:35F6  BF 1EB2				mov	di,1EB2h
020A:35F9  8B CB				mov	cx,bx
020A:35FB  FC					cld				; Clear direction
020A:35FC  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:35FE  5F					pop	di
020A:35FF  4F					dec	di
020A:3600  9A 1481:BBC0				call	far ptr $-7A40h
020A:3605  58					pop	ax
020A:3606  83 FB 0C				cmp	bx,0Ch
020A:3609  77 0D				ja	$+0Fh			; Jump if above
020A:360B  3C 01				cmp	al,1
020A:360D  74 22				je	$+24h			; Jump if equal
020A:360F  80 3E 326C 01			cmp	byte ptr ds:[326Ch],1	; (ss:326C=2)
020A:3614  75 10				jne	$+12h			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 91

020A:3616  EB 4D				jmp	short $+4Fh
							                        ;* No entry point to code
020A:3618  C6 06 1F83 00			mov	byte ptr ds:[1F83h],0	; (ss:1F83=0F6h)
020A:361D  80 3E 326C 01			cmp	byte ptr ds:[326Ch],1	; (ss:326C=2)
020A:3622  75 02				jne	$+4			; Jump if not equal
020A:3624  EB 4E				jmp	short $+50h
							                        ;* No entry point to code
020A:3626  BD 2FE0				mov	bp,2FE0h
020A:3629  BE 325E				mov	si,325Eh
020A:362C  9A 1481:6800				call	far ptr $+31D4h
020A:3631  B4 2A				mov	ah,2Ah			; '*'
020A:3633  9A 1481:2F90				call	far ptr $-6A3h
020A:3638  E8 21C1				call	$+21C4h
020A:363B  BA 2FE0				mov	dx,2FE0h
020A:363E  B4 3D				mov	ah,3Dh			; '='
020A:3640  B0 00				mov	al,0
020A:3642  B9 0000				mov	cx,0
020A:3645  CD 21				int	21h			; DOS Services  ah=function 3Dh
										;  open file, al=mode,name@ds:dx
020A:3647  A3 302D				mov	word ptr ds:[302Dh],ax	; (ss:302D=14BFh)
020A:364A  73 12				jnc	$+14h			; Jump if carry=0
020A:364C  80 3E 1F83 01			cmp	byte ptr ds:[1F83h],1	; (ss:1F83=0F6h)
020A:3651  77 09				ja	$+0Bh			; Jump if above
020A:3653  75 05				jnz	$+7			; Jump if not zero
020A:3655  B3 01				mov	bl,1
020A:3657  E9 3A2C				jmp	$+3A2Fh
020A:365A  EB 18				jmp	short $+1Ah
020A:365C  EB 07				jmp	short $+9
							                        ;* No entry point to code
020A:365E  9A 1481:0C30				call	far ptr $-2A2Eh
020A:3663  EB 0F				jmp	short $+11h
							                        ;* No entry point to code
020A:3665  E8 614C				call	$+614Fh
020A:3668  72 07				jc	$+9			; Jump if carry Set
020A:366A  9A 1481:55DC				call	far ptr $+1F72h
020A:366F  EB 03				jmp	short $+5
020A:3671  E9 3B60				jmp	$+3B63h
							                        ;* No entry point to code
020A:3674  C6 06 17A2 01			mov	byte ptr ds:[17A2h],1	; (ss:17A2=89h)
020A:3679  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (ss:1F82=0E2h)
020A:367D  9A 1481:2F90				call	far ptr $-6EDh
020A:3682  E8 2177				call	$+217Ah
020A:3685  80 3E 3E4B 01			cmp	byte ptr ds:[3E4Bh],1	; (ss:3E4B=6)
020A:368A  75 08				jne	$+0Ah			; Jump if not equal
020A:368C  C6 06 3E4B 00			mov	byte ptr ds:[3E4Bh],0	; (ss:3E4B=6)
020A:3691  E9 112C				jmp	$+112Fh
							                        ;* No entry point to code
020A:3694  E8 4227				call	$+422Ah
020A:3697  2E: 80 3E 00C8 01			cmp	byte ptr cs:[0C8h],1	; (020A:00C8=6)
020A:369D  74 20				je	$+22h			; Jump if equal
020A:369F  B4 07				mov	ah,7
020A:36A1  CD 21				int	21h			; DOS Services  ah=function 07h
										;  get keybd char al, no echo
020A:36A3  3C 00				cmp	al,0
020A:36A5  75 0D				jne	$+0Fh			; Jump if not equal
020A:36A7  B4 07				mov	ah,7
020A:36A9  CD 21				int	21h			; DOS Services  ah=function 07h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 92

										;  get keybd char al, no echo
020A:36AB  3C 3B				cmp	al,3Bh			; ';'
020A:36AD  75 03				jne	$+5			; Jump if not equal
020A:36AF  E9 1C19				jmp	$+1C1Ch
020A:36B2  EB 3B				jmp	short $+3Dh
							                        ;* No entry point to code
020A:36B4  3C 3F				cmp	al,3Fh			; '?'
020A:36B6  75 03				jne	$+5			; Jump if not equal
020A:36B8  E9 1C10				jmp	$+1C13h
							                        ;* No entry point to code
020A:36BB  3C 1B				cmp	al,1Bh
020A:36BD  75 03				jne	$+5			; Jump if not equal
020A:36BF  E9 194F				jmp	$+1952h
							                        ;* No entry point to code
020A:36C2  3C 2B				cmp	al,2Bh			; '+'
020A:36C4  75 03				jne	$+5			; Jump if not equal
020A:36C6  E9 1D8E				jmp	$+1D91h
							                        ;* No entry point to code
020A:36C9  3C 80				cmp	al,80h
020A:36CB  73 E5				jae	$-19h			; Jump if above or =
020A:36CD  A8 40				test	al,40h			; '@'
020A:36CF  74 E1				jz	$-1Dh			; Jump if zero
020A:36D1  24 5F				and	al,5Fh			; '_'
020A:36D3  B9 3FE4				mov	cx,3FE4h
020A:36D6  81 E9 3FCB				sub	cx,3FCBh
020A:36DA  BF 3FCB				mov	di,3FCBh
020A:36DD  FC					cld				; Clear direction
020A:36DE  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:36E0  E3 0D				jcxz	$+0Fh			; Jump if cx=0
020A:36E2  4F					dec	di
020A:36E3  81 EF 3FCB				sub	di,3FCBh
020A:36E7  D1 E7				shl	di,1			; Shift w/zeros fill
020A:36E9  81 C7 3FE4				add	di,3FE4h
020A:36ED  FF 25				jmp	word ptr [di]		;*
							                        ;* No entry point to code
020A:36EF  9A 1481:3128				call	far ptr $-5C7h
020A:36F4  EB 9E				jmp	short $-60h
							                        ;* No entry point to code
020A:36F6  E8 2477				call	$+247Ah
020A:36F9  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020A:36FD  B4 22				mov	ah,22h			; '"'
020A:36FF  9A 1481:2F90				call	far ptr $-76Fh
020A:3704  E8 20F5				call	$+20F8h
020A:3707  FF 36 3D41				push	word ptr ds:[3D41h]	; (ss:3D41=3E80h)
020A:370B  C6 06 3D40 01			mov	byte ptr ds:[3D40h],1	; (ss:3D40=26h)
020A:3710  BE 0631				mov	si,631h
020A:3713  B9 0BD1				mov	cx,0BD1h
020A:3716  81 E9 0631				sub	cx,631h
020A:371A  80 3E 3D40 01			cmp	byte ptr ds:[3D40h],1	; (ss:3D40=26h)
020A:371F  74 0A				je	$+0Ch			; Jump if equal
020A:3721  BE 0BD1				mov	si,0BD1h
020A:3724  B9 1171				mov	cx,1171h
020A:3727  81 E9 0BD1				sub	cx,0BD1h
020A:372B  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (ss:1329=36h)
020A:3730  75 26				jne	$+28h			; Jump if not equal
020A:3732  B4 02				mov	ah,2
020A:3734  32 FF				xor	bh,bh			; Zero register
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 93

020A:3736  BA 0500				mov	dx,500h
020A:3739  9A 1481:3240				call	far ptr $-4F9h
020A:373E  49					dec	cx
020A:373F  E8 417F				call	$+4182h
020A:3742  33 ED				xor	bp,bp			; Zero register
020A:3744  26: 8A 14				mov	dl,es:[si]
020A:3747  80 FA F4				cmp	dl,0F4h
020A:374A  72 02				jb	$+4			; Jump if below
020A:374C  B2 20				mov	dl,20h			; ' '
020A:374E  9A 1481:0840				call	far ptr $-2F0Eh
020A:3753  46					inc	si
020A:3754  E2 EC				loop	$-12h			; Loop if cx > 0

020A:3756  EB 72				jmp	short $+74h
							                        ;* No entry point to code
020A:3758  E8 20ED				call	$+20F0h
020A:375B  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (ss:131B=448Bh)
020A:375F  BF 0320				mov	di,320h
020A:3762  03 3E 131D				add	di,word ptr ds:[131Dh]	; (ss:131D=7501h)
020A:3766  E8 413A				call	$+413Dh
020A:3769  B7 07				mov	bh,7
020A:376B  FC					cld				; Clear direction
020A:376C  8A DF				mov	bl,bh
020A:376E  80 3C FE				cmp	byte ptr [si],0FEh
020A:3771  75 0F				jne	$+11h			; Jump if not equal
020A:3773  80 FF 07				cmp	bh,7
020A:3776  75 04				jne	$+6			; Jump if not equal
020A:3778  B7 0F				mov	bh,0Fh
020A:377A  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:377C  B7 07				mov	bh,7
020A:377E  8A DF				mov	bl,bh
020A:3780  EB 0F				jmp	short $+11h
							                        ;* No entry point to code
020A:3782  80 3C F4				cmp	byte ptr [si],0F4h
020A:3785  72 15				jb	$+17h			; Jump if below
020A:3787  1E					push	ds
020A:3788  E8 4115				call	$+4118h
020A:378B  8A 1E 1207				mov	bl,byte ptr ds:[1207h]	; (ss:1207=32h)
020A:378F  1F					pop	ds
020A:3790  FC					cld				; Clear direction
020A:3791  B0 20				mov	al,20h			; ' '
020A:3793  AA					stosb				; Store al to es:[di]
020A:3794  46					inc	si
020A:3795  26: 88 1D				mov	es:[di],bl
020A:3798  47					inc	di
020A:3799  49					dec	cx
020A:379A  EB 0E				jmp	short $+10h
							                        ;* No entry point to code
020A:379C  80 3C 80				cmp	byte ptr [si],80h
020A:379F  72 09				jb	$+0Bh			; Jump if below
020A:37A1  1E					push	ds
020A:37A2  E8 40FB				call	$+40FEh
020A:37A5  8A 1E 1206				mov	bl,byte ptr ds:[1206h]	; (ss:1206=4Eh)
020A:37A9  1F					pop	ds
020A:37AA  AC					lodsb				; String [si] to al
020A:37AB  1E					push	ds
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 94

020A:37AC  E8 40F1				call	$+40F4h
020A:37AF  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (ss:17B1=8Bh)
020A:37B4  75 0C				jne	$+0Eh			; Jump if not equal
020A:37B6  3C 80				cmp	al,80h
020A:37B8  72 08				jb	$+0Ah			; Jump if below
020A:37BA  53					push	bx
020A:37BB  BB 17CE				mov	bx,17CEh
020A:37BE  2C 80				sub	al,80h
020A:37C0  D7					xlat				; al=[al+[bx]] table
020A:37C1  5B					pop	bx
020A:37C2  1F					pop	ds
020A:37C3  AA					stosb				; Store al to es:[di]
020A:37C4  26: 88 1D				mov	es:[di],bl
020A:37C7  47					inc	di
020A:37C8  E2 A2				loop	$-5Ch			; Loop if cx > 0

020A:37CA  E8 40D3				call	$+40D6h
020A:37CD  E8 20A4				call	$+20A7h
020A:37D0  BD 3D3C				mov	bp,3D3Ch
020A:37D3  80 3E 3D40 01			cmp	byte ptr ds:[3D40h],1	; (ss:3D40=26h)
020A:37D8  74 03				je	$+5			; Jump if equal
020A:37DA  BD 3D41				mov	bp,3D41h
020A:37DD  3E: 8B 5E 00				mov	bx,ds:[bp]
020A:37E1  E8 27B4				call	$+27B7h
020A:37E4  B4 07				mov	ah,7
020A:37E6  CD 21				int	21h			; DOS Services  ah=function 07h
										;  get keybd char al, no echo
020A:37E8  3C 00				cmp	al,0
020A:37EA  75 0E				jne	$+10h			; Jump if not equal
020A:37EC  B4 07				mov	ah,7
020A:37EE  CD 21				int	21h			; DOS Services  ah=function 07h
										;  get keybd char al, no echo
020A:37F0  3C 49				cmp	al,49h			; 'I'
020A:37F2  74 39				je	$+3Bh			; Jump if equal
020A:37F4  3C 51				cmp	al,51h			; 'Q'
020A:37F6  74 35				je	$+37h			; Jump if equal
020A:37F8  EB 20				jmp	short $+22h
							                        ;* No entry point to code
020A:37FA  3C 31				cmp	al,31h			; '1'
020A:37FC  74 1F				je	$+21h			; Jump if equal
020A:37FE  3C 32				cmp	al,32h			; '2'
020A:3800  74 23				je	$+25h			; Jump if equal
020A:3802  24 5F				and	al,5Fh			; '_'
020A:3804  3C 41				cmp	al,41h			; 'A'
020A:3806  72 12				jb	$+14h			; Jump if below
020A:3808  80 3E 3D40 01			cmp	byte ptr ds:[3D40h],1	; (ss:3D40=26h)
020A:380D  74 07				je	$+9			; Jump if equal
020A:380F  3C 4D				cmp	al,4Dh			; 'M'
020A:3811  76 2D				jbe	$+2Fh			; Jump if below or =
020A:3813  E9 00C2				jmp	$+0C5h
							                        ;* No entry point to code
020A:3816  3C 5A				cmp	al,5Ah			; 'Z'
020A:3818  76 26				jbe	$+28h			; Jump if below or =
020A:381A  E9 00BB				jmp	$+0BEh
							                        ;* No entry point to code
020A:381D  C6 06 3D40 01			mov	byte ptr ds:[3D40h],1	; (ss:3D40=26h)
020A:3822  E9 FEEB				jmp	$-112h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 95

							                        ;* No entry point to code
020A:3825  C6 06 3D40 02			mov	byte ptr ds:[3D40h],2	; (ss:3D40=26h)
020A:382A  E9 FEE3				jmp	$-11Ah
							                        ;* No entry point to code
020A:382D  FE 06 3D40				inc	byte ptr ds:[3D40h]	; (ss:3D40=26h)
020A:3831  80 3E 3D40 03			cmp	byte ptr ds:[3D40h],3	; (ss:3D40=26h)
020A:3836  72 05				jb	$+7			; Jump if below
020A:3838  C6 06 3D40 01			mov	byte ptr ds:[3D40h],1	; (ss:3D40=26h)
020A:383D  E9 FED0				jmp	$-12Dh
							                        ;* No entry point to code
020A:3840  3C 50				cmp	al,50h			; 'P'
020A:3842  77 29				ja	$+2Bh			; Jump if above
020A:3844  2C 41				sub	al,41h			; 'A'
020A:3846  BB 8000				mov	bx,8000h
020A:3849  8A C8				mov	cl,al
020A:384B  D3 CB				ror	bx,cl			; Rotate
020A:384D  3E: 8B 56 00				mov	dx,ds:[bp]
020A:3851  8B CA				mov	cx,dx
020A:3853  23 D3				and	dx,bx
020A:3855  F7 D2				not	dx
020A:3857  23 D3				and	dx,bx
020A:3859  F7 D3				not	bx
020A:385B  23 CB				and	cx,bx
020A:385D  0B CA				or	cx,dx
020A:385F  F7 06 3D33 0002			test	word ptr ds:[3D33h],2	; (ss:3D33=3F4Bh)
020A:3865  75 62				jnz	$+64h			; Jump if not zero
020A:3867  3E: 89 4E 00				mov	ds:[bp],cx
020A:386B  EB 61				jmp	short $+63h
							                        ;* No entry point to code
020A:386D  3C 54				cmp	al,54h			; 'T'
020A:386F  77 2F				ja	$+31h			; Jump if above
020A:3871  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (ss:2317=8Bh)
020A:3876  74 51				je	$+53h			; Jump if equal
020A:3878  2C 51				sub	al,51h			; 'Q'
020A:387A  B3 04				mov	bl,4
020A:387C  8A C8				mov	cl,al
020A:387E  D2 CB				ror	bl,cl			; Rotate
020A:3880  8A 16 3D9C				mov	dl,byte ptr ds:[3D9Ch]	; (ss:3D9C=70h)
020A:3884  8A CA				mov	cl,dl
020A:3886  22 D3				and	dl,bl
020A:3888  F6 D2				not	dl
020A:388A  22 D3				and	dl,bl
020A:388C  F6 D3				not	bl
020A:388E  22 CB				and	cl,bl
020A:3890  0A CA				or	cl,dl
020A:3892  F7 06 3D33 0002			test	word ptr ds:[3D33h],2	; (ss:3D33=3F4Bh)
020A:3898  75 2F				jnz	$+31h			; Jump if not zero
020A:389A  88 0E 3D9C				mov	byte ptr ds:[3D9Ch],cl	; (ss:3D9C=70h)
020A:389E  EB 2E				jmp	short $+30h
							                        ;* No entry point to code
020A:38A0  2C 55				sub	al,55h			; 'U'
020A:38A2  BB 0080				mov	bx,80h
020A:38A5  8A C8				mov	cl,al
020A:38A7  D3 CB				ror	bx,cl			; Rotate
020A:38A9  8B 16 3D3E				mov	dx,word ptr ds:[3D3Eh]	; (ss:3D3E=3F74h)
020A:38AD  8B CA				mov	cx,dx
020A:38AF  23 D3				and	dx,bx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 96

020A:38B1  F7 D2				not	dx
020A:38B3  23 D3				and	dx,bx
020A:38B5  F7 D3				not	bx
020A:38B7  23 CB				and	cx,bx
020A:38B9  0B CA				or	cx,dx
020A:38BB  F7 06 3D33 0002			test	word ptr ds:[3D33h],2	; (ss:3D33=3F4Bh)
020A:38C1  75 06				jnz	$+8			; Jump if not zero
020A:38C3  89 0E 3D3E				mov	word ptr ds:[3D3Eh],cx	; (ss:3D3E=3F74h)
020A:38C7  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:38C9  9A 1481:3128				call	far ptr $-7A1h
020A:38CE  3E: 8B 5E 00				mov	bx,ds:[bp]
020A:38D2  E8 26C3				call	$+26C6h
020A:38D5  E9 FF0C				jmp	$-0F1h
							                        ;* No entry point to code
020A:38D8  58					pop	ax
020A:38D9  33 06 3D41				xor	ax,word ptr ds:[3D41h]	; (ss:3D41=3E80h)
020A:38DD  A9 0020				test	ax,20h
020A:38E0  74 42				jz	$+44h			; Jump if zero
020A:38E2  A1 3D41				mov	ax,word ptr ds:[3D41h]	; (ss:3D41=3E80h)
020A:38E5  E8 3FCA				call	$+3FCDh
020A:38E8  BF 0000				mov	di,0
020A:38EB  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020A:38EF  74 1B				je	$+1Dh			; Jump if equal
020A:38F1  26: F6 45 0B 01			test	byte ptr es:[di+0Bh],1
020A:38F6  75 0F				jnz	$+11h			; Jump if not zero
020A:38F8  26: 80 65 0E AF			and	byte ptr es:[di+0Eh],0AFh
020A:38FD  A9 0020				test	ax,20h
020A:3900  74 05				jz	$+7			; Jump if zero
020A:3902  26: 80 4D 0E 40			or	byte ptr es:[di+0Eh],40h	; '@'
020A:3907  83 C7 19				add	di,19h
020A:390A  EB DF				jmp	short $-1Fh
							                        ;* No entry point to code
020A:390C  A9 0020				test	ax,20h
020A:390F  74 13				jz	$+15h			; Jump if zero
020A:3911  F7 06 1D60 07E0			test	word ptr ds:[1D60h],7E0h	; (ss:1D60=6C6h)
020A:3917  75 0B				jnz	$+0Dh			; Jump if not zero
020A:3919  C7 06 1D60 0020			mov	word ptr ds:[1D60h],20h	; (ss:1D60=6C6h)
020A:391F  B6 00				mov	dh,0
020A:3921  E8 2144				call	$+2147h
020A:3924  E8 2271				call	$+2274h
020A:3927  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020A:392B  C6 47 67 00				mov	byte ptr [bx+67h],0
020A:392F  C6 06 17A2 01			mov	byte ptr ds:[17A2h],1	; (ss:17A2=89h)
020A:3934  E8 2741				call	$+2744h
020A:3937  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (ss:1F82=0E2h)
020A:393B  9A 1481:2F90				call	far ptr $-9ABh
020A:3940  E8 1EB9				call	$+1EBCh
020A:3943  A0 17A7				mov	al,byte ptr ds:[17A7h]	; (ss:17A7=4)
020A:3946  F6 06 3D9C 07			test	byte ptr ds:[3D9Ch],7	; (ss:3D9C=70h)
020A:394B  74 0C				jz	$+0Eh			; Jump if zero
020A:394D  80 3E 17A7 0A			cmp	byte ptr ds:[17A7h],0Ah	; (ss:17A7=4)
020A:3952  73 05				jae	$+7			; Jump if above or =
020A:3954  B0 0A				mov	al,0Ah
020A:3956  E8 2A37				call	$+2A3Ah
020A:3959  E8 26CC				call	$+26CFh
020A:395C  E9 FD35				jmp	$-2C8h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 97

							                        ;* No entry point to code
020A:395F  E8 220E				call	$+2211h
020A:3962  C6 47 52 00				mov	byte ptr [bx+52h],0
020A:3966  C6 47 39 0F				mov	byte ptr [bx+39h],0Fh
020A:396A  C6 47 79 0F				mov	byte ptr [bx+79h],0Fh
020A:396E  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020A:3972  E8 1D5B				call	$+1D5Eh
020A:3975  B4 02				mov	ah,2
020A:3977  32 FF				xor	bh,bh			; Zero register
020A:3979  BA 1313				mov	dx,1313h
020A:397C  9A 1481:3240				call	far ptr $-73Ch
020A:3981  E8 2604				call	$+2607h
020A:3984  B1 04				mov	cl,4
020A:3986  B3 02				mov	bl,2
020A:3988  BE 0699				mov	si,699h
020A:398B  9A 1481:06C0				call	far ptr $-32CBh
020A:3990  3C 1B				cmp	al,1Bh
020A:3992  75 03				jne	$+5			; Jump if not equal
020A:3994  E9 00AD				jmp	$+0B0h
							                        ;* No entry point to code
020A:3997  80 F9 00				cmp	cl,0
020A:399A  74 03				je	$+5			; Jump if equal
020A:399C  E9 00A0				jmp	$+0A3h
							                        ;* No entry point to code
020A:399F  B9 0080				mov	cx,80h
020A:39A2  BF 0699				mov	di,699h
020A:39A5  E8 0248				call	$+24Bh
020A:39A8  72 03				jc	$+5			; Jump if carry Set
020A:39AA  E9 0092				jmp	$+95h
							                        ;* No entry point to code
020A:39AD  89 16 1CD9				mov	word ptr ds:[1CD9h],dx	; (ss:1CD9=802h)
020A:39B1  B2 3A				mov	dl,3Ah			; ':'
020A:39B3  9A 1481:0840				call	far ptr $-3173h
020A:39B8  B1 04				mov	cl,4
020A:39BA  B3 02				mov	bl,2
020A:39BC  BE 069E				mov	si,69Eh
020A:39BF  9A 1481:06C0				call	far ptr $-32FFh
020A:39C4  3C 1B				cmp	al,1Bh
020A:39C6  74 7C				je	$+7Eh			; Jump if equal
020A:39C8  80 F9 00				cmp	cl,0
020A:39CB  75 72				jne	$+74h			; Jump if not equal
020A:39CD  B9 0080				mov	cx,80h
020A:39D0  BF 069E				mov	di,69Eh
020A:39D3  E8 021A				call	$+21Dh
020A:39D6  73 67				jnc	$+69h			; Jump if carry=0
020A:39D8  E8 3ED7				call	$+3EDAh
020A:39DB  26: 89 16 0002			mov	word ptr es:[2],dx	; (448B:0002=5298h)
020A:39E0  26: 89 16 0017			mov	word ptr es:[17h],dx	; (448B:0017=0A497h)
020A:39E5  26: 83 3E 0006 FF			cmp	word ptr es:[6],0FFFFh	; (448B:0006=6FA6h)
020A:39EB  75 07				jne	$+9			; Jump if not equal
020A:39ED  26: C7 06 0004 0000			mov	word ptr es:[4],0	; (448B:0004=9B94h)
020A:39F4  A1 1CD9				mov	ax,word ptr ds:[1CD9h]	; (ss:1CD9=802h)
020A:39F7  26: A3 0000				mov	word ptr es:[0],ax	; (448B:0000=9B52h)
020A:39FB  26: A3 0015				mov	word ptr es:[15h],ax	; (448B:0015=0A8A0h)
020A:39FF  26: A3 0006				mov	word ptr es:[6],ax	; (448B:0006=6FA6h)
020A:3A03  26: A3 0008				mov	word ptr es:[8],ax	; (448B:0008=5E63h)
020A:3A07  26: C6 06 000E 00			mov	byte ptr es:[0Eh],0	; (448B:000E=62h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 98

020A:3A0D  26: 83 3E 000A FF			cmp	word ptr es:[0Ah],0FFFFh	; (448B:000A=0AC52h)
020A:3A13  75 19				jne	$+1Bh			; Jump if not equal
020A:3A15  26: C7 06 000A 0000			mov	word ptr es:[0Ah],0	; (448B:000A=0AC52h)
020A:3A1C  26: C7 06 000C 0041			mov	word ptr es:[0Ch],41h	; (448B:000C=6F98h)
020A:3A23  80 3E 1CF1 00			cmp	byte ptr ds:[1CF1h],0	; (ss:1CF1=83h)
020A:3A28  77 04				ja	$+6			; Jump if above
020A:3A2A  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (ss:1CF1=83h)
020A:3A2E  E8 3E8D				call	$+3E90h
020A:3A31  E8 331C				call	$+331Fh
020A:3A34  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (ss:1F82=0E2h)
020A:3A38  9A 1481:2F90				call	far ptr $-0AA8h
020A:3A3D  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:3A3F  9A 1481:3128				call	far ptr $-917h
020A:3A44  E8 245D				call	$+2460h
020A:3A47  E8 214E				call	$+2151h
020A:3A4A  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020A:3A4E  C6 47 79 07				mov	byte ptr [bx+79h],7
020A:3A52  C6 47 67 00				mov	byte ptr [bx+67h],0
020A:3A56  E8 2523				call	$+2526h
020A:3A59  E8 1DA0				call	$+1DA3h
020A:3A5C  E9 FC35				jmp	$-3C8h
							                        ;* No entry point to code
020A:3A5F  8A 36 1F85				mov	dh,byte ptr ds:[1F85h]	; (ss:1F85=1Fh)
020A:3A63  FE C6				inc	dh
020A:3A65  A0 17A7				mov	al,byte ptr ds:[17A7h]	; (ss:17A7=4)
020A:3A68  80 FE 07				cmp	dh,7
020A:3A6B  76 08				jbe	$+0Ah			; Jump if below or =
020A:3A6D  B6 01				mov	dh,1
020A:3A6F  3C 09				cmp	al,9
020A:3A71  75 02				jne	$+4			; Jump if not equal
020A:3A73  B0 04				mov	al,4
020A:3A75  88 36 1F85				mov	byte ptr ds:[1F85h],dh	; (ss:1F85=1Fh)
020A:3A79  80 FE 01				cmp	dh,1
020A:3A7C  76 06				jbe	$+8			; Jump if below or =
020A:3A7E  3C 04				cmp	al,4
020A:3A80  75 02				jne	$+4			; Jump if not equal
020A:3A82  B0 12				mov	al,12h
020A:3A84  9A 1481:08F0				call	far ptr $-3194h
020A:3A89  E8 2904				call	$+2907h
020A:3A8C  9A 1481:31F8				call	far ptr $-894h
020A:3A91  E8 2410				call	$+2413h
020A:3A94  E8 1D65				call	$+1D68h
020A:3A97  E9 FBFA				jmp	$-403h
							                        ;* No entry point to code
020A:3A9A  E8 20D3				call	$+20D6h
020A:3A9D  C6 47 52 07				mov	byte ptr [bx+52h],7
020A:3AA1  C6 47 3C 0F				mov	byte ptr [bx+3Ch],0Fh
020A:3AA5  C6 47 4F 0F				mov	byte ptr [bx+4Fh],0Fh
020A:3AA9  C6 06 066E 20			mov	byte ptr ds:[66Eh],20h	; (ss:066E=5) ' '
020A:3AAE  B4 1E				mov	ah,1Eh
020A:3AB0  BA 1238				mov	dx,1238h
020A:3AB3  9A 1481:2F90				call	far ptr $-0B23h
020A:3AB8  3C 00				cmp	al,0
020A:3ABA  74 0B				je	$+0Dh			; Jump if equal
020A:3ABC  8A D0				mov	dl,al
020A:3ABE  80 EA 41				sub	dl,41h			; 'A'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 99

020A:3AC1  8A DA				mov	bl,dl
020A:3AC3  B4 0E				mov	ah,0Eh
020A:3AC5  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:3AC7  B4 19				mov	ah,19h
020A:3AC9  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020A:3ACB  A2 1D90				mov	byte ptr ds:[1D90h],al	; (ss:1D90=0Fh)
020A:3ACE  04 61				add	al,61h			; 'a'
020A:3AD0  A2 066E				mov	byte ptr ds:[66Eh],al	; (ss:066E=5)
020A:3AD3  E8 1EDA				call	$+1EDDh
020A:3AD6  8A 16 1D8F				mov	dl,byte ptr ds:[1D8Fh]	; (ss:1D8F=3Eh)
020A:3ADA  B4 0E				mov	ah,0Eh
020A:3ADC  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:3ADE  E8 20B7				call	$+20BAh
020A:3AE1  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020A:3AE5  C6 47 4F 07				mov	byte ptr [bx+4Fh],7
020A:3AE9  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (ss:1F82=0E2h)
020A:3AED  9A 1481:2F90				call	far ptr $-0B5Dh
020A:3AF2  E8 2487				call	$+248Ah
020A:3AF5  E8 1D04				call	$+1D07h
020A:3AF8  E9 FB99				jmp	$-464h
020A:3AFB  E8 2072				call	$+2075h
020A:3AFE  C6 47 52 00				mov	byte ptr [bx+52h],0
020A:3B02  C6 47 3A 0F				mov	byte ptr [bx+3Ah],0Fh
020A:3B06  C6 47 7A 0F				mov	byte ptr [bx+7Ah],0Fh
020A:3B0A  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020A:3B0E  80 0E 1782 02			or	byte ptr ds:[1782h],2	; (ss:1782=73h)
020A:3B13  E8 238E				call	$+2391h
020A:3B16  E8 1BB7				call	$+1BBAh
020A:3B19  B4 02				mov	ah,2
020A:3B1B  32 FF				xor	bh,bh			; Zero register
020A:3B1D  BA 1418				mov	dx,1418h
020A:3B20  9A 1481:3240				call	far ptr $-8E0h
020A:3B25  E8 2460				call	$+2463h
020A:3B28  B1 04				mov	cl,4
020A:3B2A  B3 02				mov	bl,2
020A:3B2C  BE 06EE				mov	si,6EEh
020A:3B2F  9A 1481:06C0				call	far ptr $-346Fh
020A:3B34  3C 1B				cmp	al,1Bh
020A:3B36  74 73				je	$+75h			; Jump if equal
020A:3B38  80 F9 00				cmp	cl,0
020A:3B3B  75 69				jne	$+6Bh			; Jump if not equal
020A:3B3D  B9 0080				mov	cx,80h
020A:3B40  BF 06EE				mov	di,6EEh
020A:3B43  E8 00AA				call	$+0ADh
020A:3B46  73 5E				jnc	$+60h			; Jump if carry=0
020A:3B48  E8 3D67				call	$+3D6Ah
020A:3B4B  26: 89 16 0004			mov	word ptr es:[4],dx	; (448B:0004=9B94h)
020A:3B50  26: 83 3E 0000 FF			cmp	word ptr es:[0],0FFFFh	; (448B:0000=9B52h)
020A:3B56  75 38				jne	$+3Ah			; Jump if not equal
020A:3B58  33 C0				xor	ax,ax			; Zero register
020A:3B5A  26: A3 0000				mov	word ptr es:[0],ax	; (448B:0000=9B52h)
020A:3B5E  26: A3 0002				mov	word ptr es:[2],ax	; (448B:0002=5298h)
020A:3B62  26: A3 0000				mov	word ptr es:[0],ax	; (448B:0000=9B52h)
020A:3B66  26: A3 0006				mov	word ptr es:[6],ax	; (448B:0006=6FA6h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 100

020A:3B6A  26: A3 0008				mov	word ptr es:[8],ax	; (448B:0008=5E63h)
020A:3B6E  26: A2 000E				mov	byte ptr es:[0Eh],al	; (448B:000E=62h)
020A:3B72  26: 83 3E 000A FF			cmp	word ptr es:[0Ah],0FFFFh	; (448B:000A=0AC52h)
020A:3B78  75 0B				jne	$+0Dh			; Jump if not equal
020A:3B7A  26: A3 000A				mov	word ptr es:[0Ah],ax	; (448B:000A=0AC52h)
020A:3B7E  26: C7 06 000C 0041			mov	word ptr es:[0Ch],41h	; (448B:000C=6F98h)
020A:3B85  80 3E 1CF1 00			cmp	byte ptr ds:[1CF1h],0	; (ss:1CF1=83h)
020A:3B8A  77 04				ja	$+6			; Jump if above
020A:3B8C  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (ss:1CF1=83h)
020A:3B90  C6 06 1782 01			mov	byte ptr ds:[1782h],1	; (ss:1782=73h)
020A:3B95  E8 3D26				call	$+3D29h
020A:3B98  E8 31B5				call	$+31B8h
020A:3B9B  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (ss:1F82=0E2h)
020A:3B9F  9A 1481:2F90				call	far ptr $-0C0Fh
020A:3BA4  EB 0D				jmp	short $+0Fh
020A:3BA6  9A 1481:3128				call	far ptr $-0A7Eh
020A:3BAB  80 26 1782 FD			and	byte ptr ds:[1782h],0FDh	; (ss:1782=73h)
020A:3BB0  E8 22F1				call	$+22F4h
020A:3BB3  E8 1FE2				call	$+1FE5h
020A:3BB6  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020A:3BBA  C6 47 7A 07				mov	byte ptr [bx+7Ah],7
020A:3BBE  C6 47 67 00				mov	byte ptr [bx+67h],0
020A:3BC2  E8 23B7				call	$+23BAh
020A:3BC5  E8 1C34				call	$+1C37h
020A:3BC8  E9 FAC9				jmp	$-534h
020A:3BCB  E8 3CF0				call	$+3CF3h
020A:3BCE  B0 41				mov	al,41h			; 'A'
020A:3BD0  80 3E 2317 01			cmp	byte ptr ds:[2317h],1	; (ss:2317=8Bh)
020A:3BD5  74 02				je	$+4			; Jump if equal
020A:3BD7  B0 4C				mov	al,4Ch			; 'L'
020A:3BD9  E8 03B0				call	$+3B3h
020A:3BDC  9A 1481:31BC				call	far ptr $-0A20h
020A:3BE1  E8 1C18				call	$+1C1Bh
020A:3BE4  E9 FAAD				jmp	$-550h
020A:3BE7  00					db	0
020A:3BE8  00					db	0
020A:3BE9  00					db	0
020A:3BEA  00					db	0
020A:3BEB  00					db	0
020A:3BEC  00					db	0
020A:3BED  00 00				add	[bx+si],al
020A:3BEF  00 53 32				add	[bp+di+32h],dl
020A:3BF2  DB					db	0DBh
020A:3BF3  33 D2				xor	dx,dx			; Zero register
020A:3BF5  80 FB 04				cmp	bl,4
020A:3BF8  73 32				jae	$+34h			; Jump if above or =
020A:3BFA  8A 05				mov	al,[di]
020A:3BFC  3C 40				cmp	al,40h			; '@'
020A:3BFE  72 0C				jb	$+0Eh			; Jump if below
020A:3C00  24 DF				and	al,0DFh
020A:3C02  2C 41				sub	al,41h			; 'A'
020A:3C04  3C 06				cmp	al,6
020A:3C06  73 1F				jae	$+21h			; Jump if above or =
020A:3C08  04 0A				add	al,0Ah
020A:3C0A  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:3C0C  2C 30				sub	al,30h			; '0'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 101

020A:3C0E  3C 09				cmp	al,9
020A:3C10  77 15				ja	$+17h			; Jump if above
020A:3C12  32 E4				xor	ah,ah			; Zero register
020A:3C14  FE C3				inc	bl
020A:3C16  51					push	cx
020A:3C17  B1 04				mov	cl,4
020A:3C19  D3 E2				shl	dx,cl			; Shift w/zeros fill
020A:3C1B  59					pop	cx
020A:3C1C  03 D0				add	dx,ax
020A:3C1E  9A 1481:0640				call	far ptr $-35DEh
020A:3C23  73 D0				jnc	$-2Eh			; Jump if carry=0
020A:3C25  EB 08				jmp	short $+0Ah
							                        ;* No entry point to code
020A:3C27  80 FB 01				cmp	bl,1
020A:3C2A  72 03				jb	$+5			; Jump if below
020A:3C2C  F9					stc				; Set carry flag
020A:3C2D  EB 01				jmp	short $+3
							                        ;* No entry point to code
020A:3C2F  F8					clc				; Clear carry flag
020A:3C30  5B					pop	bx
020A:3C31  C3					retn
							                        ;* No entry point to code
020A:3C32  87 DB				xchg	bx,bx
020A:3C34  56					push	si
020A:3C35  80 3C 20				cmp	byte ptr [si],20h	; ' '
020A:3C38  74 0A				je	$+0Ch			; Jump if equal
020A:3C3A  80 3C 09				cmp	byte ptr [si],9
020A:3C3D  74 05				je	$+7			; Jump if equal
020A:3C3F  80 3C 3D				cmp	byte ptr [si],3Dh	; '='
020A:3C42  75 09				jne	$+0Bh			; Jump if not equal
020A:3C44  46					inc	si
020A:3C45  3B 36 4018				cmp	si,word ptr ds:[4018h]	; (020A:4018=0BF1Dh)
020A:3C49  76 EA				jbe	$-14h			; Jump if below or =
020A:3C4B  EB 5D				jmp	short $+5Fh
							                        ;* No entry point to code
020A:3C4D  33 D2				xor	dx,dx			; Zero register
020A:3C4F  B5 04				mov	ch,4
020A:3C51  8A CD				mov	cl,ch
020A:3C53  8A 04				mov	al,[si]
020A:3C55  3C 40				cmp	al,40h			; '@'
020A:3C57  72 0C				jb	$+0Eh			; Jump if below
020A:3C59  24 DF				and	al,0DFh
020A:3C5B  2C 41				sub	al,41h			; 'A'
020A:3C5D  3C 06				cmp	al,6
020A:3C5F  73 24				jae	$+26h			; Jump if above or =
020A:3C61  04 0A				add	al,0Ah
020A:3C63  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:3C65  2C 30				sub	al,30h			; '0'
020A:3C67  3C 09				cmp	al,9
020A:3C69  77 1A				ja	$+1Ch			; Jump if above
020A:3C6B  32 E4				xor	ah,ah			; Zero register
020A:3C6D  03 D0				add	dx,ax
020A:3C6F  D3 C2				rol	dx,cl			; Rotate
020A:3C71  FE CD				dec	ch
020A:3C73  80 FD 00				cmp	ch,0
020A:3C76  74 07				je	$+9			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 102

020A:3C78  46					inc	si
020A:3C79  3B 36 4018				cmp	si,word ptr ds:[4018h]	; (020A:4018=0BF1Dh)
020A:3C7D  76 D4				jbe	$-2Ah			; Jump if below or =
020A:3C7F  46					inc	si
020A:3C80  D3 CA				ror	dx,cl			; Rotate
020A:3C82  58					pop	ax
020A:3C83  F8					clc				; Clear carry flag
020A:3C84  C3					retn
							                        ;* No entry point to code
020A:3C85  80 FD 04				cmp	ch,4
020A:3C88  74 20				je	$+22h			; Jump if equal
020A:3C8A  8A 04				mov	al,[si]
020A:3C8C  3C 20				cmp	al,20h			; ' '
020A:3C8E  74 F0				je	$-0Eh			; Jump if equal
020A:3C90  3C 09				cmp	al,9
020A:3C92  74 EC				je	$-12h			; Jump if equal
020A:3C94  3C 00				cmp	al,0
020A:3C96  74 E8				je	$-16h			; Jump if equal
020A:3C98  3C 2C				cmp	al,2Ch			; ','
020A:3C9A  74 E4				je	$-1Ah			; Jump if equal
020A:3C9C  3C 3A				cmp	al,3Ah			; ':'
020A:3C9E  74 E0				je	$-1Eh			; Jump if equal
020A:3CA0  3C 3B				cmp	al,3Bh			; ';'
020A:3CA2  74 DC				je	$-22h			; Jump if equal
020A:3CA4  24 DF				and	al,0DFh
020A:3CA6  3C 48				cmp	al,48h			; 'H'
020A:3CA8  74 D6				je	$-28h			; Jump if equal
020A:3CAA  F9					stc				; Set carry flag
020A:3CAB  5E					pop	si
020A:3CAC  C3					retn
020A:3CAD  00 00				add	[bx+si],al
020A:3CAF  00 BA 8005				add	[bp+si-7FFBh],bh
020A:3CB3  BB 0590				mov	bx,590h
020A:3CB6  E8 E3B7				call	$-1C46h
020A:3CB9  C3					retn
020A:3CBA  00					db	0
020A:3CBB  00					db	0
020A:3CBC  00					db	0
020A:3CBD  00 00				add	[bx+si],al
020A:3CBF  00 F7				add	bh,dh
020A:3CC1  06					push	es
020A:3CC2  33 3D				xor	di,[di]
020A:3CC4  02 00				add	al,[bx+si]
020A:3CC6  75 31				jnz	$+33h			; Jump if not zero
020A:3CC8  8A 04				mov	al,[si]
020A:3CCA  8A E0				mov	ah,al
020A:3CCC  3C 00				cmp	al,0
020A:3CCE  74 29				je	$+2Bh			; Jump if equal
020A:3CD0  24 5F				and	al,5Fh			; '_'
020A:3CD2  3C 41				cmp	al,41h			; 'A'
020A:3CD4  72 23				jb	$+25h			; Jump if below
020A:3CD6  3C 4D				cmp	al,4Dh			; 'M'
020A:3CD8  77 1F				ja	$+21h			; Jump if above
020A:3CDA  2C 41				sub	al,41h			; 'A'
020A:3CDC  BB 8000				mov	bx,8000h
020A:3CDF  8A C8				mov	cl,al
020A:3CE1  D3 CB				ror	bx,cl			; Rotate
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 103

020A:3CE3  8B 16 3D41				mov	dx,word ptr ds:[3D41h]	; (020A:3D41=23h)
020A:3CE7  0B D3				or	dx,bx
020A:3CE9  F6 C4 20				test	ah,20h			; ' '
020A:3CEC  74 04				jz	$+6			; Jump if zero
020A:3CEE  F7 D3				not	bx
020A:3CF0  23 D3				and	dx,bx
020A:3CF2  89 16 3D41				mov	word ptr ds:[3D41h],dx	; (020A:3D41=23h)
020A:3CF6  46					inc	si
020A:3CF7  EB CF				jmp	short $-2Fh
							                        ;* No entry point to code
020A:3CF9  C3					retn
							                        ;* No entry point to code
020A:3CFA  87 DB				xchg	bx,bx
020A:3CFC  F7 06 3D33 0002			test	word ptr ds:[3D33h],2	; (020A:3D33=89D3h)
020A:3D02  74 02				jz	$+4			; Jump if zero
020A:3D04  EB 7B				jmp	short $+7Dh
							                        ;* No entry point to code
020A:3D06  8A 04				mov	al,[si]
020A:3D08  8A E0				mov	ah,al
020A:3D0A  3C 00				cmp	al,0
020A:3D0C  74 F6				je	$-8			; Jump if equal
020A:3D0E  24 5F				and	al,5Fh			; '_'
020A:3D10  3C 41				cmp	al,41h			; 'A'
020A:3D12  72 F0				jb	$-0Eh			; Jump if below
020A:3D14  3C 5A				cmp	al,5Ah			; 'Z'
020A:3D16  77 EC				ja	$-12h			; Jump if above
020A:3D18  3C 50				cmp	al,50h			; 'P'
020A:3D1A  77 1E				ja	$+20h			; Jump if above
020A:3D1C  2C 41				sub	al,41h			; 'A'
020A:3D1E  BB 8000				mov	bx,8000h
020A:3D21  8A C8				mov	cl,al
020A:3D23  D3 CB				ror	bx,cl			; Rotate
020A:3D25  8B 16 3D3C				mov	dx,word ptr ds:[3D3Ch]	; (020A:3D3C=2477h)
020A:3D29  0B D3				or	dx,bx
020A:3D2B  F6 C4 20				test	ah,20h			; ' '
020A:3D2E  74 04				jz	$+6			; Jump if zero
020A:3D30  F7 D3				not	bx
020A:3D32  23 D3				and	dx,bx
020A:3D34  89 16 3D3C				mov	word ptr ds:[3D3Ch],dx	; (020A:3D3C=2477h)
020A:3D38  EB 44				jmp	short $+46h
020A:3D3A  3C 54				cmp	al,54h			; 'T'
020A:3D3C  2477					dw	2477h
020A:3D3E  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:3D43  74 39				je	$+3Bh			; Jump if equal
020A:3D45  2C 51				sub	al,51h			; 'Q'
020A:3D47  B3 04				mov	bl,4
020A:3D49  8A C8				mov	cl,al
020A:3D4B  D2 CB				ror	bl,cl			; Rotate
020A:3D4D  8A 16 3D9C				mov	dl,byte ptr ds:[3D9Ch]	; (020A:3D9C=3Ch)
020A:3D51  0A D3				or	dl,bl
020A:3D53  F6 C4 20				test	ah,20h			; ' '
020A:3D56  74 04				jz	$+6			; Jump if zero
020A:3D58  F6 D3				not	bl
020A:3D5A  22 D3				and	dl,bl
020A:3D5C  88 16 3D9C				mov	byte ptr ds:[3D9Ch],dl	; (020A:3D9C=3Ch)
020A:3D60  77 1C				ja	$+1Eh			; Jump if above
020A:3D62  2C 55				sub	al,55h			; 'U'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 104

020A:3D64  BB 0080				mov	bx,80h
020A:3D67  8A C8				mov	cl,al
020A:3D69  D3 CB				ror	bx,cl			; Rotate
020A:3D6B  8B 16 3D3E				mov	dx,word ptr ds:[3D3Eh]	; (020A:3D3E=3E80h)
020A:3D6F  0B D3				or	dx,bx
020A:3D71  F6 C4 20				test	ah,20h			; ' '
020A:3D74  74 04				jz	$+6			; Jump if zero
020A:3D76  F7 D3				not	bx
020A:3D78  23 D3				and	dx,bx
020A:3D7A  89 16 3D3E				mov	word ptr ds:[3D3Eh],dx	; (020A:3D3E=3E80h)
020A:3D7E  46					inc	si
020A:3D7F  EB 85				jmp	short $-79h
							                        ;* No entry point to code
020A:3D81  A0 17A7				mov	al,byte ptr ds:[17A7h]	; (020A:17A7=0)
020A:3D84  F6 06 3D9C 07			test	byte ptr ds:[3D9Ch],7	; (020A:3D9C=3Ch)
020A:3D89  74 0C				jz	$+0Eh			; Jump if zero
020A:3D8B  80 3E 17A7 0A			cmp	byte ptr ds:[17A7h],0Ah	; (020A:17A7=0)
020A:3D90  73 05				jae	$+7			; Jump if above or =
020A:3D92  B0 0A				mov	al,0Ah
020A:3D94  E8 25F9				call	$+25FCh
020A:3D97  E8 228E				call	$+2291h
020A:3D9A  F7 06 3D3C 0002			test	word ptr ds:[3D3Ch],2	; (020A:3D3C=2477h)
020A:3DA0  74 07				jz	$+9			; Jump if zero
020A:3DA2  B0 01				mov	al,1
020A:3DA4  9A 1481:6CB0				call	far ptr $+2F0Ch
020A:3DA9  C3					retn
							                        ;* No entry point to code
020A:3DAA  87 DB				xchg	bx,bx
020A:3DAC  80 3E 448B 01			cmp	byte ptr ds:[448Bh],1	; (020A:448B=14h)
020A:3DB1  75 07				jne	$+9			; Jump if not equal
020A:3DB3  C6 06 3F4B 12			mov	byte ptr ds:[3F4Bh],12h	; (020A:3F4B=56h)
020A:3DB8  EB 28				jmp	short $+2Ah
							                        ;* No entry point to code
020A:3DBA  89 36 4018				mov	word ptr ds:[4018h],si	; (020A:4018=0BF1Dh)
020A:3DBE  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:3DC2  01 1E 4018				add	word ptr ds:[4018h],bx	; (020A:4018=0BF1Dh)
020A:3DC6  E8 FE6B				call	$-192h
020A:3DC9  72 12				jc	$+14h			; Jump if carry Set
020A:3DCB  E8 3B17				call	$+3B1Ah
020A:3DCE  3B D0				cmp	dx,ax
020A:3DD0  72 0B				jb	$+0Dh			; Jump if below
020A:3DD2  89 16 1CE6				mov	word ptr ds:[1CE6h],dx	; (020A:1CE6=0)
020A:3DD6  2E: 89 16 3FB8			mov	word ptr cs:[3FB8h],dx	; (020A:3FB8=0C602h)
020A:3DDB  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:3DDD  C6 06 3F4B 31			mov	byte ptr ds:[3F4Bh],31h	; (020A:3F4B=56h) '1'
020A:3DE2  C3					retn
							                        ;* No entry point to code
020A:3DE3  90					nop
020A:3DE4  B4 01				mov	ah,1
020A:3DE6  3C 46				cmp	al,46h			; 'F'
020A:3DE8  74 74				je	$+76h			; Jump if equal
020A:3DEA  FE C4				inc	ah
020A:3DEC  3C 43				cmp	al,43h			; 'C'
020A:3DEE  74 6E				je	$+70h			; Jump if equal
020A:3DF0  FE C4				inc	ah
020A:3DF2			loc_268:
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 105

020A:3DF2  3C 45				cmp	al,45h			; 'E'
020A:3DF4  74 68				je	$+6Ah			; Jump if equal
020A:3DF6  FE C4				inc	ah
020A:3DF8  3C 5A				cmp	al,5Ah			; 'Z'
020A:3DFA  74 71				je	$+73h			; Jump if equal
020A:3DFC  FE C4				inc	ah
020A:3DFE  3C 44				cmp	al,44h			; 'D'
020A:3E00  74 6B				je	$+6Dh			; Jump if equal
020A:3E02  FE C4				inc	ah
020A:3E04  3C 4F				cmp	al,4Fh			; 'O'
020A:3E06  74 65				je	$+67h			; Jump if equal
020A:3E08  FE C4				inc	ah
020A:3E0A  3C 53				cmp	al,53h			; 'S'
020A:3E0C  74 5F				je	$+61h			; Jump if equal
020A:3E0E  FE C4				inc	ah
020A:3E10  3C 57				cmp	al,57h			; 'W'
020A:3E12  74 59				je	$+5Bh			; Jump if equal
020A:3E14  FE C4				inc	ah
020A:3E16  3C 4E				cmp	al,4Eh			; 'N'
020A:3E18  74 53				je	$+55h			; Jump if equal
020A:3E1A  FE C4				inc	ah
020A:3E1C  3C 50				cmp	al,50h			; 'P'
020A:3E1E  75 40				jne	$+42h			; Jump if not equal
020A:3E20  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:3E25  1E					push	ds
020A:3E26  E8 3A71				call	$+3A74h
020A:3E29  C6 06 725C 00			mov	byte ptr ds:[725Ch],0	; (020A:725C=3Eh)
020A:3E2E  C6 06 7282 00			mov	byte ptr ds:[7282h],0	; (020A:7282=32h)
020A:3E33  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:3E38  9C					pushf				; Push flags
020A:3E39  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:3E3E  5A					pop	dx
020A:3E3F  8E DA				mov	ds,dx
020A:3E41  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:3E46  5A					pop	dx
020A:3E47  75 0A				jnz	$+0Ch			; Jump if not zero
020A:3E49  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:3E4E  74 03				je	$+5			; Jump if equal
020A:3E50  E8 3F2D				call	$+3F30h
020A:3E53  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:3E58  9D					popf				; Pop flags
020A:3E59  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:3E5E  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:3E60  FE C4				inc	ah
020A:3E62  3C 4C				cmp	al,4Ch			; 'L'
020A:3E64  74 07				je	$+9			; Jump if equal
020A:3E66  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:3E6B  EB 0E				jmp	short $+10h
							                        ;* No entry point to code
020A:3E6D  88 26 1F85				mov	byte ptr ds:[1F85h],ah	; (020A:1F85=0)
020A:3E71  9A 1481:08F0				call	far ptr $-3581h
020A:3E76  9A 1481:31F8				call	far ptr $-0C7Eh
020A:3E7B  C3					retn
							                        ;* No entry point to code
020A:3E7C  3C 41				cmp	al,41h			; 'A'
020A:3E7E  72 2C				jb	$+2Eh			; Jump if below
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 106

020A:3E80  3C 5A				cmp	al,5Ah			; 'Z'
020A:3E82  77 28				ja	$+2Ah			; Jump if above
020A:3E84  8A D0				mov	dl,al
020A:3E86  80 EA 41				sub	dl,41h			; 'A'
020A:3E89  8A DA				mov	bl,dl
020A:3E8B  B4 19				mov	ah,19h
020A:3E8D  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020A:3E8F  50					push	ax
020A:3E90  B4 0E				mov	ah,0Eh
020A:3E92  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:3E94  B4 19				mov	ah,19h
020A:3E96  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020A:3E98  A2 1D90				mov	byte ptr ds:[1D90h],al	; (020A:1D90=0)
020A:3E9B  04 61				add	al,61h			; 'a'
020A:3E9D  A2 066E				mov	byte ptr ds:[66Eh],al	; (020A:066E=0Eh)
020A:3EA0  E8 1B0D				call	$+1B10h
020A:3EA3  58					pop	ax
020A:3EA4  8A D0				mov	dl,al
020A:3EA6  B4 0E				mov	ah,0Eh
020A:3EA8  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:3EAA  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:3EAC  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:3EB1  C3					retn
							                        ;* No entry point to code
020A:3EB2  87 DB				xchg	bx,bx
020A:3EB4  80 3E 448B 01			cmp	byte ptr ds:[448Bh],1	; (020A:448B=14h)
020A:3EB9  75 08				jne	$+0Ah			; Jump if not equal
020A:3EBB  C6 06 3F4B 12			mov	byte ptr ds:[3F4Bh],12h	; (020A:3F4B=56h)
020A:3EC0  E9 00C8				jmp	$+0CBh
							                        ;* No entry point to code
020A:3EC3  89 36 4018				mov	word ptr ds:[4018h],si	; (020A:4018=0BF1Dh)
020A:3EC7  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:3ECB  01 1E 4018				add	word ptr ds:[4018h],bx	; (020A:4018=0BF1Dh)
020A:3ECF  33 DB				xor	bx,bx			; Zero register
020A:3ED1  81 3C 4E49				cmp	word ptr [si],4E49h
020A:3ED5  75 16				jne	$+18h			; Jump if not equal
020A:3ED7  83 C6 03				add	si,3
020A:3EDA  E8 FD57				call	$-2A6h
020A:3EDD  72 0B				jc	$+0Dh			; Jump if carry Set
020A:3EDF  88 16 471B				mov	byte ptr ds:[471Bh],dl	; (020A:471B=3Ah)
020A:3EE3  C6 06 4719 02			mov	byte ptr ds:[4719h],2	; (020A:4719=80h)
020A:3EE8  EB 31				jmp	short $+33h
020A:3EEA  E9 0099				jmp	$+9Ch
							                        ;* No entry point to code
020A:3EED  3C 55				cmp	al,55h			; 'U'
020A:3EEF  75 07				jne	$+9			; Jump if not equal
020A:3EF1  C6 06 4719 04			mov	byte ptr ds:[4719h],4	; (020A:4719=80h)
020A:3EF6  EB 23				jmp	short $+25h
							                        ;* No entry point to code
020A:3EF8  C7 06 471C 0000			mov	word ptr ds:[471Ch],0	; (020A:471C=1775h)
020A:3EFE  E8 FD33				call	$-2CAh
020A:3F01  72 E7				jc	$-17h			; Jump if carry Set
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 107

020A:3F03  80 3C 3A				cmp	byte ptr [si],3Ah	; ':'
020A:3F06  75 0A				jne	$+0Ch			; Jump if not equal
020A:3F08  46					inc	si
020A:3F09  89 16 471C				mov	word ptr ds:[471Ch],dx	; (020A:471C=1775h)
020A:3F0D  E8 FD24				call	$-2D9h
020A:3F10  72 74				jc	$+76h			; Jump if carry Set
020A:3F12  89 16 471E				mov	word ptr ds:[471Eh],dx	; (020A:471E=8046h)
020A:3F16  C6 06 4719 08			mov	byte ptr ds:[4719h],8	; (020A:4719=80h)
020A:3F1B  3B 36 4018				cmp	si,word ptr ds:[4018h]	; (020A:4018=0BF1Dh)
020A:3F1F  73 6A				jae	$+6Ch			; Jump if above or =
020A:3F21  80 3C 2C				cmp	byte ptr [si],2Ch	; ','
020A:3F24  74 03				je	$+5			; Jump if equal
020A:3F26  46					inc	si
020A:3F27  EB F2				jmp	short $-0Ch
							                        ;* No entry point to code
020A:3F29  46					inc	si
020A:3F2A  3B 36 4018				cmp	si,word ptr ds:[4018h]	; (020A:4018=0BF1Dh)
020A:3F2E  73 5B				jae	$+5Dh			; Jump if above or =
020A:3F30  80 3C 41				cmp	byte ptr [si],41h	; 'A'
020A:3F33  74 20				je	$+22h			; Jump if equal
020A:3F35  80 3C 55				cmp	byte ptr [si],55h	; 'U'
020A:3F38  74 22				je	$+24h			; Jump if equal
020A:3F3A  80 3C 53				cmp	byte ptr [si],53h	; 'S'
020A:3F3D  74 24				je	$+26h			; Jump if equal
020A:3F3F  80 3C 44				cmp	byte ptr [si],44h	; 'D'
020A:3F42  74 26				je	$+28h			; Jump if equal
020A:3F44  80 3C 52				cmp	byte ptr [si],52h	; 'R'
020A:3F47  74 2F				je	$+31h			; Jump if equal
020A:3F49  80 3C 56				cmp	byte ptr [si],56h	; 'V'
020A:3F4C  75 DB				jne	$-23h			; Jump if not equal
020A:3F4E  80 0E 4719 40			or	byte ptr ds:[4719h],40h	; (020A:4719=80h) '@'
020A:3F53  EB C6				jmp	short $-38h
							                        ;* No entry point to code
020A:3F55  80 0E 4719 01			or	byte ptr ds:[4719h],1	; (020A:4719=80h)
020A:3F5A  EB BF				jmp	short $-3Fh
							                        ;* No entry point to code
020A:3F5C  80 0E 4719 10			or	byte ptr ds:[4719h],10h	; (020A:4719=80h)
020A:3F61  EB B8				jmp	short $-46h
							                        ;* No entry point to code
020A:3F63  80 0E 4719 20			or	byte ptr ds:[4719h],20h	; (020A:4719=80h) ' '
020A:3F68  EB B1				jmp	short $-4Dh
							                        ;* No entry point to code
020A:3F6A  F6 06 4719 08			test	byte ptr ds:[4719h],8	; (020A:4719=80h)
020A:3F6F  74 15				jz	$+17h			; Jump if zero
020A:3F71  80 0E 471A 04			or	byte ptr ds:[471Ah],4	; (020A:471A=3Ch)
020A:3F76  EB A3				jmp	short $-5Bh
							                        ;* No entry point to code
020A:3F78  F6 06 4719 08			test	byte ptr ds:[4719h],8	; (020A:4719=80h)
020A:3F7D  74 07				jz	$+9			; Jump if zero
020A:3F7F  80 0E 471A 0C			or	byte ptr ds:[471Ah],0Ch	; (020A:471A=3Ch)
020A:3F84  EB 95				jmp	short $-69h
							                        ;* No entry point to code
020A:3F86  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:3F8B  C3					retn
							                        ;* No entry point to code
020A:3F8C  50					push	ax
020A:3F8D  BF 036A				mov	di,36Ah
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 108

020A:3F90  B9 0009				mov	cx,9
020A:3F93  B0 2E				mov	al,2Eh			; '.'
020A:3F95  FC					cld				; Clear direction
020A:3F96  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:3F98  4F					dec	di
020A:3F99  58					pop	ax
020A:3F9A  3C 4C				cmp	al,4Ch			; 'L'
020A:3F9C  74 0C				je	$+0Eh			; Jump if equal
020A:3F9E  3C 41				cmp	al,41h			; 'A'
020A:3FA0  74 0B				je	$+0Dh			; Jump if equal
020A:3FA2  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:3FA7  E9 0117				jmp	$+11Ah
020A:3FAA  E9 009B				jmp	$+9Eh
020A:3FAD  F6 06 155F 80			test	byte ptr ds:[155Fh],80h	; (020A:155F=0)
020A:3FB2  0575					dw	575h
020A:3FB4  06C6					dw	6C6h
020A:3FB6  5F					pop	di
020A:3FB7  15 C602				adc	ax,0C602h
020A:3FBA  06					push	es
020A:3FBB  17					pop	ss
020A:3FBC  23 00				and	ax,[bx+si]
020A:3FBE  9A 1481:2BB0				call	far ptr $-140Eh
020A:3FC3  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:3FC7  C6 47 30 00				mov	byte ptr [bx+30h],0
020A:3FCB  C6 47 33 00				mov	byte ptr [bx+33h],0
020A:3FCF  C6 47 34 00				mov	byte ptr [bx+34h],0
020A:3FD3  C6 47 65 00				mov	byte ptr [bx+65h],0
020A:3FD7  C6 47 66 00				mov	byte ptr [bx+66h],0
020A:3FDB  C6 47 69 00				mov	byte ptr [bx+69h],0
020A:3FDF  C6 47 6A 00				mov	byte ptr [bx+6Ah],0
020A:3FE3  C6 47 6B 00				mov	byte ptr [bx+6Bh],0
020A:3FE7  C6 47 6C 00				mov	byte ptr [bx+6Ch],0
020A:3FEB  C6 47 70 00				mov	byte ptr [bx+70h],0
020A:3FEF  C6 47 71 00				mov	byte ptr [bx+71h],0
020A:3FF3  C6 47 7B 00				mov	byte ptr [bx+7Bh],0
020A:3FF7  C6 47 4A 00				mov	byte ptr [bx+4Ah],0
020A:3FFB  C6 06 3D9C 00			mov	byte ptr ds:[3D9Ch],0	; (020A:3D9C=3Ch)
020A:4000  B9 0010				mov	cx,10h
020A:4003  BF 140D				mov	di,140Dh
020A:4006  A0 1408				mov	al,byte ptr ds:[1408h]	; (020A:1408=0)
020A:4009  3A 05				cmp	al,[di]
020A:400B  74 05				je	$+7			; Jump if equal
020A:400D  83 C7 11				add	di,11h
020A:4010  E2 F7				loop	$-7			; Loop if cx > 0

020A:4012  81 7D 01 4F4E			cmp	word ptr [di+1],4F4Eh
020A:4017  75 1D				jne	$+1Fh			; Jump if not equal
020A:4019  BF 140D				mov	di,140Dh
020A:401C  81 C7 00FF				add	di,0FFh
020A:4020  8B 45 0D				mov	ax,[di+0Dh]
020A:4023  A3 1409				mov	word ptr ds:[1409h],ax	; (020A:1409=0)
020A:4026  8A 05				mov	al,[di]
020A:4028  A2 1408				mov	byte ptr ds:[1408h],al	; (020A:1408=0)
020A:402B  8B 45 0B				mov	ax,[di+0Bh]
020A:402E  A3 140B				mov	word ptr ds:[140Bh],ax	; (020A:140B=0)
020A:4031  9A 1481:31BC				call	far ptr $-0E75h
020A:4036  80 26 2314 FE			and	byte ptr ds:[2314h],0FEh	; (020A:2314=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 109

020A:403B			loc_269:
020A:403B  32 C0				xor	al,al			; Zero register
020A:403D  9A 1481:0A94				call	far ptr $-35A9h
020A:4042  C6 47 48 00				mov	byte ptr [bx+48h],0
020A:4046  EB 65				jmp	short $+67h
							                        ;* No entry point to code
020A:4048  F6 06 155F 80			test	byte ptr ds:[155Fh],80h	; (020A:155F=0)
020A:404D  75 05				jnz	$+7			; Jump if not zero
020A:404F  C6 06 155F 00			mov	byte ptr ds:[155Fh],0	; (020A:155F=0)
020A:4054  C6 06 2317 01			mov	byte ptr ds:[2317h],1	; (020A:2317=0)
020A:4059  9A 1481:2BB0				call	far ptr $-14A9h
020A:405E  A0 1209				mov	al,byte ptr ds:[1209h]	; (020A:1209=0)
020A:4061  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:4065  C6 47 30 0F				mov	byte ptr [bx+30h],0Fh
020A:4069  C6 47 33 0F				mov	byte ptr [bx+33h],0Fh
020A:406D  C6 47 34 0F				mov	byte ptr [bx+34h],0Fh
020A:4071  88 47 65				mov	[bx+65h],al
020A:4074  C6 47 66 07				mov	byte ptr [bx+66h],7
020A:4078  C6 47 69 07				mov	byte ptr [bx+69h],7
020A:407C  C6 47 6A 07				mov	byte ptr [bx+6Ah],7
020A:4080  C6 47 6B 07				mov	byte ptr [bx+6Bh],7
020A:4084  C6 47 6C 07				mov	byte ptr [bx+6Ch],7
020A:4088  88 47 70				mov	[bx+70h],al
020A:408B  C6 47 71 07				mov	byte ptr [bx+71h],7
020A:408F  C6 47 7B 07				mov	byte ptr [bx+7Bh],7
020A:4093  F6 06 2313 01			test	byte ptr ds:[2313h],1	; (020A:2313=0)
020A:4098  75 04				jnz	$+6			; Jump if not zero
020A:409A  C6 47 4A 07				mov	byte ptr [bx+4Ah],7
020A:409E  E8 1F87				call	$+1F8Ah
020A:40A1  80 0E 2314 01			or	byte ptr ds:[2314h],1	; (020A:2314=0)
020A:40A6  B0 01				mov	al,1
020A:40A8  9A 1481:0A94				call	far ptr $-3614h
020A:40AD  E8 1784				call	$+1787h
020A:40B0  BF 1F15				mov	di,1F15h
020A:40B3  B9 003F				mov	cx,3Fh
020A:40B6  B0 2E				mov	al,2Eh			; '.'
020A:40B8  FC					cld				; Clear direction
020A:40B9  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:40BB  4F					dec	di
020A:40BC  9A 1481:2BB0				call	far ptr $-150Ch
020A:40C1  C3					retn
							                        ;* No entry point to code
020A:40C2  87 DB				xchg	bx,bx
020A:40C4  C6 06 3E4B 01			mov	byte ptr ds:[3E4Bh],1	; (020A:3E4B=16h)
020A:40C9  C3					retn
							                        ;* No entry point to code
020A:40CA  87 DB				xchg	bx,bx
020A:40CC  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:40D0  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:40D5  74 1B				je	$+1Dh			; Jump if equal
020A:40D7  BF 0378				mov	di,378h
020A:40DA  B9 0021				mov	cx,21h
020A:40DD  B0 20				mov	al,20h			; ' '
020A:40DF  FC					cld				; Clear direction
020A:40E0  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:40E2  B9 0020				mov	cx,20h
020A:40E5  83 FB 20				cmp	bx,20h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 110

020A:40E8  77 02				ja	$+4			; Jump if above
020A:40EA  8B CB				mov	cx,bx
020A:40EC  BF 0378				mov	di,378h
020A:40EF  FC					cld				; Clear direction
020A:40F0  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:40F2  C3					retn
							                        ;* No entry point to code
020A:40F3  90					nop
020A:40F4  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:40F8  83 FB 00				cmp	bx,0
020A:40FB  75 07				jne	$+9			; Jump if not equal
020A:40FD  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:4102  EB 78				jmp	short $+7Ah
							                        ;* No entry point to code
020A:4104  80 3C 3F				cmp	byte ptr [si],3Fh	; '?'
020A:4107  74 1C				je	$+1Eh			; Jump if equal
020A:4109  8B FE				mov	di,si
020A:410B  B0 00				mov	al,0
020A:410D  9A 1481:2C48				call	far ptr $-14C5h
020A:4112  9A 1481:2CD0				call	far ptr $-1442h
020A:4117  A2 1F83				mov	byte ptr ds:[1F83h],al	; (020A:1F83=0)
020A:411A  3C 01				cmp	al,1
020A:411C  77 10				ja	$+12h			; Jump if above
020A:411E  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:4123  EB 57				jmp	short $+59h
							                        ;* No entry point to code
020A:4125  80 3E 1F83 01			cmp	byte ptr ds:[1F83h],1	; (020A:1F83=0)
020A:412A  77 24				ja	$+26h			; Jump if above
020A:412C  EB 5A				jmp	short $+5Ch
							                        ;* No entry point to code
020A:412E  BF 1EB2				mov	di,1EB2h
020A:4131  B9 0060				mov	cx,60h
020A:4134  B0 00				mov	al,0
020A:4136  FC					cld				; Clear direction
020A:4137  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:4139  BF 0649				mov	di,649h
020A:413C  B9 000C				mov	cx,0Ch
020A:413F  B0 20				mov	al,20h			; ' '
020A:4141  F3/ BFAA				dw	0BFAAh
020A:4144  B2 1E				mov	dl,1Eh
020A:4146  8B CB				mov	cx,bx
020A:4148  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:414A  4F					dec	di
020A:414B  9A 1481:BBC0				call	far ptr $+7A75h
020A:4150  80 3E 1CE2 03			cmp	byte ptr ds:[1CE2h],3	; (020A:1CE2=0)
020A:4155  75 05				jne	$+7			; Jump if not equal
020A:4157  C6 06 1CE2 04			mov	byte ptr ds:[1CE2h],4	; (020A:1CE2=0)
020A:415C  E8 5655				call	$+5658h
020A:415F  73 05				jnc	$+7			; Jump if carry=0
020A:4161  A2 3F4B				mov	byte ptr ds:[3F4Bh],al	; (020A:3F4B=56h)
020A:4164  EB 16				jmp	short $+18h
							                        ;* No entry point to code
020A:4166  C6 06 448B 01			mov	byte ptr ds:[448Bh],1	; (020A:448B=14h)
020A:416B  80 3E 17A4 01			cmp	byte ptr ds:[17A4h],1	; (020A:17A4=0)
020A:4170  74 05				je	$+7			; Jump if equal
020A:4172  B0 0A				mov	al,0Ah
020A:4174  E8 2219				call	$+221Ch
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 111

020A:4177  9A 1481:0B54				call	far ptr $-3623h
020A:417C  E8 373F				call	$+3742h
020A:417F  51					push	cx
020A:4180  B4 2A				mov	ah,2Ah			; '*'
020A:4182  9A 1481:2F90				call	far ptr $-11F2h
020A:4187  59					pop	cx
020A:4188  C3					retn
							                        ;* No entry point to code
020A:4189  87 DB				xchg	bx,bx
020A:418B  90					nop
020A:418C  89 36 4018				mov	word ptr ds:[4018h],si	; (020A:4018=0BF1Dh)
020A:4190  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:4194  01 1E 4018				add	word ptr ds:[4018h],bx	; (020A:4018=0BF1Dh)
020A:4198  E8 FA99				call	$-564h
020A:419B  72 2B				jc	$+2Dh			; Jump if carry Set
020A:419D  89 16 231A				mov	word ptr ds:[231Ah],dx	; (020A:231A=0)
020A:41A1  89 16 231C				mov	word ptr ds:[231Ch],dx	; (020A:231C=0)
020A:41A5  83 26 231C E7			and	word ptr ds:[231Ch],0FFE7h	; (020A:231C=0)
020A:41AA  88 36 4247				mov	byte ptr ds:[4247h],dh	; (020A:4247=80h)
020A:41AE  F7 06 231A 0002			test	word ptr ds:[231Ah],2	; (020A:231A=0)
020A:41B4  74 17				jz	$+19h			; Jump if zero
020A:41B6  BF 20A9				mov	di,20A9h
020A:41B9  83 EF 02				sub	di,2
020A:41BC  B9 0004				mov	cx,4
020A:41BF  2B F9				sub	di,cx
020A:41C1  B0 58				mov	al,58h			; 'X'
020A:41C3  FC					cld				; Clear direction
020A:41C4  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:41C6  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:41C8  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:41CD  C3					retn
							                        ;* No entry point to code
020A:41CE  87 DB				xchg	bx,bx
020A:41D0  80 3E 448B 01			cmp	byte ptr ds:[448Bh],1	; (020A:448B=14h)
020A:41D5  75 07				jne	$+9			; Jump if not equal
020A:41D7  C6 06 3F4B 12			mov	byte ptr ds:[3F4Bh],12h	; (020A:3F4B=56h)
020A:41DC  EB 2B				jmp	short $+2Dh
							                        ;* No entry point to code
020A:41DE  B4 01				mov	ah,1
020A:41E0  3C 46				cmp	al,46h			; 'F'
020A:41E2  74 16				je	$+18h			; Jump if equal
020A:41E4  FE C4				inc	ah
020A:41E6  3C 42				cmp	al,42h			; 'B'
020A:41E8  74 10				je	$+12h			; Jump if equal
020A:41EA  FE C4				inc	ah
020A:41EC  3C 44				cmp	al,44h			; 'D'
020A:41EE  74 0A				je	$+0Ch			; Jump if equal
020A:41F0  2C 31				sub	al,31h			; '1'
020A:41F2  3C 02				cmp	al,2
020A:41F4  77 0E				ja	$+10h			; Jump if above
020A:41F6  FE C0				inc	al
020A:41F8  8A E0				mov	ah,al
020A:41FA  88 26 1CE2				mov	byte ptr ds:[1CE2h],ah	; (020A:1CE2=0)
020A:41FE  88 26 1CE3				mov	byte ptr ds:[1CE3h],ah	; (020A:1CE3=0)
020A:4202  EB 05				jmp	short $+7
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 112

020A:4204  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:4209  C3					retn
							                        ;* No entry point to code
020A:420A  87 DB				xchg	bx,bx
020A:420C  32 E4				xor	ah,ah			; Zero register
020A:420E  3C 44				cmp	al,44h			; 'D'
020A:4210  74 1D				je	$+1Fh			; Jump if equal
020A:4212  FE C4				inc	ah
020A:4214  3C 5A				cmp	al,5Ah			; 'Z'
020A:4216  74 17				je	$+19h			; Jump if equal
020A:4218  FE C4				inc	ah
020A:421A  3C 53				cmp	al,53h			; 'S'
020A:421C  74 11				je	$+13h			; Jump if equal
020A:421E  FE C4				inc	ah
020A:4220  3C 4C				cmp	al,4Ch			; 'L'
020A:4222  74 0B				je	$+0Dh			; Jump if equal
020A:4224  3C 4E				cmp	al,4Eh			; 'N'
020A:4226  74 07				je	$+9			; Jump if equal
020A:4228  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:422D  EB 0A				jmp	short $+0Ch
							                        ;* No entry point to code
020A:422F  88 26 1657				mov	byte ptr ds:[1657h],ah	; (020A:1657=0)
020A:4233  E8 1E42				call	$+1E45h
020A:4236  E8 03EF				call	$+3F2h
020A:4239  C3					retn
							                        ;* No entry point to code
020A:423A  87 DB				xchg	bx,bx
020A:423C  3C 41				cmp	al,41h			; 'A'
020A:423E  75 07				jne	$+9			; Jump if not equal
020A:4240  80 0E 1D74 80			or	byte ptr ds:[1D74h],80h	; (020A:1D74=0)
020A:4245  EB 0E				jmp	short $+10h
020A:4247  80					db	80h
020A:4248  26					db	26h
020A:4249  74 1D				jz	$+1Fh			; Jump if zero
020A:424B  7F 8A				jg	$-74h			; Jump if >
020A:424D  44					inc	sp
020A:424E  01 24				add	[si],sp
020A:4250  5F					pop	di
020A:4251  3C 4E				cmp	al,4Eh			; 'N'
020A:4253  74 08				je	$+0Ah			; Jump if equal
020A:4255  C6 06 1D72 00			mov	byte ptr ds:[1D72h],0	; (020A:1D72=0)
020A:425A  E9 02BA				jmp	$+2BDh
							                        ;* No entry point to code
020A:425D  C6 06 1D72 01			mov	byte ptr ds:[1D72h],1	; (020A:1D72=0)
020A:4262  E9 02B2				jmp	$+2B5h
							                        ;* No entry point to code
020A:4265  87 DB				xchg	bx,bx
020A:4267  90					nop
020A:4268  A0 3DB4				mov	al,byte ptr ds:[3DB4h]	; (020A:3DB4=6)
020A:426B  24 DF				and	al,0DFh
020A:426D  3C 41				cmp	al,41h			; 'A'
020A:426F  75 1F				jne	$+21h			; Jump if not equal
020A:4271  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:4275  C6 06 2313 00			mov	byte ptr ds:[2313h],0	; (020A:2313=0)
020A:427A  C6 47 4A 07				mov	byte ptr [bx+4Ah],7
020A:427E  8A 44 01				mov	al,[si+1]
020A:4281  24 5F				and	al,5Fh			; '_'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 113

020A:4283  3C 46				cmp	al,46h			; 'F'
020A:4285  74 09				je	$+0Bh			; Jump if equal
020A:4287  C6 06 2313 01			mov	byte ptr ds:[2313h],1	; (020A:2313=0)
020A:428C  C6 47 4A 00				mov	byte ptr [bx+4Ah],0
020A:4290  C3					retn
							                        ;* No entry point to code
020A:4291  87 DB				xchg	bx,bx
020A:4293  90					nop
020A:4294  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:4298  83 FB 00				cmp	bx,0
020A:429B  75 08				jne	$+0Ah			; Jump if not equal
020A:429D  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:42A2  E9 00A1				jmp	$+0A4h
							                        ;* No entry point to code
020A:42A5  FC					cld				; Clear direction
020A:42A6  BF 1F15				mov	di,1F15h
020A:42A9  B9 0029				mov	cx,29h
020A:42AC  B0 00				mov	al,0
020A:42AE  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:42B0  BF 036A				mov	di,36Ah
020A:42B3  B9 000C				mov	cx,0Ch
020A:42B6  B0 20				mov	al,20h			; ' '
020A:42B8  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:42BA  BF 1F15				mov	di,1F15h
020A:42BD  8B CB				mov	cx,bx
020A:42BF  80 3C 2E				cmp	byte ptr [si],2Eh	; '.'
020A:42C2  75 11				jne	$+13h			; Jump if not equal
020A:42C4  8B 44 01				mov	ax,[si+1]
020A:42C7  0D 6060				or	ax,6060h
020A:42CA  3D 6D74				cmp	ax,6D74h
020A:42CD  75 09				jne	$+0Bh			; Jump if not equal
020A:42CF  FE 06 2316				inc	byte ptr ds:[2316h]	; (020A:2316=0)
020A:42D3  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:42D5  A4					movsb				; Mov [si] to es:[di]
020A:42D6  E2 E7				loop	$-17h			; Loop if cx > 0

020A:42D8  2B D9				sub	bx,cx
020A:42DA  9A 1481:2BB0				call	far ptr $-172Ah
020A:42DF  83 C3 04				add	bx,4
020A:42E2  47					inc	di
020A:42E3  8B CB				mov	cx,bx
020A:42E5  8A 05				mov	al,[di]
020A:42E7  3C 3A				cmp	al,3Ah			; ':'
020A:42E9  74 0D				je	$+0Fh			; Jump if equal
020A:42EB  3C 5C				cmp	al,5Ch			; '\'
020A:42ED  74 09				je	$+0Bh			; Jump if equal
020A:42EF  83 F9 01				cmp	cx,1
020A:42F2  76 06				jbe	$+8			; Jump if below or =
020A:42F4  49					dec	cx
020A:42F5  4F					dec	di
020A:42F6  EB ED				jmp	short $-11h
							                        ;* No entry point to code
020A:42F8  47					inc	di
020A:42F9  41					inc	cx
020A:42FA  2B D9				sub	bx,cx
020A:42FC  8B CB				mov	cx,bx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 114

020A:42FE  41					inc	cx
020A:42FF  83 F9 0C				cmp	cx,0Ch
020A:4302  77 42				ja	$+44h			; Jump if above
020A:4304  8B F7				mov	si,di
020A:4306  BF 036A				mov	di,36Ah
020A:4309  FC					cld				; Clear direction
020A:430A  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:430C  80 3E 1F16 3A			cmp	byte ptr ds:[1F16h],3Ah	; (020A:1F16=30h) ':'
020A:4311  75 33				jne	$+35h			; Jump if not equal
020A:4313  A0 1F15				mov	al,byte ptr ds:[1F15h]	; (020A:1F15=0)
020A:4316  24 5F				and	al,5Fh			; '_'
020A:4318  3C 41				cmp	al,41h			; 'A'
020A:431A  72 2A				jb	$+2Ch			; Jump if below
020A:431C  3C 5A				cmp	al,5Ah			; 'Z'
020A:431E  77 26				ja	$+28h			; Jump if above
020A:4320  8A D0				mov	dl,al
020A:4322  80 EA 41				sub	dl,41h			; 'A'
020A:4325  8A DA				mov	bl,dl
020A:4327  B4 19				mov	ah,19h
020A:4329  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020A:432B  50					push	ax
020A:432C  B4 0E				mov	ah,0Eh
020A:432E  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:4330  B4 19				mov	ah,19h
020A:4332  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020A:4334  A2 1D90				mov	byte ptr ds:[1D90h],al	; (020A:1D90=0)
020A:4337  04 61				add	al,61h			; 'a'
020A:4339  A2 066E				mov	byte ptr ds:[66Eh],al	; (020A:066E=0Eh)
020A:433C  E8 1671				call	$+1674h
020A:433F  58					pop	ax
020A:4340  8A D0				mov	dl,al
020A:4342  B4 0E				mov	ah,0Eh
020A:4344  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:4346  C3					retn
							                        ;* No entry point to code
020A:4347  90					nop
020A:4348  2C 32				sub	al,32h			; '2'
020A:434A  3C 07				cmp	al,7
020A:434C  77 0E				ja	$+10h			; Jump if above
020A:434E  04 02				add	al,2
020A:4350  D0 E0				shl	al,1			; Shift w/zeros fill
020A:4352  E8 203B				call	$+203Eh
020A:4355  C6 06 17A4 01			mov	byte ptr ds:[17A4h],1	; (020A:17A4=0)
020A:435A  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:435C  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:4361  C3					retn
							                        ;* No entry point to code
020A:4362  87 DB				xchg	bx,bx
020A:4364  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:4368  32 E4				xor	ah,ah			; Zero register
020A:436A  3C 45				cmp	al,45h			; 'E'
020A:436C  74 13				je	$+15h			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 115

020A:436E  FE C4				inc	ah
020A:4370  3C 4A				cmp	al,4Ah			; 'J'
020A:4372  74 0D				je	$+0Fh			; Jump if equal
020A:4374  FE C4				inc	ah
020A:4376  3C 55				cmp	al,55h			; 'U'
020A:4378  74 07				je	$+9			; Jump if equal
020A:437A  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:437F  EB 13				jmp	short $+15h
							                        ;* No entry point to code
020A:4381  88 26 424C				mov	byte ptr ds:[424Ch],ah	; (020A:424C=8Ah)
020A:4385  83 0E 3D3C 02			or	word ptr ds:[3D3Ch],2	; (020A:3D3C=2477h)
020A:438A  80 FC 01				cmp	ah,1
020A:438D  75 05				jne	$+7			; Jump if not equal
020A:438F  9A 1481:6F94				call	far ptr $+2C05h
020A:4394  C3					retn
							                        ;* No entry point to code
020A:4395  87 DB				xchg	bx,bx
020A:4397  90					nop
020A:4398  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:439C  32 E4				xor	ah,ah			; Zero register
020A:439E  3C 4E				cmp	al,4Eh			; 'N'
020A:43A0  74 3E				je	$+40h			; Jump if equal
020A:43A2  FE C4				inc	ah
020A:43A4  3C 44				cmp	al,44h			; 'D'
020A:43A6  74 38				je	$+3Ah			; Jump if equal
020A:43A8  FE C4				inc	ah
020A:43AA  3C 49				cmp	al,49h			; 'I'
020A:43AC  74 32				je	$+34h			; Jump if equal
020A:43AE  B4 04				mov	ah,4
020A:43B0  3C 4F				cmp	al,4Fh			; 'O'
020A:43B2  74 2C				je	$+2Eh			; Jump if equal
020A:43B4  B4 07				mov	ah,7
020A:43B6  3C 41				cmp	al,41h			; 'A'
020A:43B8  74 26				je	$+28h			; Jump if equal
020A:43BA  3C 45				cmp	al,45h			; 'E'
020A:43BC  75 2B				jne	$+2Dh			; Jump if not equal
020A:43BE  46					inc	si
020A:43BF  4B					dec	bx
020A:43C0  74 27				jz	$+29h			; Jump if zero
020A:43C2  80 3C 20				cmp	byte ptr [si],20h	; ' '
020A:43C5  75 F7				jne	$-7			; Jump if not equal
020A:43C7  46					inc	si
020A:43C8  4B					dec	bx
020A:43C9  74 1E				jz	$+20h			; Jump if zero
020A:43CB  B4 06				mov	ah,6
020A:43CD  80 3C 44				cmp	byte ptr [si],44h	; 'D'
020A:43D0  74 0E				je	$+10h			; Jump if equal
020A:43D2  FE CC				dec	ah
020A:43D4  80 3C 49				cmp	byte ptr [si],49h	; 'I'
020A:43D7  74 07				je	$+9			; Jump if equal
020A:43D9  B4 03				mov	ah,3
020A:43DB  80 3C 4F				cmp	byte ptr [si],4Fh	; 'O'
020A:43DE  75 09				jne	$+0Bh			; Jump if not equal
020A:43E0  88 26 1718				mov	byte ptr ds:[1718h],ah	; (020A:1718=0)
020A:43E4  E8 1D35				call	$+1D38h
020A:43E7  EB 05				jmp	short $+7
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 116

020A:43E9  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:43EE  C3					retn
							                        ;* No entry point to code
020A:43EF  90					nop
020A:43F0  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:43F5  74 28				je	$+2Ah			; Jump if equal
020A:43F7  8A E0				mov	ah,al
020A:43F9  80 FC 4F				cmp	ah,4Fh			; 'O'
020A:43FC  74 1A				je	$+1Ch			; Jump if equal
020A:43FE  C6 06 2314 01			mov	byte ptr ds:[2314h],1	; (020A:2314=0)
020A:4403  B0 01				mov	al,1
020A:4405  80 FC 4E				cmp	ah,4Eh			; 'N'
020A:4408  74 07				je	$+9			; Jump if equal
020A:440A  80 0E 2314 02			or	byte ptr ds:[2314h],2	; (020A:2314=0)
020A:440F  EB 0E				jmp	short $+10h
							                        ;* No entry point to code
020A:4411  80 0E 2314 08			or	byte ptr ds:[2314h],8	; (020A:2314=0)
020A:4416  EB 07				jmp	short $+9
							                        ;* No entry point to code
020A:4418  80 26 2314 FE			and	byte ptr ds:[2314h],0FEh	; (020A:2314=0)
020A:441D  32 C0				xor	al,al			; Zero register
020A:441F  C3					retn
							                        ;* No entry point to code
020A:4420  BF 140D				mov	di,140Dh
020A:4423  8A 05				mov	al,[di]
020A:4425  A2 1408				mov	byte ptr ds:[1408h],al	; (020A:1408=0)
020A:4428  33 ED				xor	bp,bp			; Zero register
020A:442A  8D 55 0B				lea	dx,[di+0Bh]		; Load effective addr
020A:442D  8D 4D 01				lea	cx,[di+1]		; Load effective addr
020A:4430  2B D1				sub	dx,cx
020A:4432  8B CA				mov	cx,dx
020A:4434  33 DB				xor	bx,bx			; Zero register
020A:4436  56					push	si
020A:4437  8A 04				mov	al,[si]
020A:4439  3C 00				cmp	al,0
020A:443B  74 3E				je	$+40h			; Jump if equal
020A:443D  3C 20				cmp	al,20h			; ' '
020A:443F  74 04				je	$+6			; Jump if equal
020A:4441  3C 09				cmp	al,9
020A:4443  75 03				jne	$+5			; Jump if not equal
020A:4445  46					inc	si
020A:4446  EB EF				jmp	short $-0Fh
							                        ;* No entry point to code
020A:4448  81 39 582E				cmp	word ptr [bx+di],582Eh
020A:444C  75 0B				jne	$+0Dh			; Jump if not equal
020A:444E  3C 30				cmp	al,30h			; '0'
020A:4450  72 18				jb	$+1Ah			; Jump if below
020A:4452  3C 39				cmp	al,39h			; '9'
020A:4454  77 03				ja	$+5			; Jump if above
020A:4456  46					inc	si
020A:4457  EB 2D				jmp	short $+2Fh
							                        ;* No entry point to code
020A:4459  38 41 01				cmp	[bx+di+1],al
020A:445C  75 0C				jne	$+0Eh			; Jump if not equal
020A:445E  43					inc	bx
020A:445F  46					inc	si
020A:4460  80 79 01 20				cmp	byte ptr [bx+di+1],20h	; ' '
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 117

020A:4464  74 20				je	$+22h			; Jump if equal
020A:4466  E2 CF				loop	$-2Fh			; Loop if cx > 0

020A:4468  E3 1C				jcxz	$+1Eh			; Jump if cx=0
020A:446A  5E					pop	si
020A:446B  56					push	si
020A:446C  45					inc	bp
020A:446D  83 FD 10				cmp	bp,10h
020A:4470  73 09				jae	$+0Bh			; Jump if above or =
020A:4472  8B CA				mov	cx,dx
020A:4474  83 C7 11				add	di,11h
020A:4477  33 DB				xor	bx,bx			; Zero register
020A:4479  EB BC				jmp	short $-42h
							                        ;* No entry point to code
020A:447B  5E					pop	si
020A:447C  B4 36				mov	ah,36h			; '6'
020A:447E  C6 06 231E 18			mov	byte ptr ds:[231Eh],18h	; (020A:231E=0)
020A:4483  E9 2EC9				jmp	$+2ECCh
020A:4486  8B 45 0D				mov	ax,[di+0Dh]
020A:4489  A3 1409				mov	word ptr ds:[1409h],ax	; (020A:1409=0)
020A:448C  8A 05				mov	al,[di]
020A:448E  A2 1408				mov	byte ptr ds:[1408h],al	; (020A:1408=0)
020A:4491  8B 45 0B				mov	ax,[di+0Bh]
020A:4494  A3 140B				mov	word ptr ds:[140Bh],ax	; (020A:140B=0)
020A:4497  8A 04				mov	al,[si]
020A:4499  3C 00				cmp	al,0
020A:449B  74 26				je	$+28h			; Jump if equal
020A:449D  3C 2C				cmp	al,2Ch			; ','
020A:449F  74 03				je	$+5			; Jump if equal
020A:44A1  46					inc	si
020A:44A2  EB F3				jmp	short $-0Bh
							                        ;* No entry point to code
020A:44A4  8A 04				mov	al,[si]
020A:44A6  3C 00				cmp	al,0
020A:44A8  74 19				je	$+1Bh			; Jump if equal
020A:44AA  B4 80				mov	ah,80h
020A:44AC  3C 46				cmp	al,46h			; 'F'
020A:44AE  74 0F				je	$+11h			; Jump if equal
020A:44B0  FE C4				inc	ah
020A:44B2  3C 53				cmp	al,53h			; 'S'
020A:44B4  74 09				je	$+0Bh			; Jump if equal
020A:44B6  FE C4				inc	ah
020A:44B8  3C 42				cmp	al,42h			; 'B'
020A:44BA  74 03				je	$+5			; Jump if equal
020A:44BC  46					inc	si
020A:44BD  EB E5				jmp	short $-19h
							                        ;* No entry point to code
020A:44BF  88 26 155F				mov	byte ptr ds:[155Fh],ah	; (020A:155F=0)
020A:44C3  9A 1481:31BC				call	far ptr $-1307h
020A:44C8  E8 1369				call	$+136Ch
020A:44CB  5E					pop	si
020A:44CC  C3					retn
							                        ;* No entry point to code
020A:44CD  87 DB				xchg	bx,bx
020A:44CF  90					nop
020A:44D0  8B 04				mov	ax,[si]
020A:44D2  8A 5C 02				mov	bl,[si+2]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 118

020A:44D5  BF 3ECE				mov	di,3ECEh
020A:44D8  3B 05				cmp	ax,[di]
020A:44DA  75 05				jne	$+7			; Jump if not equal
020A:44DC  3A 5D 02				cmp	bl,[di+2]
020A:44DF  74 10				je	$+12h			; Jump if equal
020A:44E1  83 C7 05				add	di,5
020A:44E4  81 FF 3F4B				cmp	di,3F4Bh
020A:44E8  72 EE				jb	$-10h			; Jump if below
020A:44EA  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:44EF  EB 76				jmp	short $+78h
							                        ;* No entry point to code
020A:44F1  8B 45 03				mov	ax,[di+3]
020A:44F4  3D 00F1				cmp	ax,0F1h
020A:44F7  74 6E				je	$+70h			; Jump if equal
020A:44F9  8B 16 1D60				mov	dx,word ptr ds:[1D60h]	; (020A:1D60=0)
020A:44FD  3D 00F2				cmp	ax,0F2h
020A:4500  75 0B				jne	$+0Dh			; Jump if not equal
020A:4502  A1 1D62				mov	ax,word ptr ds:[1D62h]	; (020A:1D62=0)
020A:4505  A9 07F0				test	ax,7F0h
020A:4508  74 03				jz	$+5			; Jump if zero
020A:450A  0D 0008				or	ax,8
020A:450D  A3 1D60				mov	word ptr ds:[1D60h],ax	; (020A:1D60=0)
020A:4510  C6 06 1D72 00			mov	byte ptr ds:[1D72h],0	; (020A:1D72=0)
020A:4515  EB 27				jmp	short $+29h
							                        ;* No entry point to code
020A:4517  A1 1D60				mov	ax,word ptr ds:[1D60h]	; (020A:1D60=0)
020A:451A  F6 06 1D72 3F			test	byte ptr ds:[1D72h],3Fh	; (020A:1D72=0) '?'
020A:451F  74 1D				jz	$+1Fh			; Jump if zero
020A:4521  C6 06 1D72 01			mov	byte ptr ds:[1D72h],1	; (020A:1D72=0)
020A:4526  A9 0010				test	ax,10h
020A:4529  74 07				jz	$+9			; Jump if zero
020A:452B  C6 06 1D72 02			mov	byte ptr ds:[1D72h],2	; (020A:1D72=0)
020A:4530  EB 2A				jmp	short $+2Ch
							                        ;* No entry point to code
020A:4532  A9 0020				test	ax,20h
020A:4535  74 07				jz	$+9			; Jump if zero
020A:4537  C6 06 1D72 04			mov	byte ptr ds:[1D72h],4	; (020A:1D72=0)
020A:453C  EB 1E				jmp	short $+20h
							                        ;* No entry point to code
020A:453E  A9 01C0				test	ax,1C0h
020A:4541  74 19				jz	$+1Bh			; Jump if zero
020A:4543  C6 06 1D72 0C			mov	byte ptr ds:[1D72h],0Ch	; (020A:1D72=0)
020A:4548  A9 0040				test	ax,40h
020A:454B  75 0F				jnz	$+11h			; Jump if not zero
020A:454D  C6 06 1D72 14			mov	byte ptr ds:[1D72h],14h	; (020A:1D72=0)
020A:4552  A9 0080				test	ax,80h
020A:4555  75 05				jnz	$+7			; Jump if not zero
020A:4557  C6 06 1D72 24			mov	byte ptr ds:[1D72h],24h	; (020A:1D72=0) '$'
020A:455C  B6 01				mov	dh,1
020A:455E  E8 1507				call	$+150Ah
020A:4561  C7 06 2184 0000			mov	word ptr ds:[2184h],0	; (020A:2184=10Ch)
020A:4567  C3					retn
							                        ;* No entry point to code
020A:4568  55					push	bp
020A:4569  8B 2E 3ECC				mov	bp,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:456D  33 DB				xor	bx,bx			; Zero register
020A:456F  32 C9				xor	cl,cl			; Zero register
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 119

020A:4571  8A 1C				mov	bl,[si]
020A:4573  80 EB 30				sub	bl,30h			; '0'
020A:4576  80 FB 09				cmp	bl,9
020A:4579  76 03				jbe	$+5			; Jump if below or =
020A:457B  E9 008F				jmp	$+92h
							                        ;* No entry point to code
020A:457E  8A C3				mov	al,bl
020A:4580  46					inc	si
020A:4581  4D					dec	bp
020A:4582  FE C1				inc	cl
020A:4584  8A 1C				mov	bl,[si]
020A:4586  80 EB 30				sub	bl,30h			; '0'
020A:4589  80 FB 09				cmp	bl,9
020A:458C  76 04				jbe	$+6			; Jump if below or =
020A:458E  8A D8				mov	bl,al
020A:4590  EB 22				jmp	short $+24h
							                        ;* No entry point to code
020A:4592  B5 0A				mov	ch,0Ah
020A:4594  F6 E5				mul	ch			; ax = reg * al
020A:4596  03 D8				add	bx,ax
020A:4598  46					inc	si
020A:4599  4D					dec	bp
020A:459A  FE C1				inc	cl
020A:459C  8A 14				mov	dl,[si]
020A:459E  80 EA 30				sub	dl,30h			; '0'
020A:45A1  80 FA 09				cmp	dl,9
020A:45A4  77 0E				ja	$+10h			; Jump if above
020A:45A6  46					inc	si
020A:45A7  4D					dec	bp
020A:45A8  FE C1				inc	cl
020A:45AA  8B C3				mov	ax,bx
020A:45AC  F6 E5				mul	ch			; ax = reg * al
020A:45AE  32 F6				xor	dh,dh			; Zero register
020A:45B0  03 C2				add	ax,dx
020A:45B2  8B D8				mov	bx,ax
020A:45B4  83 FB 00				cmp	bx,0
020A:45B7  74 0B				je	$+0Dh			; Jump if equal
020A:45B9  83 FB 0A				cmp	bx,0Ah
020A:45BC  72 4F				jb	$+51h			; Jump if below
020A:45BE  81 FB 00FF				cmp	bx,0FFh
020A:45C2  77 49				ja	$+4Bh			; Jump if above
020A:45C4  88 1E 2319				mov	byte ptr ds:[2319h],bl	; (020A:2319=0)
020A:45C8  80 FB 00				cmp	bl,0
020A:45CB  74 11				je	$+13h			; Jump if equal
020A:45CD  BF 4B5B				mov	di,4B5Bh
020A:45D0  C7 45 FF 2020			mov	word ptr [di-1],2020h
020A:45D5  56					push	si
020A:45D6  4E					dec	si
020A:45D7  32 ED				xor	ch,ch			; Zero register
020A:45D9  FD					std				; Set direction flag
020A:45DA  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:45DC  FC					cld				; Clear direction
020A:45DD  5E					pop	si
020A:45DE  83 FD 02				cmp	bp,2
020A:45E1  72 2A				jb	$+2Ch			; Jump if below
020A:45E3  83 FD 32				cmp	bp,32h
020A:45E6  77 25				ja	$+27h			; Jump if above
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 120

020A:45E8  80 3C 2C				cmp	byte ptr [si],2Ch	; ','
020A:45EB  74 06				je	$+8			; Jump if equal
020A:45ED  4D					dec	bp
020A:45EE  74 1D				jz	$+1Fh			; Jump if zero
020A:45F0  46					inc	si
020A:45F1  EB F5				jmp	short $-9
							                        ;* No entry point to code
020A:45F3  46					inc	si
020A:45F4  4D					dec	bp
020A:45F5  74 16				jz	$+18h			; Jump if zero
020A:45F7  80 3C 20				cmp	byte ptr [si],20h	; ' '
020A:45FA  74 F7				je	$-7			; Jump if equal
020A:45FC  80 3C 43				cmp	byte ptr [si],43h	; 'C'
020A:45FF  75 0C				jne	$+0Eh			; Jump if not equal
020A:4601  46					inc	si
020A:4602  8A 04				mov	al,[si]
020A:4604  2C 30				sub	al,30h			; '0'
020A:4606  3C 07				cmp	al,7
020A:4608  77 03				ja	$+5			; Jump if above
020A:460A  A2 2311				mov	byte ptr ds:[2311h],al	; (020A:2311=0)
020A:460D  5D					pop	bp
020A:460E  C3					retn
							                        ;* No entry point to code
020A:460F  90					nop
020A:4610  B4 60				mov	ah,60h			; '`'
020A:4612  B7 60				mov	bh,60h			; '`'
020A:4614  3C 4C				cmp	al,4Ch			; 'L'
020A:4616  74 08				je	$+0Ah			; Jump if equal
020A:4618  32 FF				xor	bh,bh			; Zero register
020A:461A  3C 52				cmp	al,52h			; 'R'
020A:461C  74 02				je	$+4			; Jump if equal
020A:461E  32 E4				xor	ah,ah			; Zero register
020A:4620  88 26 230E				mov	byte ptr ds:[230Eh],ah	; (020A:230E=0)
020A:4624  88 3E 230F				mov	byte ptr ds:[230Fh],bh	; (020A:230F=0)
020A:4628  BE 03D0				mov	si,3D0h
020A:462B  BA 0003				mov	dx,3
020A:462E  B9 0016				mov	cx,16h
020A:4631  E8 2168				call	$+216Bh
020A:4634  83 C6 3A				add	si,3Ah
020A:4637  4A					dec	dx
020A:4638  75 F4				jnz	$-0Ah			; Jump if not zero
020A:463A  B9 29B1				mov	cx,29B1h
020A:463D  81 E9 2368				sub	cx,2368h
020A:4641  BE 2368				mov	si,2368h
020A:4644  E8 2155				call	$+2158h
020A:4647  B9 24E0				mov	cx,24E0h
020A:464A  81 E9 2368				sub	cx,2368h
020A:464E  BE 2368				mov	si,2368h
020A:4651  8A 16 230E				mov	dl,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:4655  A0 230F				mov	al,byte ptr ds:[230Fh]	; (020A:230F=0)
020A:4658  A2 230E				mov	byte ptr ds:[230Eh],al	; (020A:230E=0)
020A:465B  E8 213E				call	$+2141h
020A:465E  BE 03DB				mov	si,3DBh
020A:4661  B9 0008				mov	cx,8
020A:4664  E8 2135				call	$+2138h
020A:4667  BE 047B				mov	si,47Bh
020A:466A  B9 0004				mov	cx,4
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 121

020A:466D  E8 212C				call	$+212Fh
020A:4670  88 16 230E				mov	byte ptr ds:[230Eh],dl	; (020A:230E=0)
020A:4674  B9 5097				mov	cx,5097h
020A:4677  81 E9 4C46				sub	cx,4C46h
020A:467B  BE 4C46				mov	si,4C46h
020A:467E  E8 211B				call	$+211Eh
020A:4681  C3					retn
							                        ;* No entry point to code
020A:4682  87 DB				xchg	bx,bx
020A:4684  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:4688  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:468D  74 35				je	$+37h			; Jump if equal
020A:468F  83 FB 02				cmp	bx,2
020A:4692  72 0F				jb	$+11h			; Jump if below
020A:4694  8A 44 01				mov	al,[si+1]
020A:4697  B3 07				mov	bl,7
020A:4699  3C 4E				cmp	al,4Eh			; 'N'
020A:469B  74 0D				je	$+0Fh			; Jump if equal
020A:469D  32 DB				xor	bl,bl			; Zero register
020A:469F  3C 46				cmp	al,46h			; 'F'
020A:46A1  74 07				je	$+9			; Jump if equal
020A:46A3  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:46A8  EB 1A				jmp	short $+1Ch
							                        ;* No entry point to code
020A:46AA  88 1E 3D9C				mov	byte ptr ds:[3D9Ch],bl	; (020A:3D9C=3Ch)
020A:46AE  80 FB 00				cmp	bl,0
020A:46B1  74 0E				je	$+10h			; Jump if equal
020A:46B3  80 3E 17A7 0A			cmp	byte ptr ds:[17A7h],0Ah	; (020A:17A7=0)
020A:46B8  73 0A				jae	$+0Ch			; Jump if above or =
020A:46BA  B0 0A				mov	al,0Ah
020A:46BC  E8 1CD1				call	$+1CD4h
020A:46BF  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:46C1  E8 1964				call	$+1967h
020A:46C4  C3					retn
							                        ;* No entry point to code
020A:46C5  87 DB				xchg	bx,bx
020A:46C7  90					nop
020A:46C8  89 36 4018				mov	word ptr ds:[4018h],si	; (020A:4018=0BF1Dh)
020A:46CC  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:46D0  01 1E 4018				add	word ptr ds:[4018h],bx	; (020A:4018=0BF1Dh)
020A:46D4  E8 F55D				call	$-0AA0h
020A:46D7  72 02				jc	$+4			; Jump if carry Set
020A:46D9  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:46DB  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:46E0  C3					retn
							                        ;* No entry point to code
020A:46E1  87 DB				xchg	bx,bx
020A:46E3  90					nop
020A:46E4  C6 06 1853 00			mov	byte ptr ds:[1853h],0	; (020A:1853=0)
020A:46E9  80 3E 448B 01			cmp	byte ptr ds:[448Bh],1	; (020A:448B=14h)
020A:46EE  75 08				jne	$+0Ah			; Jump if not equal
020A:46F0  C6 06 3F4B 12			mov	byte ptr ds:[3F4Bh],12h	; (020A:3F4B=56h)
020A:46F5  E9 0082				jmp	$+85h
							                        ;* No entry point to code
020A:46F8  89 36 4018				mov	word ptr ds:[4018h],si	; (020A:4018=0BF1Dh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 122

020A:46FC  8B 1E 3ECC				mov	bx,word ptr ds:[3ECCh]	; (020A:3ECC=181Eh)
020A:4700  01 1E 4018				add	word ptr ds:[4018h],bx	; (020A:4018=0BF1Dh)
020A:4704  33 DB				xor	bx,bx			; Zero register
020A:4706  81 3C 5856				cmp	word ptr [si],5856h
020A:470A  75 08				jne	$+0Ah			; Jump if not equal
020A:470C  83 C6 03				add	si,3
020A:470F  C6 06 1853 01			mov	byte ptr ds:[1853h],1	; (020A:1853=0)
020A:4714  E8 F51D				call	$-0AE0h
020A:4717  72 5C				jc	$+5Eh			; Jump if carry Set
020A:4719  80					db	80h
020A:471A  3C					db	3Ch
020A:471B  3A					db	3Ah
020A:471C  1775					dw	1775h
020A:471E  8046					dw	8046h
020A:4720  3E					db	3Eh
020A:4721  53					push	bx
020A:4722  18 01				sbb	[bx+di],al
020A:4724  75 06				jnz	$+8			; Jump if not zero
020A:4726  89 16 187C				mov	word ptr ds:[187Ch],dx	; (020A:187C=0B8E8h)
020A:472A  EB 04				jmp	short $+6
020A:472C  89 97 1854				mov	word ptr ds:[1854h][bx],dx	; (020A:1854=48h)
020A:4730  E8 F501				call	$-0AFCh
020A:4733  72 40				jc	$+42h			; Jump if carry Set
020A:4735  80 3E 1853 01			cmp	byte ptr ds:[1853h],1	; (020A:1853=0)
020A:473A  75 06				jne	$+8			; Jump if not equal
020A:473C  89 16 187E				mov	word ptr ds:[187Eh],dx	; (020A:187E=2401h)
020A:4740  EB 2D				jmp	short $+2Fh
020A:4742  89 97 1856				mov	word ptr ds:[1856h][bx],dx	; (020A:1856=80h)
020A:4746  80 3C 2C				cmp	byte ptr [si],2Ch	; ','
020A:4749  75 24				jne	$+26h			; Jump if not equal
020A:474B  46					inc	si
020A:474C  E8 F4E5				call	$-0B18h
020A:474F  72 24				jc	$+26h			; Jump if carry Set
020A:4751  80 3C 3A				cmp	byte ptr [si],3Ah	; ':'
020A:4754  75 0A				jne	$+0Ch			; Jump if not equal
020A:4756  46					inc	si
020A:4757  89 97 1858				mov	word ptr ds:[1858h][bx],dx	; (020A:1858=0)
020A:475B  E8 F4D6				call	$-0B27h
020A:475E  72 15				jc	$+17h			; Jump if carry Set
020A:4760  89 97 185A				mov	word ptr ds:[185Ah][bx],dx	; (020A:185A=3BFh)
020A:4764  80 3C 3B				cmp	byte ptr [si],3Bh	; ';'
020A:4767  75 06				jne	$+8			; Jump if not equal
020A:4769  46					inc	si
020A:476A  83 C3 08				add	bx,8
020A:476D  EB A5				jmp	short $-59h
020A:476F  FE 06 1853				inc	byte ptr ds:[1853h]	; (020A:1853=0)
020A:4773  EB 05				jmp	short $+7
020A:4775  C6 06 3F4B 09			mov	byte ptr ds:[3F4Bh],9	; (020A:3F4B=56h)
020A:477A  C3					retn
020A:477B  90					nop
020A:477C  2C 30				sub	al,30h			; '0'
020A:477E  3C 7F				cmp	al,7Fh
020A:4780  77 03				ja	$+5			; Jump if above
020A:4782  A2 2302				mov	byte ptr ds:[2302h],al	; (020A:2302=0)
020A:4785  C3					retn
020A:4786  87 DB				xchg	bx,bx
020A:4788  AC					lodsb				; String [si] to al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 123

020A:4789  3C 38				cmp	al,38h			; '8'
020A:478B  77 24				ja	$+26h			; Jump if above
020A:478D  72 27				jc	$+29h			; Jump if carry Set
020A:478F  4B					dec	bx
020A:4790  74 24				jz	$+26h			; Jump if zero
020A:4792  AC					lodsb				; String [si] to al
020A:4793  3C 2E				cmp	al,2Eh			; '.'
020A:4795  75 1F				jne	$+21h			; Jump if not equal
020A:4797  4B					dec	bx
020A:4798  74 1C				jz	$+1Eh			; Jump if zero
020A:479A  AC					lodsb				; String [si] to al
020A:479B  3C 58				cmp	al,58h			; 'X'
020A:479D  74 17				je	$+19h			; Jump if equal
020A:479F  3C 30				cmp	al,30h			; '0'
020A:47A1  77 0E				ja	$+10h			; Jump if above
020A:47A3  72 11				jc	$+13h			; Jump if carry Set
020A:47A5  4B					dec	bx
020A:47A6  74 0E				jz	$+10h			; Jump if zero
020A:47A8  AC					lodsb				; String [si] to al
020A:47A9  3C 58				cmp	al,58h			; 'X'
020A:47AB  74 09				je	$+0Bh			; Jump if equal
020A:47AD  3C 31				cmp	al,31h			; '1'
020A:47AF  76 05				jbe	$+7			; Jump if below or =
020A:47B1  90					nop
020A:47B2  90					nop
020A:47B3  E9 2B7F				jmp	$+2B82h
020A:47B6  C3					retn
020A:47B7  00					db	0
020A:47B8  00					db	0
020A:47B9  00					db	0
020A:47BA  00					db	0
020A:47BB  00					db	0
020A:47BC  00					db	0
020A:47BD  00 00				add	[bx+si],al
020A:47BF  00 BE 3D5D				add	[bp+3D5Dh],bh
020A:47C3  80 3E 1F82 00			cmp	byte ptr ds:[1F82h],0	; (020A:1F82=0)
020A:47C8  74 03				je	$+5			; Jump if equal
020A:47CA  E9 EEA7				jmp	$-1156h
							                        ;* No entry point to code
020A:47CD  B6 01				mov	dh,1
020A:47CF  B2 37				mov	dl,37h			; '7'
020A:47D1  E8 7590				call	$+7593h
020A:47D4  0A F6				or	dh,dh			; Zero ?
020A:47D6  74 09				jz	$+0Bh			; Jump if zero
020A:47D8  83 4C D6 04				or	word ptr [si-2Ah],4
020A:47DC  B2 25				mov	dl,25h			; '%'
020A:47DE  E8 7583				call	$+7586h
020A:47E1  A1 3D3C				mov	ax,word ptr ds:[3D3Ch]	; (020A:3D3C=2477h)
020A:47E4  A3 3D36				mov	word ptr ds:[3D36h],ax	; (020A:3D36=3D3Ch)
020A:47E7  A1 3D3E				mov	ax,word ptr ds:[3D3Eh]	; (020A:3D3E=3E80h)
020A:47EA  A3 3D38				mov	word ptr ds:[3D38h],ax	; (020A:3D38=44EBh)
020A:47ED  F7 06 1F86 8000			test	word ptr ds:[1F86h],8000h	; (020A:1F86=0)
020A:47F3  74 40				jz	$+42h			; Jump if zero
020A:47F5  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:47FA  06					push	es
020A:47FB  E8 30BA				call	$+30BDh
020A:47FE  26: C6 06 0220 63			mov	byte ptr es:[220h],63h	; (020A:0220=0) 'c'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 124

020A:4804  26: C6 06 0188 63			mov	byte ptr es:[188h],63h	; (020A:0188=2) 'c'
020A:480A  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:480F  9C					pushf				; Push flags
020A:4810  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:4815  5A					pop	dx
020A:4816  8E C2				mov	es,dx
020A:4818  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:481D  5A					pop	dx
020A:481E  75 0A				jnz	$+0Ch			; Jump if not zero
020A:4820  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:4825  74 03				je	$+5			; Jump if equal
020A:4827  E8 3556				call	$+3559h
020A:482A  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:482F  9D					popf				; Pop flags
020A:4830  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:4835  F7 06 3D3C 0002			test	word ptr ds:[3D3Ch],2	; (020A:3D3C=2477h)
020A:483B  74 07				jz	$+9			; Jump if zero
020A:483D  B0 01				mov	al,1
020A:483F  9A 1481:6CB0				call	far ptr $+2471h
020A:4844  8A 16 1D90				mov	dl,byte ptr ds:[1D90h]	; (020A:1D90=0)
020A:4848  80 C2 61				add	dl,61h			; 'a'
020A:484B  88 16 1F13				mov	byte ptr ds:[1F13h],dl	; (020A:1F13=0)
020A:484F  BA 3232				mov	dx,3232h
020A:4852  B4 1A				mov	ah,1Ah
020A:4854  CD 21				int	21h			; DOS Services  ah=function 1Ah
										;  set DTA(disk xfer area) ds:dx
020A:4856  BA 1F15				mov	dx,1F15h
020A:4859  80 3E 1F16 3A			cmp	byte ptr ds:[1F16h],3Ah	; (020A:1F16=30h) ':'
020A:485E  74 03				je	$+5			; Jump if equal
020A:4860  BA 1F13				mov	dx,1F13h
020A:4863  B9 0000				mov	cx,0
020A:4866  B4 4E				mov	ah,4Eh
020A:4868  CD 21				int	21h			; DOS Services  ah=function 4Eh
										;  find 1st filenam match @ds:dx
020A:486A  72 29				jc	$+2Bh			; Jump if carry Set
020A:486C  E8 1301				call	$+1304h
020A:486F  A0 1208				mov	al,byte ptr ds:[1208h]	; (020A:1208=0)
020A:4872  88 47 52				mov	[bx+52h],al
020A:4875  B4 19				mov	ah,19h
020A:4877  BA 174B				mov	dx,174Bh
020A:487A  9A 1481:2F90				call	far ptr $-18EAh
020A:487F  3C 59				cmp	al,59h			; 'Y'
020A:4881  74 12				je	$+14h			; Jump if equal
020A:4883  8A 16 1D8F				mov	dl,byte ptr ds:[1D8Fh]	; (020A:1D8F=0)
020A:4887  B4 0E				mov	ah,0Eh
020A:4889  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:488B  0AE8			data_173	dw	0AE8h
020A:488D  13 C6				adc	ax,si
020A:488F  47					inc	di
020A:4890  52					push	dx
020A:4891  0F			;*		pop	cs			; Dangerous-8088 only
020A:4891  0F					db	0Fh
020A:4892  E9 EDDF				jmp	$-121Eh
							                        ;* No entry point to code
020A:4895  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:4899  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 125

020A:489D  E8 16DC				call	$+16DFh
020A:48A0  E8 301B				call	$+301Eh
020A:48A3  B9 000C				mov	cx,0Ch
020A:48A6  BE 036A				mov	si,36Ah
020A:48A9  BF 2066				mov	di,2066h
020A:48AC  80 3C 00				cmp	byte ptr [si],0
020A:48AF  74 09				je	$+0Bh			; Jump if equal
020A:48B1  80 3C 20				cmp	byte ptr [si],20h	; ' '
020A:48B4  74 04				je	$+6			; Jump if equal
020A:48B6  FC					cld				; Clear direction
020A:48B7  A4					movsb				; Mov [si] to es:[di]
020A:48B8  E2 F2				loop	$-0Ch			; Loop if cx > 0

020A:48BA  BB 3D05				mov	bx,3D05h
020A:48BD  B9 0020				mov	cx,20h
020A:48C0  BE 0378				mov	si,378h
020A:48C3  BF 2076				mov	di,2076h
020A:48C6  FC					cld				; Clear direction
020A:48C7  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:48C9  F7 47 2E 0002			test	word ptr [bx+2Eh],2
020A:48CE  74 03				jz	$+5			; Jump if zero
020A:48D0  E9 2988				jmp	$+298Bh
							                        ;* No entry point to code
020A:48D3  F7 06 3D3E 0020			test	word ptr ds:[3D3Eh],20h	; (020A:3D3E=3E80h)
020A:48D9  75 0A				jnz	$+0Ch			; Jump if not zero
020A:48DB  C6 06 58CD 2A			mov	byte ptr ds:[58CDh],2Ah	; (020A:58CD=1Bh) '*'
020A:48E0  C6 06 5B04 2A			mov	byte ptr ds:[5B04h],2Ah	; (020A:5B04=7) '*'
020A:48E5  B9 FFFF				mov	cx,0FFFFh
020A:48E8  E8 2FFA				call	$+2FFDh
020A:48EB  8B D8				mov	bx,ax
020A:48ED  E8 2FEF				call	$+2FF2h
020A:48F0  3B C3				cmp	ax,bx
020A:48F2  77 40				ja	$+42h			; Jump if above
020A:48F4  83 3E 1CE8 00			cmp	word ptr ds:[1CE8h],0	; (020A:1CE8=0)
020A:48F9  75 41				jne	$+43h			; Jump if not equal
020A:48FB  8B 1E 17A9				mov	bx,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:48FF  8C C8				mov	ax,cs
020A:4901  2D 0010				sub	ax,10h
020A:4904  06					push	es
020A:4905  8E C0				mov	es,ax
020A:4907  B4 4A				mov	ah,4Ah
020A:4909  CD 21				int	21h			; DOS Services  ah=function 4Ah
										;  change memory allocation
										;   bx=bytes/16, es=mem segment
020A:490B  07					pop	es
020A:490C  73 06				jnc	$+8			; Jump if carry=0
020A:490E  B8 0008				mov	ax,8
020A:4911  E9 28C0				jmp	$+28C3h
							                        ;* No entry point to code
020A:4914  B9 FFFF				mov	cx,0FFFFh
020A:4917  8C CB				mov	bx,cs
020A:4919  83 EB 10				sub	bx,10h
020A:491C  2B C3				sub	ax,bx
020A:491E  8B 1E 17A9				mov	bx,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:4922  2B D8				sub	bx,ax
020A:4924  81 FB 1000				cmp	bx,1000h
020A:4928  73 0A				jae	$+0Ch			; Jump if above or =
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 126

020A:492A  8B CB				mov	cx,bx
020A:492C  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:492E  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:4930  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:4932  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:4934  89 0E 3DA1				mov	word ptr ds:[3DA1h],cx	; (020A:3DA1=0B007h)
020A:4938  D1 E9				shr	cx,1			; Shift w/zeros fill
020A:493A  EB 24				jmp	short $+26h
							                        ;* No entry point to code
020A:493C  E8 2FA0				call	$+2FA3h
020A:493F  8B 0E 1CE8				mov	cx,word ptr ds:[1CE8h]	; (020A:1CE8=0)
020A:4943  2B C8				sub	cx,ax
020A:4945  81 F9 1000				cmp	cx,1000h
020A:4949  76 03				jbe	$+5			; Jump if below or =
020A:494B  B9 1000				mov	cx,1000h
020A:494E  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:4950  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:4952  D1 E1				shl	cx,1			; Shift w/zeros fill
020A:4954  89 0E 3DA1				mov	word ptr ds:[3DA1h],cx	; (020A:3DA1=0B007h)
020A:4958  FF 0E 3DA1				dec	word ptr ds:[3DA1h]	; (020A:3DA1=0B007h)
020A:495C  D1 26 3DA1				shl	word ptr ds:[3DA1h],1	; (020A:3DA1=0B007h) Shift w/zeros fil
020A:4960  E8 2F5E				call	$+2F61h
020A:4963  B8 FFFF				mov	ax,0FFFFh
020A:4966  33 FF				xor	di,di			; Zero register
020A:4968  FC					cld				; Clear direction
020A:4969  F3/ AB				rep	stosw			; Rep when cx >0 Store ax to es:[di]
020A:496B  E8 2F50				call	$+2F53h
020A:496E  B4 2C				mov	ah,2Ch
020A:4970  CD 21				int	21h			; DOS Services  ah=function 2Ch
										;  get time, cx=hrs/min, dx=sec
020A:4972  89 0E 3D90				mov	word ptr ds:[3D90h],cx	; (020A:3D90=573h)
020A:4976  89 16 3D92				mov	word ptr ds:[3D92h],dx	; (020A:3D92=0AB0h)
020A:497A  E8 11F3				call	$+11F6h
020A:497D  A0 1207				mov	al,byte ptr ds:[1207h]	; (020A:1207=0)
020A:4980  88 47 4C				mov	[bx+4Ch],al
020A:4983  C6 47 4E 07				mov	byte ptr [bx+4Eh],7
020A:4987  C6 47 3F 00				mov	byte ptr [bx+3Fh],0
020A:498B  C6 47 40 00				mov	byte ptr [bx+40h],0
020A:498F  C6 47 56 00				mov	byte ptr [bx+56h],0
020A:4993  C6 47 70 00				mov	byte ptr [bx+70h],0
020A:4997  C6 47 71 00				mov	byte ptr [bx+71h],0
020A:499B  C6 47 72 00				mov	byte ptr [bx+72h],0
020A:499F  C6 47 73 00				mov	byte ptr [bx+73h],0
020A:49A3  C6 47 74 00				mov	byte ptr [bx+74h],0
020A:49A7  C6 47 75 00				mov	byte ptr [bx+75h],0
020A:49AB  C6 47 34 00				mov	byte ptr [bx+34h],0
020A:49AF  C6 47 35 00				mov	byte ptr [bx+35h],0
020A:49B3  C6 47 36 00				mov	byte ptr [bx+36h],0
020A:49B7  E8 318E				call	$+3191h
020A:49BA  80 3E 44F2 00			cmp	byte ptr ds:[44F2h],0	; (020A:44F2=45h)
020A:49BF  74 4B				je	$+4Dh			; Jump if equal
020A:49C1  BE 0000				mov	si,0
020A:49C4  E8 2EEB				call	$+2EEEh
020A:49C7  33 D2				xor	dx,dx			; Zero register
020A:49C9  B1 04				mov	cl,4
020A:49CB  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:49CF  74 11				je	$+13h			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 127

020A:49D1  26: 8B 44 04				mov	ax,es:[si+4]
020A:49D5  26: 2B 44 02				sub	ax,es:[si+2]
020A:49D9  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:49DB  03 D0				add	dx,ax
020A:49DD  83 C6 19				add	si,19h
020A:49E0  EB E9				jmp	short $-15h
							                        ;* No entry point to code
020A:49E2  81 FA 0400				cmp	dx,400h
020A:49E6  72 24				jb	$+26h			; Jump if below
020A:49E8  D1 EA				shr	dx,1			; Shift w/zeros fill
020A:49EA  BE 0000				mov	si,0
020A:49ED  26: 03 14				add	dx,es:[si]
020A:49F0  32 C9				xor	cl,cl			; Zero register
020A:49F2  83 C6 19				add	si,19h
020A:49F5  FE C1				inc	cl
020A:49F7  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:49FB  74 0F				je	$+11h			; Jump if equal
020A:49FD  26: 3B 14				cmp	dx,es:[si]
020A:4A00  72 F0				jb	$-0Eh			; Jump if below
020A:4A02  26: 8B 04				mov	ax,es:[si]
020A:4A05  A3 3DA6				mov	word ptr ds:[3DA6h],ax	; (020A:3DA6=816Ch)
020A:4A08  88 0E 3DA8				mov	byte ptr ds:[3DA8h],cl	; (020A:3DA8=14h)
020A:4A0C  C7 06 17A5 0010			mov	word ptr ds:[17A5h],10h	; (020A:17A5=0)
020A:4A12  9A 1481:33A8				call	far ptr $-166Ah
020A:4A17  B4 05				mov	ah,5
020A:4A19  9A 1481:2F90				call	far ptr $-1A89h
020A:4A1E  8A 1E 1CF4				mov	bl,byte ptr ds:[1CF4h]	; (020A:1CF4=0)
020A:4A22  FE CB				dec	bl
020A:4A24  BA FFFF				mov	dx,0FFFFh
020A:4A27  BE 0000				mov	si,0
020A:4A2A  E8 2E85				call	$+2E88h
020A:4A2D  32 FF				xor	bh,bh			; Zero register
020A:4A2F  81 FE 30F1				cmp	si,30F1h
020A:4A33  73 08				jae	$+0Ah			; Jump if above or =
020A:4A35  26: 8B 04				mov	ax,es:[si]
020A:4A38  3D FFFF				cmp	ax,0FFFFh
020A:4A3B  75 02				jne	$+4			; Jump if not equal
020A:4A3D  EB 65				jmp	short $+67h
							                        ;* No entry point to code
020A:4A3F  26: F6 44 0B 40			test	byte ptr es:[si+0Bh],40h	; '@'
020A:4A44  74 02				jz	$+4			; Jump if zero
020A:4A46  FE C7				inc	bh
020A:4A48  BF 30F1				mov	di,30F1h
020A:4A4B  32 C9				xor	cl,cl			; Zero register
020A:4A4D  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020A:4A51  74 0F				je	$+11h			; Jump if equal
020A:4A53  26: 3B 05				cmp	ax,es:[di]
020A:4A56  74 12				je	$+14h			; Jump if equal
020A:4A58  83 C7 02				add	di,2
020A:4A5B  FE C1				inc	cl
020A:4A5D  80 F9 FA				cmp	cl,0FAh
020A:4A60  72 EB				jb	$-13h			; Jump if below
020A:4A62  3B C2				cmp	ax,dx
020A:4A64  74 02				je	$+4			; Jump if equal
020A:4A66  FE C3				inc	bl
020A:4A68  8A CB				mov	cl,bl
020A:4A6A  88 0E 1CFA				mov	byte ptr ds:[1CFAh],cl	; (020A:1CFA=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 128

020A:4A6E  28 3E 1CFA				sub	byte ptr ds:[1CFAh],bh	; (020A:1CFA=0)
020A:4A72  80 F9 19				cmp	cl,19h
020A:4A75  77 07				ja	$+9			; Jump if above
020A:4A77  80 C1 41				add	cl,41h			; 'A'
020A:4A7A  B5 20				mov	ch,20h			; ' '
020A:4A7C  EB 13				jmp	short $+15h
							                        ;* No entry point to code
020A:4A7E  B5 41				mov	ch,41h			; 'A'
020A:4A80  80 E9 1A				sub	cl,1Ah
020A:4A83  80 F9 19				cmp	cl,19h
020A:4A86  76 04				jbe	$+6			; Jump if below or =
020A:4A88  FE C5				inc	ch
020A:4A8A  EB F4				jmp	short $-0Ah
							                        ;* No entry point to code
020A:4A8C  80 C1 41				add	cl,41h			; 'A'
020A:4A8F  86 CD				xchg	cl,ch
020A:4A91  26: F7 44 0C 8000			test	word ptr es:[si+0Ch],8000h
020A:4A97  75 04				jnz	$+6			; Jump if not zero
020A:4A99  26: 89 4C 0C				mov	es:[si+0Ch],cx
020A:4A9D  8B D0				mov	dx,ax
020A:4A9F  83 C6 19				add	si,19h
020A:4AA2  EB 8B				jmp	short $-73h
							                        ;* No entry point to code
020A:4AA4  BE 0000				mov	si,0
020A:4AA7  BF 0000				mov	di,0
020A:4AAA  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:4AAE  75 03				jne	$+5			; Jump if not equal
020A:4AB0  E9 0111				jmp	$+114h
							                        ;* No entry point to code
020A:4AB3  26: F6 44 0B 01			test	byte ptr es:[si+0Bh],1
020A:4AB8  75 05				jnz	$+7			; Jump if not zero
020A:4ABA  83 C6 19				add	si,19h
020A:4ABD  EB E8				jmp	short $-16h
							                        ;* No entry point to code
020A:4ABF  26: 8B 04				mov	ax,es:[si]
020A:4AC2  26: 8B 5C 02				mov	bx,es:[si+2]
020A:4AC6  26: 8B 4C 04				mov	cx,es:[si+4]
020A:4ACA  26: F6 45 0B 01			test	byte ptr es:[di+0Bh],1
020A:4ACF  74 0B				jz	$+0Dh			; Jump if zero
020A:4AD1  83 C7 19				add	di,19h
020A:4AD4  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020A:4AD8  75 F0				jne	$-0Eh			; Jump if not equal
020A:4ADA  EB DE				jmp	short $-20h
							                        ;* No entry point to code
020A:4ADC  26: 3B 05				cmp	ax,es:[di]
020A:4ADF  75 F0				jne	$-0Eh			; Jump if not equal
020A:4AE1  26: 3B 4D 02				cmp	cx,es:[di+2]
020A:4AE5  72 EA				jb	$-14h			; Jump if below
020A:4AE7  26: 3B 5D 04				cmp	bx,es:[di+4]
020A:4AEB  77 E4				ja	$-1Ah			; Jump if above
020A:4AED  26: 3B 5D 02				cmp	bx,es:[di+2]
020A:4AF1  76 15				jbe	$+17h			; Jump if below or =
020A:4AF3  26: 3B 4D 04				cmp	cx,es:[di+4]
020A:4AF7  72 47				jb	$+49h			; Jump if below
020A:4AF9  8B D3				mov	dx,bx
020A:4AFB  4A					dec	dx
020A:4AFC  26: 3B 55 02				cmp	dx,es:[di+2]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 129

020A:4B00  74 1B				je	$+1Dh			; Jump if equal
020A:4B02  26: 89 55 04				mov	es:[di+4],dx
020A:4B06  EB C9				jmp	short $-35h
							                        ;* No entry point to code
020A:4B08  26: 3B 4D 04				cmp	cx,es:[di+4]
020A:4B0C  73 0F				jae	$+11h			; Jump if above or =
020A:4B0E  8B D1				mov	dx,cx
020A:4B10  42					inc	dx
020A:4B11  26: 3B 55 04				cmp	dx,es:[di+4]
020A:4B15  74 06				je	$+8			; Jump if equal
020A:4B17  26: 89 55 02				mov	es:[di+2],dx
020A:4B1B  EB B4				jmp	short $-4Ah
							                        ;* No entry point to code
020A:4B1D  06					push	es
020A:4B1E  1F					pop	ds
020A:4B1F  56					push	si
020A:4B20  57					push	di
020A:4B21  8B F7				mov	si,di
020A:4B23  83 C6 19				add	si,19h
020A:4B26  B9 30F1				mov	cx,30F1h
020A:4B29  2B CE				sub	cx,si
020A:4B2B  FC					cld				; Clear direction
020A:4B2C  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:4B2E  5F					pop	di
020A:4B2F  5E					pop	si
020A:4B30  E8 2D6D				call	$+2D70h
020A:4B33  3B F7				cmp	si,di
020A:4B35  72 03				jb	$+5			; Jump if below
020A:4B37  83 EE 19				sub	si,19h
020A:4B3A  FE 0E 1CF1				dec	byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:4B3E  EB 94				jmp	short $-6Ah
							                        ;* No entry point to code
020A:4B40  8B D3				mov	dx,bx
020A:4B42  4A					dec	dx
020A:4B43  26: 3B 55 02				cmp	dx,es:[di+2]
020A:4B47  74 C5				je	$-39h			; Jump if equal
020A:4B49  26: 87 55 04				xchg	es:[di+4],dx
020A:4B4D  80 3E 1CF1 FA			cmp	byte ptr ds:[1CF1h],0FAh	; (020A:1CF1=0)
020A:4B52  73 6D				jae	$+6Fh			; Jump if above or =
020A:4B54  56					push	si
020A:4B55  53					push	bx
020A:4B56  50					push	ax
020A:4B57  B8 0019				mov	ax,19h
020A:4B5A  8A 1E 1CF1				mov	bl,byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:4B5E  F6 E3				mul	bl			; ax = reg * al
020A:4B60  05 0000				add	ax,0
020A:4B63  8B F0				mov	si,ax
020A:4B65  8B D9				mov	bx,cx
020A:4B67  43					inc	bx
020A:4B68  3B DA				cmp	bx,dx
020A:4B6A  74 53				je	$+55h			; Jump if equal
020A:4B6C  26: 89 5C 02				mov	es:[si+2],bx
020A:4B70  58					pop	ax
020A:4B71  26: 89 04				mov	es:[si],ax
020A:4B74  26: 89 54 04				mov	es:[si+4],dx
020A:4B78  26: 8B 55 06				mov	dx,es:[di+6]
020A:4B7C  26: 89 54 06				mov	es:[si+6],dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 130

020A:4B80  26: 8B 55 08				mov	dx,es:[di+8]
020A:4B84  26: 89 54 08				mov	es:[si+8],dx
020A:4B88  26: 8B 55 0A				mov	dx,es:[di+0Ah]
020A:4B8C  26: 89 54 0A				mov	es:[si+0Ah],dx
020A:4B90  26: 8B 55 0C				mov	dx,es:[di+0Ch]
020A:4B94  26: 89 54 0C				mov	es:[si+0Ch],dx
020A:4B98  26: 8A 55 0E				mov	dl,es:[di+0Eh]
020A:4B9C  80 E2 BF				and	dl,0BFh
020A:4B9F  26: 88 54 0E				mov	es:[si+0Eh],dl
020A:4BA3  26: 8B 55 0F				mov	dx,es:[di+0Fh]
020A:4BA7  26: 89 54 0F				mov	es:[si+0Fh],dx
020A:4BAB  26: 8B 55 11				mov	dx,es:[di+11h]
020A:4BAF  26: 89 54 11				mov	es:[si+11h],dx
020A:4BB3  26: 8B 55 13				mov	dx,es:[di+13h]
020A:4BB7  26: 89 54 13				mov	es:[si+13h],dx
020A:4BBB  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:4BBF  5B					pop	bx
020A:4BC0  5E					pop	si
020A:4BC1  E9 FF0D				jmp	$-0F0h
							                        ;* No entry point to code
020A:4BC4  E8 D3F9				call	$-2C04h
020A:4BC7  E8 2CE8				call	$+2CEBh
020A:4BCA  8A 16 1CF1				mov	dl,byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:4BCE  80 FA 01				cmp	dl,1
020A:4BD1  77 03				ja	$+5			; Jump if above
020A:4BD3  E9 00B1				jmp	$+0B4h
							                        ;* No entry point to code
020A:4BD6  BF 0000				mov	di,0
020A:4BD9  32 F6				xor	dh,dh			; Zero register
020A:4BDB  F7 06 1F86 1000			test	word ptr ds:[1F86h],1000h	; (020A:1F86=0)
020A:4BE1  75 F0				jnz	$-0Eh			; Jump if not zero
020A:4BE3  26: F6 45 0B 01			test	byte ptr es:[di+0Bh],1
020A:4BE8  75 E9				jnz	$-15h			; Jump if not zero
020A:4BEA  26: 80 7D 0A 03			cmp	byte ptr es:[di+0Ah],3
020A:4BEF  74 63				je	$+65h			; Jump if equal
020A:4BF1  26: 8B 4D 04				mov	cx,es:[di+4]
020A:4BF5  26: 2B 4D 02				sub	cx,es:[di+2]
020A:4BF9  83 F9 64				cmp	cx,64h
020A:4BFC  72 56				jb	$+58h			; Jump if below
020A:4BFE  E8 2C9F				call	$+2CA2h
020A:4C01  26: 8B 05				mov	ax,es:[di]
020A:4C04  3B 06 1D01				cmp	ax,word ptr ds:[1D01h]	; (020A:1D01=0)
020A:4C08  74 4A				je	$+4Ch			; Jump if equal
020A:4C0A  8E D8				mov	ds,ax
020A:4C0C  26: 8B 75 02				mov	si,es:[di+2]
020A:4C10  56					push	si
020A:4C11  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:4C16  06					push	es
020A:4C17  9A 1481:4B74				call	far ptr $-0A3h
020A:4C1C  2E			data_174	db	2Eh			; Data table (indexed access)
020A:4C1D  89 16 00C2				mov	word ptr ds:[0C2h],dx	; (1828:00C2=5557h)
020A:4C21  9C					pushf				; Push flags
020A:4C22  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:4C27  5A					pop	dx
020A:4C28  8E C2				mov	es,dx
020A:4C2A  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:4C2F  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 131

020A:4C30  75 0A				jnz	$+0Ch			; Jump if not zero
020A:4C32  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:4C37  74 03				je	$+5			; Jump if equal
020A:4C39  E8 3144				call	$+3147h
020A:4C3C  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:4C41  9D					popf				; Pop flags
020A:4C42  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:4C47  5E					pop	si
020A:4C48  72 0A				jc	$+0Ch			; Jump if carry Set
020A:4C4A  FE C6				inc	dh
020A:4C4C  26: 80 4D 0E 80			or	byte ptr es:[di+0Eh],80h
020A:4C51  26: 8B 1D				mov	bx,es:[di]
020A:4C54  83 C7 19				add	di,19h
020A:4C57  FE CA				dec	dl
020A:4C59  75 80				jnz	$-7Eh			; Jump if not zero
020A:4C5B  E8 2C42				call	$+2C45h
020A:4C5E  80 FE 01				cmp	dh,1
020A:4C61  75 24				jne	$+26h			; Jump if not equal
020A:4C63  8A 16 1CF1				mov	dl,byte ptr ds:[1CF1h]	; (1828:1CF1=2)
020A:4C67  BF 0000				mov	di,0
020A:4C6A  26: 80 7D 0A 03			cmp	byte ptr es:[di+0Ah],3
020A:4C6F  74 0F				je	$+11h			; Jump if equal
020A:4C71  26: F6 45 0E 80			test	byte ptr es:[di+0Eh],80h
020A:4C76  75 08				jnz	$+0Ah			; Jump if not zero
020A:4C78  26: 89 5D 06				mov	es:[di+6],bx
020A:4C7C  26: 89 5D 08				mov	es:[di+8],bx
020A:4C80  83 C7 19				add	di,19h
020A:4C83  FE CA				dec	dl
020A:4C85  75 E3				jnz	$-1Bh			; Jump if not zero
020A:4C87  E8 2C16				call	$+2C19h
020A:4C8A  F6 06 2302 40			test	byte ptr ds:[2302h],40h	; (1828:2302=46h) '@'
020A:4C8F  74 27				jz	$+29h			; Jump if zero
020A:4C91  9A 1481:2C14				call	far ptr $-207Dh
020A:4C96  C6 06 2317 00			mov	byte ptr ds:[2317h],0	; (1828:2317=0FAh)
020A:4C9B  9A 1481:8E50				call	far ptr $+41B5h
020A:4CA0  8B 1E 302D				mov	bx,word ptr ds:[302Dh]	; (1828:302D=413Ch)
020A:4CA4  E8 58F1				call	$+58F4h
020A:4CA7  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (1828:17A8=2)
020A:4CAC  75 07				jne	$+9			; Jump if not equal
020A:4CAE  8B 1E 302D				mov	bx,word ptr ds:[302Dh]	; (1828:302D=413Ch)
020A:4CB2  E8 58E3				call	$+58E6h
020A:4CB5  E9 21F8				jmp	$+21FBh
							                        ;* No entry point to code
020A:4CB8  9A 1481:7644				call	far ptr $+298Ch
020A:4CBD  F7 06 3D41 1000			test	word ptr ds:[3D41h],1000h	; (1828:3D41=1E8Bh)
020A:4CC3  75 42				jnz	$+44h			; Jump if not zero
020A:4CC5  B2 00				mov	dl,0
020A:4CC7  E8 2BE8				call	$+2BEBh
020A:4CCA  B8 0019				mov	ax,19h
020A:4CCD  F6 E2				mul	dl			; ax = reg * al
020A:4CCF  05 0000				add	ax,0
020A:4CD2  8B D8				mov	bx,ax
020A:4CD4  26: 8B 47 0A				mov	ax,es:[bx+0Ah]
020A:4CD8  3C 03				cmp	al,3
020A:4CDA  74 23				je	$+25h			; Jump if equal
020A:4CDC  3C 0A				cmp	al,0Ah
020A:4CDE  74 1F				je	$+21h			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 132

020A:4CE0  26: 8B 07				mov	ax,es:[bx]
020A:4CE3  26: 8B 7F 02				mov	di,es:[bx+2]
020A:4CE7  26: 8B 4F 04				mov	cx,es:[bx+4]
020A:4CEB  8E C0				mov	es,ax
020A:4CED  2B CF				sub	cx,di
020A:4CEF  81 F9 03E8				cmp	cx,3E8h
020A:4CF3  72 03				jb	$+5			; Jump if below
020A:4CF5  B9 03E8				mov	cx,3E8h
020A:4CF8  9A 1481:7310				call	far ptr $+2618h
020A:4CFD  72 08				jc	$+0Ah			; Jump if carry Set
020A:4CFF  FE C2				inc	dl
020A:4D01  3A 16 1CF1				cmp	dl,byte ptr ds:[1CF1h]	; (1828:1CF1=2)
020A:4D05  76 C0				jbe	$-3Eh			; Jump if below or =
020A:4D07  E8 2BA8				call	$+2BABh
020A:4D0A  26: A1 0000				mov	ax,word ptr es:[0]	; (1828:0000=8ECBh)
020A:4D0E  A3 1D08				mov	word ptr ds:[1D08h],ax	; (1828:1D08=8126h)
020A:4D11  E9 90FC				jmp	$-6F01h
							                        ;* No entry point to code
020A:4D14  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (1828:2317=0FAh)
020A:4D19  74 5C				je	$+5Eh			; Jump if equal
020A:4D1B  E8 2BA0				call	$+2BA3h
020A:4D1E  BF 0378				mov	di,378h
020A:4D21  B9 0021				mov	cx,21h
020A:4D24  B0 20				mov	al,20h			; ' '
020A:4D26  FC					cld				; Clear direction
020A:4D27  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:4D29  E8 0E44				call	$+0E47h
020A:4D2C  C6 47 52 00				mov	byte ptr [bx+52h],0
020A:4D30  C6 47 69 0F				mov	byte ptr [bx+69h],0Fh
020A:4D34  C6 47 33 0F				mov	byte ptr [bx+33h],0Fh
020A:4D38  C6 47 66 0F				mov	byte ptr [bx+66h],0Fh
020A:4D3C  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020A:4D40  E8 098D				call	$+990h
020A:4D43  02B4					dw	2B4h
020A:4D45  32 FF				xor	bh,bh			; Zero register
020A:4D47  BA 0912				mov	dx,912h
020A:4D4A  9A 1481:3240				call	far ptr $-1B0Ah
020A:4D4F  E8 1236				call	$+1239h
020A:4D52  BE 0378				mov	si,378h
020A:4D55  B1 20				mov	cl,20h			; ' '
020A:4D57  B3 01				mov	bl,1
020A:4D59  9A 1481:06C0				call	far ptr $-4699h
020A:4D5E  E8 0E37				call	$+0E3Ah
020A:4D61  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020A:4D65  C6 47 69 07				mov	byte ptr [bx+69h],7
020A:4D69  C6 47 66 07				mov	byte ptr [bx+66h],7
020A:4D6D  C6 47 67 00				mov	byte ptr [bx+67h],0
020A:4D71  E8 1208				call	$+120Bh
020A:4D74  E8 0A85				call	$+0A88h
020A:4D77  E9 E91A				jmp	$-16E3h
							                        ;* No entry point to code
020A:4D7A  2E: 80 3E 4775 00			cmp	byte ptr cs:[4775h],0	; (020A:4775=0C6h)
020A:4D80  74 08				je	$+0Ah			; Jump if equal
020A:4D82  9A 1481:3128				call	far ptr $-1C5Ah
020A:4D87  E9 E90A				jmp	$-16F3h
							                        ;* No entry point to code
020A:4D8A  E8 0013		;*		call	$+16h			;*
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 133

020A:4D8A  E8 13 00				db	0E8h, 13h, 00h
020A:4D8D  80 3E 1EB2 00			cmp	byte ptr ds:[1EB2h],0	; (1828:1EB2=75h)
020A:4D92  74 03				je	$+5			; Jump if equal
020A:4D94  E8 2DB1				call	$+2DB4h
020A:4D97  E8 0DFE				call	$+0E01h
020A:4D9A  E8 0A5F				call	$+0A62h
020A:4D9D  E9 E8F4				jmp	$-1709h
							                        ;* No entry point to code
020A:4DA0  E8 0DCD				call	$+0DD0h
020A:4DA3  C6 47 53 00				mov	byte ptr [bx+53h],0
020A:4DA7  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020A:4DAB  B4 02				mov	ah,2
020A:4DAD  9A 1481:2F90				call	far ptr $-1E1Dh
020A:4DB2  B4 02				mov	ah,2
020A:4DB4  32 FF				xor	bh,bh			; Zero register
020A:4DB6  BA 171A				mov	dx,171Ah
020A:4DB9  9A 1481:3240				call	far ptr $-1B79h
020A:4DBE  E8 11C7				call	$+11CAh
020A:4DC1  B1 28				mov	cl,28h			; '('
020A:4DC3  B3 01				mov	bl,1
020A:4DC5  BE 07E0				mov	si,7E0h
020A:4DC8  9A 1481:06C0				call	far ptr $-4708h
020A:4DCD  B3 28				mov	bl,28h			; '('
020A:4DCF  2A D9				sub	bl,cl
020A:4DD1  32 FF				xor	bh,bh			; Zero register
020A:4DD3  83 FB 00				cmp	bx,0
020A:4DD6  75 02				jne	$+4			; Jump if not equal
020A:4DD8  EB 64				jmp	short $+66h
							                        ;* No entry point to code
020A:4DDA  3C 1B				cmp	al,1Bh
020A:4DDC  75 02				jne	$+4			; Jump if not equal
020A:4DDE  EB 5E				jmp	short $+60h
							                        ;* No entry point to code
020A:4DE0  E8 2ADB				call	$+2ADEh
020A:4DE3  BF 07E0				mov	di,7E0h
020A:4DE6  B0 20				mov	al,20h			; ' '
020A:4DE8  8B CB				mov	cx,bx
020A:4DEA  FC					cld				; Clear direction
020A:4DEB  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:4DED  74 4F				jz	$+51h			; Jump if zero
020A:4DEF  BF 07E0				mov	di,7E0h
020A:4DF2  B0 20				mov	al,20h			; ' '
020A:4DF4  9A 1481:2C48				call	far ptr $-21ACh
020A:4DF9  9A 1481:2CD0				call	far ptr $-2129h
020A:4DFE  A2 1F83				mov	byte ptr ds:[1F83h],al	; (1828:1F83=81h)
020A:4E01  3C 01				cmp	al,1
020A:4E03  77 0C				ja	$+0Eh			; Jump if above
020A:4E05  E8 1174				call	$+1177h
020A:4E08  B4 10				mov	ah,10h
020A:4E0A  9A 1481:2F90				call	far ptr $-1E7Ah
020A:4E0F  EB 2D				jmp	short $+2Fh
							                        ;* No entry point to code
020A:4E11  BF 1EB2				mov	di,1EB2h
020A:4E14  B9 0060				mov	cx,60h
020A:4E17  B0 00				mov	al,0
020A:4E19  FC					cld				; Clear direction
020A:4E1A  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 134

020A:4E1C  BF 0649				mov	di,649h
020A:4E1F  B9 000C				mov	cx,0Ch
020A:4E22  B0 20				mov	al,20h			; ' '
020A:4E24  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:4E26  BE 07E0				mov	si,7E0h
020A:4E29  BF 1EB2				mov	di,1EB2h
020A:4E2C  8B CB				mov	cx,bx
020A:4E2E  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:4E30  4F					dec	di
020A:4E31  9A 1481:BBC0				call	far ptr $+6D8Fh
020A:4E36  E8 497B				call	$+497Eh
020A:4E39  73 03				jnc	$+5			; Jump if carry=0
020A:4E3B  E9 2396				jmp	$+2399h
							                        ;* No entry point to code
020A:4E3E  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (1828:1F82=26h)
020A:4E42  9A 1481:2F90				call	far ptr $-1EB2h
020A:4E47  E8 0D4E				call	$+0D51h
020A:4E4A  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020A:4E4E  C6 47 53 07				mov	byte ptr [bx+53h],7
020A:4E52  C6 47 67 00				mov	byte ptr [bx+67h],0
020A:4E56  E8 1123				call	$+1126h
020A:4E59  E8 09A0				call	$+9A3h
020A:4E5C  C3					retn
							                        ;* No entry point to code
020A:4E5D  80 3E 1655 01			cmp	byte ptr ds:[1655h],1	; (020A:1655=0)
020A:4E62  75 07				jne	$+9			; Jump if not equal
020A:4E64  80 36 1657 01			xor	byte ptr ds:[1657h],1	; (020A:1657=0)
020A:4E69  EB 09				jmp	short $+0Bh
							                        ;* No entry point to code
020A:4E6B  FE 06 1657				inc	byte ptr ds:[1657h]	; (020A:1657=0)
020A:4E6F  80 26 1657 03			and	byte ptr ds:[1657h],3	; (020A:1657=0)
020A:4E74  E8 1201				call	$+1204h
020A:4E77  E8 F7AE				call	$-84Fh
020A:4E7A  E8 097F				call	$+982h
020A:4E7D  E9 E814				jmp	$-17E9h
							                        ;* No entry point to code
020A:4E80  F7 06 1D60 01C0			test	word ptr ds:[1D60h],1C0h	; (020A:1D60=0)
020A:4E86  75 38				jnz	$+3Ah			; Jump if not zero
020A:4E88  8A 36 1D72				mov	dh,byte ptr ds:[1D72h]	; (020A:1D72=0)
020A:4E8C  F6 C6 3F				test	dh,3Fh			; '?'
020A:4E8F  74 04				jz	$+6			; Jump if zero
020A:4E91  B6 00				mov	dh,0
020A:4E93  EB 45				jmp	short $+47h
							                        ;* No entry point to code
020A:4E95  F6 06 1D74 80			test	byte ptr ds:[1D74h],80h	; (020A:1D74=0)
020A:4E9A  75 07				jnz	$+9			; Jump if not zero
020A:4E9C  80 0E 1D74 80			or	byte ptr ds:[1D74h],80h	; (020A:1D74=0)
020A:4EA1  EB 3B				jmp	short $+3Dh
							                        ;* No entry point to code
020A:4EA3  80 26 1D74 7F			and	byte ptr ds:[1D74h],7Fh	; (020A:1D74=0)
020A:4EA8  B6 01				mov	dh,1
020A:4EAA  F7 06 1D60 0010			test	word ptr ds:[1D60h],10h	; (020A:1D60=0)
020A:4EB0  74 02				jz	$+4			; Jump if zero
020A:4EB2  B6 02				mov	dh,2
020A:4EB4  F7 06 1D60 0020			test	word ptr ds:[1D60h],20h	; (020A:1D60=0)
020A:4EBA  74 1E				jz	$+20h			; Jump if zero
020A:4EBC  B6 04				mov	dh,4
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 135

020A:4EBE  EB 1A				jmp	short $+1Ch
							                        ;* No entry point to code
020A:4EC0  F7 06 1D60 0040			test	word ptr ds:[1D60h],40h	; (020A:1D60=0)
020A:4EC6  74 04				jz	$+6			; Jump if zero
020A:4EC8  B6 0C				mov	dh,0Ch
020A:4ECA  EB 0E				jmp	short $+10h
							                        ;* No entry point to code
020A:4ECC  F7 06 1D60 0080			test	word ptr ds:[1D60h],80h	; (020A:1D60=0)
020A:4ED2  74 04				jz	$+6			; Jump if zero
020A:4ED4  B6 14				mov	dh,14h
020A:4ED6  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:4ED8  B6 24				mov	dh,24h			; '$'
020A:4EDA  88 36 1D72				mov	byte ptr ds:[1D72h],dh	; (020A:1D72=0)
020A:4EDE  B6 01				mov	dh,1
020A:4EE0  E8 0B85				call	$+0B88h
020A:4EE3  E9 E7AE				jmp	$-184Fh
							                        ;* No entry point to code
020A:4EE6  80 3E 2317 01			cmp	byte ptr ds:[2317h],1	; (020A:2317=0)
020A:4EEB  75 1C				jne	$+1Eh			; Jump if not equal
020A:4EED  FE 06 2313				inc	byte ptr ds:[2313h]	; (020A:2313=0)
020A:4EF1  80 26 2313 01			and	byte ptr ds:[2313h],1	; (020A:2313=0)
020A:4EF6  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:4EFA  C6 47 4A 07				mov	byte ptr [bx+4Ah],7
020A:4EFE  F6 06 2313 01			test	byte ptr ds:[2313h],1	; (020A:2313=0)
020A:4F03  74 04				jz	$+6			; Jump if zero
020A:4F05  C6 47 4A 00				mov	byte ptr [bx+4Ah],0
020A:4F09  E8 08F0				call	$+8F3h
020A:4F0C  E9 E785				jmp	$-1878h
							                        ;* No entry point to code
020A:4F0F  E8 0C5E				call	$+0C61h
020A:4F12  C6 47 68 00				mov	byte ptr [bx+68h],0
020A:4F16  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020A:4F1A  B4 03				mov	ah,3
020A:4F1C  9A 1481:2F90				call	far ptr $-1F8Ch
020A:4F21  B4 02				mov	ah,2
020A:4F23  32 FF				xor	bh,bh			; Zero register
020A:4F25  BA 171A				mov	dx,171Ah
020A:4F28  9A 1481:3240				call	far ptr $-1CE8h
020A:4F2D  E8 1058				call	$+105Bh
020A:4F30  B1 28				mov	cl,28h			; '('
020A:4F32  B3 03				mov	bl,3
020A:4F34  BE 07E0				mov	si,7E0h
020A:4F37  9A 1481:06C0				call	far ptr $-4877h
020A:4F3C  B3 28				mov	bl,28h			; '('
020A:4F3E  2A D9				sub	bl,cl
020A:4F40  32 FF				xor	bh,bh			; Zero register
020A:4F42  83 FB 00				cmp	bx,0
020A:4F45  74 13				je	$+15h			; Jump if equal
020A:4F47  3C 1B				cmp	al,1Bh
020A:4F49  74 0F				je	$+11h			; Jump if equal
020A:4F4B  E8 2970				call	$+2973h
020A:4F4E  BF 07E0				mov	di,7E0h
020A:4F51  B0 20				mov	al,20h			; ' '
020A:4F53  8B CB				mov	cx,bx
020A:4F55  FC					cld				; Clear direction
020A:4F56  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 136

020A:4F58  75 03				jnz	$+5			; Jump if not zero
020A:4F5A  E9 0086				jmp	$+89h
							                        ;* No entry point to code
020A:4F5D  FC					cld				; Clear direction
020A:4F5E  BF 1F15				mov	di,1F15h
020A:4F61  B9 0029				mov	cx,29h
020A:4F64  B0 00				mov	al,0
020A:4F66  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:4F68  BF 036A				mov	di,36Ah
020A:4F6B  B9 000C				mov	cx,0Ch
020A:4F6E  B0 20				mov	al,20h			; ' '
020A:4F70  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:4F72  BE 07E0				mov	si,7E0h
020A:4F75  BF 1F15				mov	di,1F15h
020A:4F78  8B CB				mov	cx,bx
020A:4F7A  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:4F7C  9A 1481:2BB0				call	far ptr $-23CCh
020A:4F81  83 C3 04				add	bx,4
020A:4F84  47					inc	di
020A:4F85  8B CB				mov	cx,bx
020A:4F87  8A 05				mov	al,[di]
020A:4F89  3C 3A				cmp	al,3Ah			; ':'
020A:4F8B  74 0D				je	$+0Fh			; Jump if equal
020A:4F8D  3C 5C				cmp	al,5Ch			; '\'
020A:4F8F  74 09				je	$+0Bh			; Jump if equal
020A:4F91  83 F9 01				cmp	cx,1
020A:4F94  76 05				jbe	$+7			; Jump if below or =
020A:4F96  49					dec	cx
020A:4F97  4F					dec	di
020A:4F98  EB ED				jmp	short $-11h
							                        ;* No entry point to code
020A:4F9A  47					inc	di
020A:4F9B  2B D9				sub	bx,cx
020A:4F9D  8B CB				mov	cx,bx
020A:4F9F  41					inc	cx
020A:4FA0  83 F9 0C				cmp	cx,0Ch
020A:4FA3  77 3E				ja	$+40h			; Jump if above
020A:4FA5  8B F7				mov	si,di
020A:4FA7  BF 036A				mov	di,36Ah
020A:4FAA  FC					cld				; Clear direction
020A:4FAB  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:4FAD  80 3E 1F16 3A			cmp	byte ptr ds:[1F16h],3Ah	; (020A:1F16=30h) ':'
020A:4FB2  75 2F				jne	$+31h			; Jump if not equal
020A:4FB4  A0 1F15				mov	al,byte ptr ds:[1F15h]	; (020A:1F15=0)
020A:4FB7  24 5F				and	al,5Fh			; '_'
020A:4FB9  3C 41				cmp	al,41h			; 'A'
020A:4FBB  72 26				jb	$+28h			; Jump if below
020A:4FBD  3C 5A				cmp	al,5Ah			; 'Z'
020A:4FBF  77 22				ja	$+24h			; Jump if above
020A:4FC1  8A D0				mov	dl,al
020A:4FC3  80 EA 41				sub	dl,41h			; 'A'
020A:4FC6  8A DA				mov	bl,dl
020A:4FC8  B4 0E				mov	ah,0Eh
020A:4FCA  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:4FCC  B4 19				mov	ah,19h
020A:4FCE  CD 21				int	21h			; DOS Services  ah=function 19h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 137

										;  get default drive al  (0=a:)
020A:4FD0  A2 1D90				mov	byte ptr ds:[1D90h],al	; (020A:1D90=0)
020A:4FD3  04 61				add	al,61h			; 'a'
020A:4FD5  A2 066E				mov	byte ptr ds:[66Eh],al	; (020A:066E=0Eh)
020A:4FD8  E8 09D5				call	$+9D8h
020A:4FDB  8A 16 1D8F				mov	dl,byte ptr ds:[1D8Fh]	; (020A:1D8F=0)
020A:4FDF  B4 0E				mov	ah,0Eh
020A:4FE1  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:4FE3  E8 0BB2				call	$+0BB5h
020A:4FE6  C6 47 68 07				mov	byte ptr [bx+68h],7
020A:4FEA  C6 47 67 00				mov	byte ptr [bx+67h],0
020A:4FEE  8A 26 1F82				mov	ah,byte ptr ds:[1F82h]	; (020A:1F82=0)
020A:4FF2  9A 1481:2F90				call	far ptr $-2062h
020A:4FF7  E8 0F82				call	$+0F85h
020A:4FFA  E8 07FF				call	$+802h
020A:4FFD  E9 E694				jmp	$-1969h
							                        ;* No entry point to code
020A:5000  A0 17A7				mov	al,byte ptr ds:[17A7h]	; (020A:17A7=0)
020A:5003  04 02				add	al,2
020A:5005  3C 14				cmp	al,14h
020A:5007  72 02				jb	$+4			; Jump if below
020A:5009  B0 04				mov	al,4
020A:500B  E8 1382				call	$+1385h
020A:500E  E9 E683				jmp	$-197Ah
							                        ;* No entry point to code
020A:5011  B4 11				mov	ah,11h
020A:5013  E9 2339				jmp	$+233Ch
							                        ;* No entry point to code
020A:5016  A0 1718				mov	al,byte ptr ds:[1718h]	; (020A:1718=0)
020A:5019  BB 171A				mov	bx,171Ah
020A:501C  D7					xlat				; al=[al+[bx]] table
020A:501D  A2 1718				mov	byte ptr ds:[1718h],al	; (020A:1718=0)
020A:5020  E8 10F9				call	$+10FCh
020A:5023  E8 07D6				call	$+7D9h
020A:5026  E9 E66B				jmp	$-1992h
							                        ;* No entry point to code
020A:5029  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:502E  74 20				je	$+22h			; Jump if equal
020A:5030  A0 2314				mov	al,byte ptr ds:[2314h]	; (020A:2314=0)
020A:5033  A8 01				test	al,1
020A:5035  74 0C				jz	$+0Eh			; Jump if zero
020A:5037  A8 02				test	al,2
020A:5039  74 04				jz	$+6			; Jump if zero
020A:503B  B0 09				mov	al,9
020A:503D  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:503F  B0 02				mov	al,2
020A:5041  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:5043  B0 03				mov	al,3
020A:5045  A2 2314				mov	byte ptr ds:[2314h],al	; (020A:2314=0)
020A:5048  9A 1481:0A94				call	far ptr $-45B4h
020A:504D  E8 07AC				call	$+7AFh
020A:5050  E9 E641				jmp	$-19BCh
							                        ;* No entry point to code
020A:5053  BF 140D				mov	di,140Dh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 138

020A:5056  A0 1408				mov	al,byte ptr ds:[1408h]	; (020A:1408=0)
020A:5059  32 C9				xor	cl,cl			; Zero register
020A:505B  3A 05				cmp	al,[di]
020A:505D  74 0C				je	$+0Eh			; Jump if equal
020A:505F  FE C1				inc	cl
020A:5061  80 F9 10				cmp	cl,10h
020A:5064  73 05				jae	$+7			; Jump if above or =
020A:5066  83 C7 11				add	di,11h
020A:5069  EB F0				jmp	short $-0Eh
							                        ;* No entry point to code
020A:506B  80 F9 0F				cmp	cl,0Fh
020A:506E  72 03				jb	$+5			; Jump if below
020A:5070  BF 13FC				mov	di,13FCh
020A:5073  83 C7 11				add	di,11h
020A:5076  8B 45 0D				mov	ax,[di+0Dh]
020A:5079  A3 1409				mov	word ptr ds:[1409h],ax	; (020A:1409=0)
020A:507C  8A 05				mov	al,[di]
020A:507E  A2 1408				mov	byte ptr ds:[1408h],al	; (020A:1408=0)
020A:5081  8B 45 0B				mov	ax,[di+0Bh]
020A:5084  A3 140B				mov	word ptr ds:[140Bh],ax	; (020A:140B=0)
020A:5087  9A 1481:31BC				call	far ptr $-1ECBh
020A:508C  E8 076D				call	$+770h
020A:508F  E9 E602				jmp	$-19FBh
							                        ;* No entry point to code
020A:5092  01 00				add	[bx+si],ax
020A:5094  02 00				add	al,[bx+si]
020A:5096  04 00				add	al,0
020A:5098  10 00				adc	[bx+si],al
020A:509A  18 00				sbb	[bx+si],al
020A:509C  20 00				and	[bx+si],al
020A:509E  28 00				sub	[bx+si],al
020A:50A0  40					inc	ax
020A:50A1  00 48 00		;*		add	[bx+si+0],cl
020A:50A1  00 48 00				db	 00h, 48h, 00h
020A:50A4  88 00				mov	[bx+si],al
020A:50A6  08 01				or	[bx+di],al
020A:50A8  08 02				or	[bp+si],al
020A:50AA  08 04				or	[si],al
020A:50AC  00 00				add	[bx+si],al
020A:50AE  8B 16 1D60				mov	dx,word ptr ds:[1D60h]	; (020A:1D60=0)
020A:50B2  B8 0000				mov	ax,0
020A:50B5  56					push	si
020A:50B6  BE 1CC2				mov	si,1CC2h
020A:50B9  2E: 3B 14				cmp	dx,cs:[si]
020A:50BC  74 14				je	$+16h			; Jump if equal
020A:50BE  46					inc	si
020A:50BF  46					inc	si
020A:50C0  2E: 83 3C 00				cmp	word ptr cs:[si],0
020A:50C4  74 02				je	$+4			; Jump if equal
020A:50C6  EB F1				jmp	short $-0Dh
							                        ;* No entry point to code
020A:50C8  BA 0001				mov	dx,1
020A:50CB  C6 06 1D72 00			mov	byte ptr ds:[1D72h],0	; (020A:1D72=0)
020A:50D0  4E					dec	si
020A:50D1  4E					dec	si
020A:50D2  46					inc	si
020A:50D3  46					inc	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 139

020A:50D4  2E: 83 3C 00				cmp	word ptr cs:[si],0
020A:50D8  75 08				jne	$+0Ah			; Jump if not equal
020A:50DA  BE 1CC2				mov	si,1CC2h
020A:50DD  C6 06 1D72 00			mov	byte ptr ds:[1D72h],0	; (020A:1D72=0)
020A:50E2  2E: 8B 14				mov	dx,cs:[si]
020A:50E5  5E					pop	si
020A:50E6  89 16 1D60				mov	word ptr ds:[1D60h],dx	; (020A:1D60=0)
020A:50EA  F6 06 1D72 3F			test	byte ptr ds:[1D72h],3Fh	; (020A:1D72=0) '?'
020A:50EF  74 1F				jz	$+21h			; Jump if zero
020A:50F1  C6 06 1D72 01			mov	byte ptr ds:[1D72h],1	; (020A:1D72=0)
020A:50F6  F7 C2 0010				test	dx,10h
020A:50FA  74 07				jz	$+9			; Jump if zero
020A:50FC  C6 06 1D72 02			mov	byte ptr ds:[1D72h],2	; (020A:1D72=0)
020A:5101  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:5103  F7 C2 0020				test	dx,20h
020A:5107  74 07				jz	$+9			; Jump if zero
020A:5109  C6 06 1D72 04			mov	byte ptr ds:[1D72h],4	; (020A:1D72=0)
020A:510E  EB 3F				jmp	short $+41h
							                        ;* No entry point to code
020A:5110  F7 C2 0040				test	dx,40h
020A:5114  74 07				jz	$+9			; Jump if zero
020A:5116  C6 06 1D72 0C			mov	byte ptr ds:[1D72h],0Ch	; (020A:1D72=0)
020A:511B  EB 32				jmp	short $+34h
							                        ;* No entry point to code
020A:511D  F7 C2 0080				test	dx,80h
020A:5121  74 07				jz	$+9			; Jump if zero
020A:5123  C6 06 1D72 14			mov	byte ptr ds:[1D72h],14h	; (020A:1D72=0)
020A:5128  EB 25				jmp	short $+27h
							                        ;* No entry point to code
020A:512A  F7 C2 0100				test	dx,100h
020A:512E  74 07				jz	$+9			; Jump if zero
020A:5130  C6 06 1D72 24			mov	byte ptr ds:[1D72h],24h	; (020A:1D72=0) '$'
020A:5135  EB 18				jmp	short $+1Ah
							                        ;* No entry point to code
020A:5137  F7 C2 0200				test	dx,200h
020A:513B  74 07				jz	$+9			; Jump if zero
020A:513D  C6 06 1D72 24			mov	byte ptr ds:[1D72h],24h	; (020A:1D72=0) '$'
020A:5142  EB 0B				jmp	short $+0Dh
							                        ;* No entry point to code
020A:5144  F7 C2 0400				test	dx,400h
020A:5148  74 05				jz	$+7			; Jump if zero
020A:514A  C6 06 1D72 24			mov	byte ptr ds:[1D72h],24h	; (020A:1D72=0) '$'
020A:514F  B6 01				mov	dh,1
020A:5151  E8 0914				call	$+917h
020A:5154  E9 E53D				jmp	$-1AC0h
							                        ;* No entry point to code
020A:5157  80 3E 230E 00			cmp	byte ptr ds:[230Eh],0	; (020A:230E=0)
020A:515C  74 13				je	$+15h			; Jump if equal
020A:515E  80 3E 230F 00			cmp	byte ptr ds:[230Fh],0	; (020A:230F=0)
020A:5163  75 05				jne	$+7			; Jump if not equal
020A:5165  C6 06 230E 00			mov	byte ptr ds:[230Eh],0	; (020A:230E=0)
020A:516A  C6 06 230F 00			mov	byte ptr ds:[230Fh],0	; (020A:230F=0)
020A:516F  EB 0A				jmp	short $+0Ch
							                        ;* No entry point to code
020A:5171  C6 06 230E 60			mov	byte ptr ds:[230Eh],60h	; (020A:230E=0) '`'
020A:5176  C6 06 230F 60			mov	byte ptr ds:[230Fh],60h	; (020A:230F=0) '`'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 140

020A:517B  E8 F4AA				call	$-0B53h
020A:517E  E8 067B				call	$+67Eh
020A:5181  E9 E510				jmp	$-1AEDh
							                        ;* No entry point to code
020A:5184  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:5189  74 23				je	$+25h			; Jump if equal
020A:518B  8A 1E 3D9C				mov	bl,byte ptr ds:[3D9Ch]	; (020A:3D9C=3Ch)
020A:518F  F6 C3 07				test	bl,7
020A:5192  74 07				jz	$+9			; Jump if zero
020A:5194  C6 06 3D9C 00			mov	byte ptr ds:[3D9Ch],0	; (020A:3D9C=3Ch)
020A:5199  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:519B  80 0E 3D9C 07			or	byte ptr ds:[3D9Ch],7	; (020A:3D9C=3Ch)
020A:51A0  B0 0A				mov	al,0Ah
020A:51A2  E8 11EB				call	$+11EEh
020A:51A5  E9 E4EC				jmp	$-1B11h
							                        ;* No entry point to code
020A:51A8  E8 0E7D				call	$+0E80h
020A:51AB  E9 E4E6				jmp	$-1B17h
020A:51AE  E9 E53E				jmp	$-1ABFh
							                        ;* No entry point to code
020A:51B1  E8 09BC				call	$+9BFh
020A:51B4  B4 18				mov	ah,18h
020A:51B6  9A 1481:2F90				call	far ptr $-2226h
020A:51BB  9A 1481:0800				call	far ptr $-49BBh
020A:51C0  2C 30				sub	al,30h			; '0'
020A:51C2  3C 7F				cmp	al,7Fh
020A:51C4  77 3A				ja	$+3Ch			; Jump if above
020A:51C6  A2 2302				mov	byte ptr ds:[2302h],al	; (020A:2302=0)
020A:51C9  A8 EB				test	al,0EBh
020A:51CB  74 2F				jz	$+31h			; Jump if zero
020A:51CD  80 3E 133E 01			cmp	byte ptr ds:[133Eh],1	; (020A:133E=0)
020A:51D2  74 28				je	$+2Ah			; Jump if equal
020A:51D4  50					push	ax
020A:51D5  51					push	cx
020A:51D6  57					push	di
020A:51D7  06					push	es
020A:51D8  1E					push	ds
020A:51D9  07					pop	es
020A:51DA  B9 001D				mov	cx,1Dh
020A:51DD  B0 20				mov	al,20h			; ' '
020A:51DF  BF 0708				mov	di,708h
020A:51E2  FC					cld				; Clear direction
020A:51E3  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:51E5  BD 071C				mov	bp,71Ch
020A:51E8  A1 3DA1				mov	ax,word ptr ds:[3DA1h]	; (020A:3DA1=0B007h)
020A:51EB  9A 1481:0294				call	far ptr $-4F57h
020A:51F0  8B 3E 1326				mov	di,word ptr ds:[1326h]	; (020A:1326=0)
020A:51F4  C6 45 5D 07				mov	byte ptr [di+5Dh],7
020A:51F8  07					pop	es
020A:51F9  5F					pop	di
020A:51FA  59					pop	cx
020A:51FB  58					pop	ax
020A:51FC  A8 08				test	al,8
020A:51FE  75 03				jnz	$+5			; Jump if not zero
020A:5200  E9 00BF				jmp	$+0C2h
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 141

020A:5203  80 26 2302 F7			and	byte ptr ds:[2302h],0F7h	; (020A:2302=0)
020A:5208  B4 23				mov	ah,23h			; '#'
020A:520A  9A 1481:2F90				call	far ptr $-227Ah
020A:520F  B4 02				mov	ah,2
020A:5211  32 FF				xor	bh,bh			; Zero register
020A:5213  BA 1710				mov	dx,1710h
020A:5216  9A 1481:3240				call	far ptr $-1FD6h
020A:521B  E8 0D6A				call	$+0D6Dh
020A:521E  9A 1481:0800				call	far ptr $-4A1Eh
020A:5223  8A D0				mov	dl,al
020A:5225  2C 30				sub	al,30h			; '0'
020A:5227  3C 10				cmp	al,10h
020A:5229  76 03				jbe	$+5			; Jump if below or =
020A:522B  E9 0094				jmp	$+97h
							                        ;* No entry point to code
020A:522E  D0 E0				shl	al,1			; Shift w/zeros fill
020A:5230  A2 2303				mov	byte ptr ds:[2303h],al	; (020A:2303=0)
020A:5233  9A 1481:0840				call	far ptr $-49F3h
020A:5238  B4 02				mov	ah,2
020A:523A  32 FF				xor	bh,bh			; Zero register
020A:523C  BA 1727				mov	dx,1727h
020A:523F  9A 1481:3240				call	far ptr $-1FFFh
020A:5244  B1 04				mov	cl,4
020A:5246  B3 02				mov	bl,2
020A:5248  BE 07ED				mov	si,7EDh
020A:524B  9A 1481:06C0				call	far ptr $-4B8Bh
020A:5250  3C 1B				cmp	al,1Bh
020A:5252  74 6E				je	$+70h			; Jump if equal
020A:5254  3C 0D				cmp	al,0Dh
020A:5256  75 19				jne	$+1Bh			; Jump if not equal
020A:5258  A1 0699				mov	ax,word ptr ds:[699h]	; (020A:0699=0B050h)
020A:525B  A3 07ED				mov	word ptr ds:[7EDh],ax	; (020A:07ED=2400h)
020A:525E  A1 069B				mov	ax,word ptr ds:[69Bh]	; (020A:069B=47Fh)
020A:5261  A3 07EF				mov	word ptr ds:[7EFh],ax	; (020A:07EF=0C75h)
020A:5264  B9 0004				mov	cx,4
020A:5267  8A 14				mov	dl,[si]
020A:5269  46					inc	si
020A:526A  9A 1481:0840				call	far ptr $-4A2Ah
020A:526F  E2 F6				loop	$-8			; Loop if cx > 0

020A:5271  80 F9 00				cmp	cl,0
020A:5274  75 4C				jne	$+4Eh			; Jump if not equal
020A:5276  B9 0080				mov	cx,80h
020A:5279  BF 07ED				mov	di,7EDh
020A:527C  E8 E971				call	$-168Ch
020A:527F  73 41				jnc	$+43h			; Jump if carry=0
020A:5281  89 16 2304				mov	word ptr ds:[2304h],dx	; (020A:2304=0)
020A:5285  B2 3A				mov	dl,3Ah			; ':'
020A:5287  9A 1481:0840				call	far ptr $-4A47h
020A:528C  B1 04				mov	cl,4
020A:528E  B3 02				mov	bl,2
020A:5290  BE 07F2				mov	si,7F2h
020A:5293  9A 1481:06C0				call	far ptr $-4BD3h
020A:5298  3C 1B				cmp	al,1Bh
020A:529A  74 26				je	$+28h			; Jump if equal
020A:529C  80 F9 00				cmp	cl,0
020A:529F  75 21				jne	$+23h			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 142

020A:52A1  B9 0080				mov	cx,80h
020A:52A4  BF 07F2				mov	di,7F2h
020A:52A7  50					push	ax
020A:52A8  E8 E945				call	$-16B8h
020A:52AB  58					pop	ax
020A:52AC  73 14				jnc	$+16h			; Jump if carry=0
020A:52AE  89 16 2306				mov	word ptr ds:[2306h],dx	; (020A:2306=0)
020A:52B2  3C 4D				cmp	al,4Dh			; 'M'
020A:52B4  75 07				jne	$+9			; Jump if not equal
020A:52B6  80 0E 2302 80			or	byte ptr ds:[2302h],80h	; (020A:2302=0)
020A:52BB  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:52BD  80 0E 2302 08			or	byte ptr ds:[2302h],8	; (020A:2302=0)
020A:52C2  E8 0CB7				call	$+0CBAh
020A:52C5  E8 08D0				call	$+8D3h
020A:52C8  E9 E3A9				jmp	$-1C54h
							                        ;* No entry point to code
020A:52CB  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:52D0  06					push	es
020A:52D1  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:52D6  75 37				jne	$+39h			; Jump if not equal
020A:52D8  B4 02				mov	ah,2
020A:52DA  32 FF				xor	bh,bh			; Zero register
020A:52DC  BA 0500				mov	dx,500h
020A:52DF  9A 1481:3240				call	far ptr $-209Fh
020A:52E4  BE 0033				mov	si,33h
020A:52E7  B9 0623				mov	cx,623h
020A:52EA  81 E9 0033				sub	cx,33h
020A:52EE  49					dec	cx
020A:52EF  E8 25CF				call	$+25D2h
020A:52F2  26: 8A 14				mov	dl,es:[si]
020A:52F5  80 EA 23				sub	dl,23h			; '#'
020A:52F8  80 FA 23				cmp	dl,23h			; '#'
020A:52FB  74 05				je	$+7			; Jump if equal
020A:52FD  80 FA 40				cmp	dl,40h			; '@'
020A:5300  75 02				jne	$+4			; Jump if not equal
020A:5302  B2 20				mov	dl,20h			; ' '
020A:5304  9A 1481:0840				call	far ptr $-4AC4h
020A:5309  46					inc	si
020A:530A  E2 E6				loop	$-18h			; Loop if cx > 0

020A:530C  E9 0115				jmp	$+118h
							                        ;* No entry point to code
020A:530F  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:5313  BE 0033				mov	si,33h
020A:5316  B9 0623				mov	cx,623h
020A:5319  81 E9 0033				sub	cx,33h
020A:531D  E8 0528				call	$+52Bh
020A:5320  B7 07				mov	bh,7
020A:5322  8A 16 1206				mov	dl,byte ptr ds:[1206h]	; (020A:1206=0)
020A:5326  2E: 80 3E 0083 00			cmp	byte ptr cs:[83h],0	; (020A:0083=0)
020A:532C  74 44				je	$+46h			; Jump if equal
020A:532E  53					push	bx
020A:532F  51					push	cx
020A:5330  56					push	si
020A:5331  1E					push	ds
020A:5332  BE 0623				mov	si,623h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 143

020A:5335  BF 0284				mov	di,284h
020A:5338  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:533C  8A 1E 1206				mov	bl,byte ptr ds:[1206h]	; (020A:1206=0)
020A:5340  8A 3E 120A				mov	bh,byte ptr ds:[120Ah]	; (020A:120A=0)
020A:5344  E8 255C				call	$+255Fh
020A:5347  B9 000E				mov	cx,0Eh
020A:534A  2CAC					dw	2CACh
020A:534C  23 AA 8826				and	bp,[bp+si-77DAh]
020A:5350  1D E247				sbb	ax,0E247h
020A:5353  F6					db	0F6h
020A:5354  0E					push	cs
020A:5355  1F					pop	ds
020A:5356  BE 0083				mov	si,83h
020A:5359  B9 0030				mov	cx,30h
020A:535C  B4 A0				mov	ah,0A0h
020A:535E  AC					lodsb				; String [si] to al
020A:535F  A8 80				test	al,80h
020A:5361  75 02				jnz	$+4			; Jump if not zero
020A:5363  8A C4				mov	al,ah
020A:5365  2C 80				sub	al,80h
020A:5367  AA					stosb				; Store al to es:[di]
020A:5368  26: 88 3D				mov	es:[di],bh
020A:536B  47					inc	di
020A:536C  E2 F0				loop	$-0Eh			; Loop if cx > 0

020A:536E  1F					pop	ds
020A:536F  5E					pop	si
020A:5370  59					pop	cx
020A:5371  5B					pop	bx
020A:5372  BF 0320				mov	di,320h
020A:5375  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5379  E8 2527				call	$+252Ah
020A:537C  8A DF				mov	bl,bh
020A:537E  1E					push	ds
020A:537F  E8 251E				call	$+2521h
020A:5382  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:5387  1F					pop	ds
020A:5388  74 25				jz	$+27h			; Jump if zero
020A:538A  80 3C 63				cmp	byte ptr [si],63h	; 'c'
020A:538D  75 06				jne	$+8			; Jump if not equal
020A:538F  B7 0F				mov	bh,0Fh
020A:5391  8A DF				mov	bl,bh
020A:5393  EB 0E				jmp	short $+10h
020A:5395  80 3C 46				cmp	byte ptr [si],46h	; 'F'
020A:5398  75 23				jne	$+25h			; Jump if not equal
020A:539A  1E					push	ds
020A:539B  E8 2502				call	$+2505h
020A:539E  8A 1E 1207				mov	bl,byte ptr ds:[1207h]	; (020A:1207=0)
020A:53A2  1F					pop	ds
020A:53A3  FC					cld				; Clear direction
020A:53A4  B0 20				mov	al,20h			; ' '
020A:53A6  AA					stosb				; Store al to es:[di]
020A:53A7  46					inc	si
020A:53A8  26: 88 1D				mov	es:[di],bl
020A:53AB  47					inc	di
020A:53AC  49					dec	cx
020A:53AD  EB 1C				jmp	short $+1Eh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 144

020A:53AF  81 3C 207C				cmp	word ptr [si],207Ch
020A:53B3  74 0D				je	$+0Fh			; Jump if equal
020A:53B5  81 3C 7C7C				cmp	word ptr [si],7C7Ch
020A:53B9  74 07				je	$+9			; Jump if equal
020A:53BB  EB 0E				jmp	short $+10h
020A:53BD  80 3C A3				cmp	byte ptr [si],0A3h
020A:53C0  72 09				jb	$+0Bh			; Jump if below
020A:53C2  1E					push	ds
020A:53C3  E8 24DA				call	$+24DDh
020A:53C6  8A 1E 1206				mov	bl,byte ptr ds:[1206h]	; (020A:1206=0)
020A:53CA  1F					pop	ds
020A:53CB  FC					cld				; Clear direction
020A:53CC  50					push	ax
020A:53CD  AC					lodsb				; String [si] to al
020A:53CE  2C 23				sub	al,23h			; '#'
020A:53D0  AA					stosb				; Store al to es:[di]
020A:53D1  58					pop	ax
020A:53D2  26: 88 1D				mov	es:[di],bl
020A:53D5  47					inc	di
020A:53D6  E2 A4				loop	$-5Ah			; Loop if cx > 0

020A:53D8  BE 0001				mov	si,1
020A:53DB  B9 001A				mov	cx,1Ah
020A:53DE  81 E9 0001				sub	cx,1
020A:53E2  BF 016B				mov	di,16Bh
020A:53E5  81 EF 0096				sub	di,96h
020A:53E9  D1 E7				shl	di,1			; Shift w/zeros fill
020A:53EB  1E					push	ds
020A:53EC  E8 24B1				call	$+24B4h
020A:53EF  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:53F3  1F					pop	ds
020A:53F4  FC					cld				; Clear direction
020A:53F5  A4					movsb				; Mov [si] to es:[di]
020A:53F6  47					inc	di
020A:53F7  E2 FC				loop	$-2			; Loop if cx > 0

020A:53F9  BE 001A				mov	si,1Ah
020A:53FC  B9 001A				mov	cx,1Ah
020A:53FF  81 E9 0001				sub	cx,1
020A:5403  BF 016B				mov	di,16Bh
020A:5406  81 EF 0096				sub	di,96h
020A:540A  D1 E7				shl	di,1			; Shift w/zeros fill
020A:540C  81 C7 00A0				add	di,0A0h
020A:5410  1E					push	ds
020A:5411  E8 248C				call	$+248Fh
020A:5414  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5418  1F					pop	ds
020A:5419  FC					cld				; Clear direction
020A:541A  A4					movsb				; Mov [si] to es:[di]
020A:541B  47					inc	di
020A:541C  E2 FC				loop	$-2			; Loop if cx > 0

020A:541E  E8 247F				call	$+2482h
020A:5421  E8 0450				call	$+453h
020A:5424  9A 1481:0800				call	far ptr $-4C24h
020A:5429  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:542E  9C					pushf				; Push flags
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 145

020A:542F  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:5434  5A					pop	dx
020A:5435  8E C2				mov	es,dx
020A:5437  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:543C  5A					pop	dx
020A:543D  75 0A				jnz	$+0Ch			; Jump if not zero
020A:543F  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:5444  74 03				je	$+5			; Jump if equal
020A:5446  E8 2937				call	$+293Ah
020A:5449  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:544E  9D					popf				; Pop flags
020A:544F  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:5454  E9 E21D				jmp	$-1DE0h
020A:5457  FE 06 155F				inc	byte ptr ds:[155Fh]	; (020A:155F=0)
020A:545B  80 3E 155F 03			cmp	byte ptr ds:[155Fh],3	; (020A:155F=0)
020A:5460  72 05				jb	$+7			; Jump if below
020A:5462  C6 06 155F 00			mov	byte ptr ds:[155Fh],0	; (020A:155F=0)
020A:5467  9A 1481:31BC				call	far ptr $-22ABh
020A:546C  E8 038D				call	$+390h
020A:546F  E9 E222				jmp	$-1DDBh
020A:5472  00					db	0
020A:5473  00					db	0
020A:5474  00					db	0
020A:5475  00					db	0
020A:5476  00					db	0
020A:5477  00					db	0
020A:5478  00					db	0
020A:5479  00					db	0
020A:547A  00					db	0
020A:547B  00					db	0
020A:547C  00					db	0
020A:547D  00 00				add	[bx+si],al
020A:547F  00 F7				add	bh,dh
020A:5481  06					push	es
020A:5482  1A 23				sbb	ah,[bp+di]
020A:5484  08 00				or	[bx+si],al
020A:5486  75 03				jnz	$+5			; Jump if not zero
020A:5488  E9 0089				jmp	$+8Ch
							                        ;* No entry point to code
020A:548B  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:5491  75 08				jne	$+0Ah			; Jump if not equal
020A:5493  2E: 80 3E 4775 00			cmp	byte ptr cs:[4775h],0	; (020A:4775=0C6h)
020A:5499  74 79				je	$+7Bh			; Jump if equal
020A:549B  50					push	ax
020A:549C  53					push	bx
020A:549D  51					push	cx
020A:549E  52					push	dx
020A:549F  56					push	si
020A:54A0  57					push	di
020A:54A1  55					push	bp
020A:54A2  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:54A7  1E					push	ds
020A:54A8  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:54AD  06					push	es
020A:54AE  BB 2148				mov	bx,2148h
020A:54B1  BA 0007				mov	dx,7
020A:54B4  E8 CBB9				call	$-3444h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 146

020A:54B7  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:54BC  9C					pushf				; Push flags
020A:54BD  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:54C2  5A					pop	dx
020A:54C3  8E C2				mov	es,dx
020A:54C5  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:54CA  5A					pop	dx
020A:54CB  75 0A				jnz	$+0Ch			; Jump if not zero
020A:54CD  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:54D2  74 03				je	$+5			; Jump if equal
020A:54D4  E8 28A9				call	$+28ACh
020A:54D7  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:54DC  9D					popf				; Pop flags
020A:54DD  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:54E2  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:54E7  9C					pushf				; Push flags
020A:54E8  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:54ED  5A					pop	dx
020A:54EE  8E DA				mov	ds,dx
020A:54F0  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:54F5  5A					pop	dx
020A:54F6  75 0A				jnz	$+0Ch			; Jump if not zero
020A:54F8  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:54FD  74 03				je	$+5			; Jump if equal
020A:54FF  E8 287E				call	$+2881h
020A:5502  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:5507  9D					popf				; Pop flags
020A:5508  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:550D  5D					pop	bp
020A:550E  5F					pop	di
020A:550F  5E					pop	si
020A:5510  5A					pop	dx
020A:5511  59					pop	cx
020A:5512  5B					pop	bx
020A:5513  58					pop	ax
020A:5514  C3					retn
							                        ;* No entry point to code
020A:5515  87 DB				xchg	bx,bx
020A:5517  90					nop
020A:5518  50					push	ax
020A:5519  53					push	bx
020A:551A  51					push	cx
020A:551B  52					push	dx
020A:551C  56					push	si
020A:551D  57					push	di
020A:551E  55					push	bp
020A:551F  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:5524  1E					push	ds
020A:5525  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:552A  06					push	es
020A:552B  26: 8B 2E 0000			mov	bp,word ptr es:[0]	; (020A:0000=1828h)
020A:5530  BE 0008				mov	si,8
020A:5533  E8 236A				call	$+236Dh
020A:5536  83 3E 1D7E 06			cmp	word ptr ds:[1D7Eh],6	; (020A:1D7E=0)
020A:553B  76 02				jbe	$+4			; Jump if below or =
020A:553D  EB 78				jmp	short $+7Ah
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 147

020A:553F  BF 6A3B				mov	di,6A3Bh
020A:5542  BB 2F9C				mov	bx,2F9Ch
020A:5545  26: 8A 44 05				mov	al,es:[si+5]
020A:5549  25 000F				and	ax,0Fh
020A:554C  D7					xlat				; al=[al+[bx]] table
020A:554D  0A C0				or	al,al			; Zero ?
020A:554F  75 04				jnz	$+6			; Jump if not zero
020A:5551  26: 8A 44 06				mov	al,es:[si+6]
020A:5555  3D 0006				cmp	ax,6
020A:5558  77 03				ja	$+5			; Jump if above
020A:555A  E9 00B8				jmp	$+0BBh
							                        ;* No entry point to code
020A:555D  8B C8				mov	cx,ax
020A:555F  26: 8A 44 05				mov	al,es:[si+5]
020A:5563  24 0C				and	al,0Ch
020A:5565  83 FE 08				cmp	si,8
020A:5568  75 02				jne	$+4			; Jump if not equal
020A:556A  8A D0				mov	dl,al
020A:556C  BF 6A4A				mov	di,6A4Ah
020A:556F  3A C2				cmp	al,dl
020A:5571  74 03				je	$+5			; Jump if equal
020A:5573  E9 009F				jmp	$+0A2h
							                        ;* No entry point to code
020A:5576  3C 08				cmp	al,8
020A:5578  74 0B				je	$+0Dh			; Jump if equal
020A:557A  3C 04				cmp	al,4
020A:557C  74 07				je	$+9			; Jump if equal
020A:557E  3C 00				cmp	al,0
020A:5580  74 03				je	$+5			; Jump if equal
020A:5582  E9 0090				jmp	$+93h
							                        ;* No entry point to code
020A:5585  BF 6A1D				mov	di,6A1Dh
020A:5588  26: 8B 1C				mov	bx,es:[si]
020A:558B  26: 8B 44 02				mov	ax,es:[si+2]
020A:558F  83 FB FF				cmp	bx,0FFFFh
020A:5592  75 07				jne	$+9			; Jump if not equal
020A:5594  3D FFFF				cmp	ax,0FFFFh
020A:5597  75 02				jne	$+4			; Jump if not equal
020A:5599  EB 13				jmp	short $+15h
							                        ;* No entry point to code
020A:559B  03 F1				add	si,cx
020A:559D  26: 3B 1C				cmp	bx,es:[si]
020A:55A0  72 0A				jb	$+0Ch			; Jump if below
020A:55A2  77 71				ja	$+73h			; Jump if above
020A:55A4  26: 3B 44 02				cmp	ax,es:[si+2]
020A:55A8  76 02				jbe	$+4			; Jump if below or =
020A:55AA  77 69				ja	$+6Bh			; Jump if above
020A:55AC  EB 91				jmp	short $-6Dh
							                        ;* No entry point to code
020A:55AE  BF 6A2C				mov	di,6A2Ch
020A:55B1  03 F1				add	si,cx
020A:55B3  3B F5				cmp	si,bp
020A:55B5  75 5E				jne	$+60h			; Jump if not equal
020A:55B7  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:55BC  9C					pushf				; Push flags
020A:55BD  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:55C2  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 148

020A:55C3  8E C2				mov	es,dx
020A:55C5  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:55CA  5A					pop	dx
020A:55CB  75 0A				jnz	$+0Ch			; Jump if not zero
020A:55CD  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:55D2  74 03				je	$+5			; Jump if equal
020A:55D4  E8 27A9				call	$+27ACh
020A:55D7  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:55DC  9D					popf				; Pop flags
020A:55DD  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:55E2  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:55E7  9C					pushf				; Push flags
020A:55E8  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:55ED  5A					pop	dx
020A:55EE  8E DA				mov	ds,dx
020A:55F0  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:55F5  5A					pop	dx
020A:55F6  75 0A				jnz	$+0Ch			; Jump if not zero
020A:55F8  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:55FD  74 03				je	$+5			; Jump if equal
020A:55FF  E8 277E				call	$+2781h
020A:5602  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:5607  9D					popf				; Pop flags
020A:5608  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:560D  5D					pop	bp
020A:560E  5F					pop	di
020A:560F  5E					pop	si
020A:5610  5A					pop	dx
020A:5611  59					pop	cx
020A:5612  5B					pop	bx
020A:5613  58					pop	ax
020A:5614  C3					retn
020A:5615  E8 2282				call	$+2285h
020A:5618  56					push	si
020A:5619  BD 0EE7				mov	bp,0EE7h
020A:561C  80 FA 08				cmp	dl,8
020A:561F  74 0F				je	$+11h			; Jump if equal
020A:5621  80 FA 04				cmp	dl,4
020A:5624  74 0F				je	$+11h			; Jump if equal
020A:5626  80 FA 00				cmp	dl,0
020A:5629  74 0F				je	$+11h			; Jump if equal
020A:562B  BE 69F1				mov	si,69F1h
020A:562E  EB 0F				jmp	short $+11h
020A:5630  BE 69E6				mov	si,69E6h
020A:5633  EB 0A				jmp	short $+0Ch
020A:5635  BE 69D0				mov	si,69D0h
020A:5638  EB 05				jmp	short $+7
020A:563A  BE 69DB				mov	si,69DBh
020A:563D  EB 00				jmp	short $+2		; delay for I/O
020A:563F  9A 1481:6800				call	far ptr $+11C1h
020A:5644  BD 0EF2				mov	bp,0EF2h
020A:5647  8C C0				mov	ax,es
020A:5649  2E: 3B 06 3FB2			cmp	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:564E  75 09				jne	$+0Bh			; Jump if not equal
020A:5650  BE 6A07				mov	si,6A07h
020A:5653  2E: A1 3FB4				mov	ax,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:5657  EB 03				jmp	short $+5
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 149

020A:5659  BE 6A12				mov	si,6A12h
020A:565C  50					push	ax
020A:565D  9A 1481:6800				call	far ptr $+11A3h
020A:5662  58					pop	ax
020A:5663  9A 1481:0294				call	far ptr $-53CFh
020A:5668  5E					pop	si
020A:5669  8B C6				mov	ax,si
020A:566B  BD 0F0C				mov	bp,0F0Ch
020A:566E  9A 1481:0294				call	far ptr $-53DAh
020A:5673  BD 0F13				mov	bp,0F13h
020A:5676  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:567B  1E					push	ds
020A:567C  E8 221B				call	$+221Eh
020A:567F  A0 17A5				mov	al,byte ptr ds:[17A5h]	; (020A:17A5=0)
020A:5682  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:5687  9C					pushf				; Push flags
020A:5688  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:568D  5A					pop	dx
020A:568E  8E DA				mov	ds,dx
020A:5690  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:5695  5A					pop	dx
020A:5696  75 0A				jnz	$+0Ch			; Jump if not zero
020A:5698  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:569D  74 03				je	$+5			; Jump if equal
020A:569F  E8 26DE				call	$+26E1h
020A:56A2  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:56A7  9D					popf				; Pop flags
020A:56A8  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:56AD  9A 1481:02A4				call	far ptr $-5409h
020A:56B2  8B F7				mov	si,di
020A:56B4  BD 0F16				mov	bp,0F16h
020A:56B7  9A 1481:6800				call	far ptr $+1149h
020A:56BC  E8 21DB				call	$+21DEh
020A:56BF  E9 1C45				jmp	$+1C48h
020A:56C2  87 DB				xchg	bx,bx
020A:56C4  C3					retn
020A:56C5  00					db	0
020A:56C6  00					db	0
020A:56C7  00					db	0
020A:56C8  00					db	0
020A:56C9  00					db	0
020A:56CA  00					db	0
020A:56CB  00					db	0
020A:56CC  00					db	0
020A:56CD  00 00				add	[bx+si],al
020A:56CF  00 80 AC3E				add	byte ptr ds:[0AC3Eh][bx+si],al	; (020A:AC3E=0C0h)
020A:56D3  17					pop	ss
020A:56D4  00 74 01				add	[si+1],dh
020A:56D7  C3					retn
							                        ;* No entry point to code
020A:56D8  50					push	ax
020A:56D9  53					push	bx
020A:56DA  51					push	cx
020A:56DB  52					push	dx
020A:56DC  55					push	bp
020A:56DD  56					push	si
020A:56DE  57					push	di
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 150

020A:56DF  06					push	es
020A:56E0  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:56E5  74 6B				je	$+6Dh			; Jump if equal
020A:56E7  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:56EB  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:56EF  BE 0096				mov	si,96h
020A:56F2  BA 0A36				mov	dx,0A36h
020A:56F5  8B 3E 131D				mov	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:56F9  E8 014C				call	$+14Fh
020A:56FC  B9 0866				mov	cx,866h
020A:56FF  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:5704  75 03				jne	$+5			; Jump if not equal
020A:5706  B9 0816				mov	cx,816h
020A:5709  81 E9 0096				sub	cx,96h
020A:570D  FC					cld				; Clear direction
020A:570E  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:5713  75 28				jne	$+2Ah			; Jump if not equal
020A:5715  81 FE 036A				cmp	si,36Ah
020A:5719  72 12				jb	$+14h			; Jump if below
020A:571B  81 FE 0398				cmp	si,398h
020A:571F  76 1C				jbe	$+1Eh			; Jump if below or =
020A:5721  81 FE 0649				cmp	si,649h
020A:5725  72 06				jb	$+8			; Jump if below
020A:5727  81 FE 0655				cmp	si,655h
020A:572B  76 10				jbe	$+12h			; Jump if below or =
020A:572D  AC					lodsb				; String [si] to al
020A:572E  3C 80				cmp	al,80h
020A:5730  72 08				jb	$+0Ah			; Jump if below
020A:5732  53					push	bx
020A:5733  BB 17CE				mov	bx,17CEh
020A:5736  2C 80				sub	al,80h
020A:5738  D7					xlat				; al=[al+[bx]] table
020A:5739  5B					pop	bx
020A:573A  AA					stosb				; Store al to es:[di]
020A:573B  EB 01				jmp	short $+3
							                        ;* No entry point to code
020A:573D  A4					movsb				; Mov [si] to es:[di]
020A:573E  87 D6				xchg	dx,si
020A:5740  8A 04				mov	al,[si]
020A:5742  87 F2				xchg	si,dx
020A:5744  42					inc	dx
020A:5745  D7					xlat				; al=[al+[bx]] table
020A:5746  26: 88 05				mov	es:[di],al
020A:5749  47					inc	di
020A:574A  E2 C2				loop	$-3Ch			; Loop if cx > 0

020A:574C  E8 0125				call	$+128h
020A:574F  E9 009F				jmp	$+0A2h
							                        ;* No entry point to code
020A:5752  33 ED				xor	bp,bp			; Zero register
020A:5754  80 3E 17AD 01			cmp	byte ptr ds:[17ADh],1	; (020A:17AD=0)
020A:5759  75 05				jne	$+7			; Jump if not equal
020A:575B  E8 0A2A				call	$+0A2Dh
020A:575E  EB 0A				jmp	short $+0Ch
							                        ;* No entry point to code
020A:5760  B4 03				mov	ah,3
020A:5762  32 FF				xor	bh,bh			; Zero register
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 151

020A:5764  9A 1481:3240				call	far ptr $-2524h
020A:5769  52					push	dx
020A:576A  B4 02				mov	ah,2
020A:576C  32 FF				xor	bh,bh			; Zero register
020A:576E  33 D2				xor	dx,dx			; Zero register
020A:5770  80 3E 17B2 01			cmp	byte ptr ds:[17B2h],1	; (020A:17B2=0)
020A:5775  75 03				jne	$+5			; Jump if not equal
020A:5777  BA 1702				mov	dx,1702h
020A:577A  9A 1481:3240				call	far ptr $-253Ah
020A:577F  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:5783  B9 0866				mov	cx,866h
020A:5786  80 3E 17AD 01			cmp	byte ptr ds:[17ADh],1	; (020A:17AD=0)
020A:578B  75 03				jne	$+5			; Jump if not equal
020A:578D  B9 0816				mov	cx,816h
020A:5790  81 E9 0096				sub	cx,96h
020A:5794  49					dec	cx
020A:5795  BE 0096				mov	si,96h
020A:5798  BF 0A36				mov	di,0A36h
020A:579B  80 3E 17B2 01			cmp	byte ptr ds:[17B2h],1	; (020A:17B2=0)
020A:57A0  75 09				jne	$+0Bh			; Jump if not equal
020A:57A2  B9 004C				mov	cx,4Ch
020A:57A5  BE 07C8				mov	si,7C8h
020A:57A8  BF 1168				mov	di,1168h
020A:57AB  8A 05				mov	al,[di]
020A:57AD  D7					xlat				; al=[al+[bx]] table
020A:57AE  3C 00				cmp	al,0
020A:57B0  75 04				jne	$+6			; Jump if not equal
020A:57B2  B2 20				mov	dl,20h			; ' '
020A:57B4  EB 11				jmp	short $+13h
							                        ;* No entry point to code
020A:57B6  3C 0F				cmp	al,0Fh
020A:57B8  75 0B				jne	$+0Dh			; Jump if not equal
020A:57BA  C6 06 17AE 01			mov	byte ptr ds:[17AEh],1	; (020A:17AE=43h)
020A:57BF  9A 1481:0810				call	far ptr $-4FAFh
020A:57C4  45					inc	bp
020A:57C5  8A 14				mov	dl,[si]
020A:57C7  9A 1481:0840				call	far ptr $-4F87h
020A:57CC  0B ED				or	bp,bp			; Zero ?
020A:57CE  74 07				jz	$+9			; Jump if zero
020A:57D0  9A 1481:0810				call	far ptr $-4FC0h
020A:57D5  33 ED				xor	bp,bp			; Zero register
020A:57D7  46					inc	si
020A:57D8  47					inc	di
020A:57D9  E2 D0				loop	$-2Eh			; Loop if cx > 0

020A:57DB  80 3E 17AD 01			cmp	byte ptr ds:[17ADh],1	; (020A:17AD=0)
020A:57E0  75 05				jne	$+7			; Jump if not equal
020A:57E2  E8 09E3				call	$+9E6h
020A:57E5  EB 0A				jmp	short $+0Ch
							                        ;* No entry point to code
020A:57E7  B4 02				mov	ah,2
020A:57E9  32 FF				xor	bh,bh			; Zero register
020A:57EB  5A					pop	dx
020A:57EC  9A 1481:3240				call	far ptr $-25ACh
020A:57F1  07					pop	es
020A:57F2  5F					pop	di
020A:57F3  5E					pop	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 152

020A:57F4  5D					pop	bp
020A:57F5  5A					pop	dx
020A:57F6  59					pop	cx
020A:57F7  5B					pop	bx
020A:57F8  58					pop	ax
020A:57F9  C3					retn
							                        ;* No entry point to code
020A:57FA  87 DB				xchg	bx,bx
020A:57FC  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:5801  74 01				je	$+3			; Jump if equal
020A:5803  C3					retn
							                        ;* No entry point to code
020A:5804  E8 FEC9				call	$-134h
020A:5807  50					push	ax
020A:5808  53					push	bx
020A:5809  52					push	dx
020A:580A  B4 02				mov	ah,2
020A:580C  32 FF				xor	bh,bh			; Zero register
020A:580E  BA 184F				mov	dx,184Fh
020A:5811  9A 1481:3240				call	far ptr $-25D1h
020A:5816  5A					pop	dx
020A:5817  5B					pop	bx
020A:5818  58					pop	ax
020A:5819  C3					retn
							                        ;* No entry point to code
020A:581A  87 DB				xchg	bx,bx
020A:581C  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:5821  75 05				jne	$+7			; Jump if not equal
020A:5823  C6 06 17B2 01			mov	byte ptr ds:[17B2h],1	; (020A:17B2=0)
020A:5828  E8 FFD1		;*		call	$-2Ch			;*
020A:5828  E8 D1 FF				db	0E8h,0D1h,0FFh
020A:582B  C6 06 17B2 00			mov	byte ptr ds:[17B2h],0	; (020A:17B2=0)
020A:5830  C3					retn
							                        ;* No entry point to code
020A:5831  87 DB				xchg	bx,bx
020A:5833  90					nop
020A:5834  80 3E 3271 01			cmp	byte ptr ds:[3271h],1	; (020A:3271=5Ch)
020A:5839  74 0A				je	$+0Ch			; Jump if equal
020A:583B  80 3E 3271 15			cmp	byte ptr ds:[3271h],15h	; (020A:3271=5Ch)
020A:5840  74 03				je	$+5			; Jump if equal
020A:5842  E9 FE8B				jmp	$-172h
020A:5845  EB			data_176	db	0EBh
020A:5846  D5 90		;*		aad	90h			; undocumented inst
020A:5846  D5 90				db	0D5h, 90h
020A:5848  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:584D  74 01				je	$+3			; Jump if equal
020A:584F  C3					retn
							                        ;* No entry point to code
020A:5850  80 3E 1328 01			cmp	byte ptr ds:[1328h],1	; (020A:1328=0)
020A:5855  74 1C				je	$+1Eh			; Jump if equal
020A:5857  52					push	dx
020A:5858  BA 03DA				mov	dx,3DAh
020A:585B  EC					in	al,dx			; port 3DAh, CGA/EGA vid status
020A:585C  A8 08				test	al,8
020A:585E  75 FB				jnz	$-3			; Jump if not zero
020A:5860  BA 03D8				mov	dx,3D8h
020A:5863  1E					push	ds
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 153

020A:5864  33 C0				xor	ax,ax			; Zero register
020A:5866  8E D8				mov	ds,ax
020A:5868  A0 0465				mov	al,byte ptr ds:[465h]	; (0000:0465=29h)
020A:586B  24 F7				and	al,0F7h
020A:586D  A2 0465				mov	byte ptr ds:[465h],al	; (0000:0465=29h)
020A:5870  EE					out	dx,al			; port 3D8h, CGA video control
020A:5871  1F					pop	ds
020A:5872  5A					pop	dx
020A:5873  C3					retn
							                        ;* No entry point to code
020A:5874  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:5879  74 01				je	$+3			; Jump if equal
020A:587B  C3					retn
							                        ;* No entry point to code
020A:587C  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:5881  75 17				jne	$+19h			; Jump if not equal
020A:5883  0E					push	cs
020A:5884  57					push	di
020A:5885  06					push	es
020A:5886  B4 FF				mov	ah,0FFh
020A:5888  B9 07D0				mov	cx,7D0h
020A:588B  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:588F  8B 3E 131D				mov	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5893  CD 10				int	10h			; Video display   ah=functn FFh
										;  update video buffer   Topview
020A:5895  07					pop	es
020A:5896  5F					pop	di
020A:5897  59					pop	cx
020A:5898  EB 1B				jmp	short $+1Dh
							                        ;* No entry point to code
020A:589A  80 3E 1328 01			cmp	byte ptr ds:[1328h],1	; (020A:1328=0)
020A:589F  74 14				je	$+16h			; Jump if equal
020A:58A1  52					push	dx
020A:58A2  BA 03D8				mov	dx,3D8h
020A:58A5  1E					push	ds
020A:58A6  33 C0				xor	ax,ax			; Zero register
020A:58A8  8E D8				mov	ds,ax
020A:58AA  A0 0465				mov	al,byte ptr ds:[465h]	; (0000:0465=29h)
020A:58AD  0C 08				or	al,8
020A:58AF  A2 0465				mov	byte ptr ds:[465h],al	; (0000:0465=29h)
020A:58B2  EE					out	dx,al			; port 3D8h, CGA video control
020A:58B3  1F					pop	ds
020A:58B4  5A					pop	dx
020A:58B5  C3					retn
							                        ;* No entry point to code
020A:58B6  87 DB				xchg	bx,bx
020A:58B8  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:58BD  74 01				je	$+3			; Jump if equal
020A:58BF  C3					retn
							                        ;* No entry point to code
020A:58C0  80 3E 1328 01			cmp	byte ptr ds:[1328h],1	; (020A:1328=0)
020A:58C5  75 22				jne	$+24h			; Jump if not equal
020A:58C7  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:58CC  74 1B				je	$+1Dh			; Jump if equal
020A:58CE  D1 E7				shl	di,1			; Shift w/zeros fill
020A:58D0  26: 88 25				mov	es:[di],ah
020A:58D3  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 154

020A:58D8  74 03				je	$+5			; Jump if equal
020A:58DA  D1 EF				shr	di,1			; Shift w/zeros fill
020A:58DC  C3					retn
							                        ;* No entry point to code
020A:58DD  51					push	cx
020A:58DE  B4 FF				mov	ah,0FFh
020A:58E0  B9 0001				mov	cx,1
020A:58E3  CD 10				int	10h			; Video display   ah=functn FFh
										;  update video buffer   Topview
020A:58E5  D1 EF				shr	di,1			; Shift w/zeros fill
020A:58E7  59					pop	cx
020A:58E8  C3					retn
							                        ;* No entry point to code
020A:58E9  51					push	cx
020A:58EA  52					push	dx
020A:58EB  50					push	ax
020A:58EC  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:58F1  74 20				je	$+22h			; Jump if equal
020A:58F3  D1 E7				shl	di,1			; Shift w/zeros fill
020A:58F5  BA 03DA				mov	dx,3DAh
020A:58F8  FB					sti				; Enable interrupts
020A:58F9  B5 09				mov	ch,9
020A:58FB  FA					cli				; Disable interrupts
020A:58FC  EC					in	al,dx			; port 3DAh, CGA/EGA vid status
020A:58FD  A8 08				test	al,8
020A:58FF  75 09				jnz	$+0Bh			; Jump if not zero
020A:5901  A8 01				test	al,1
020A:5903  75 F3				jnz	$-0Bh			; Jump if not zero
020A:5905  EC					in	al,dx			; port 3DAh, CGA/EGA vid status
020A:5906  84 C5				test	al,ch
020A:5908  74 FB				jz	$-3			; Jump if zero
020A:590A  FC					cld				; Clear direction
020A:590B  8A C4				mov	al,ah
020A:590D  AA					stosb				; Store al to es:[di]
020A:590E  FB					sti				; Enable interrupts
020A:590F  D1 EF				shr	di,1			; Shift w/zeros fill
020A:5911  EB 33				jmp	short $+35h
							                        ;* No entry point to code
020A:5913  80 FC 20				cmp	ah,20h			; ' '
020A:5916  72 2E				jb	$+30h			; Jump if below
020A:5918  53					push	bx
020A:5919  50					push	ax
020A:591A  B2 50				mov	dl,50h			; 'P'
020A:591C  8B C7				mov	ax,di
020A:591E  F6 F2				div	dl			; al, ah rem = ax/reg
020A:5920  86 C4				xchg	al,ah
020A:5922  8B D0				mov	dx,ax
020A:5924  B4 02				mov	ah,2
020A:5926  32 FF				xor	bh,bh			; Zero register
020A:5928  9A 1481:3240				call	far ptr $-26E8h
020A:592D  58					pop	ax
020A:592E  80 3E 17AE 01			cmp	byte ptr ds:[17AEh],1	; (020A:17AE=43h)
020A:5933  75 09				jne	$+0Bh			; Jump if not equal
020A:5935  8A C4				mov	al,ah
020A:5937  9A 1481:0870				call	far ptr $-50C7h
020A:593C  EB 07				jmp	short $+9
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 155

020A:593E  8A D4				mov	dl,ah
020A:5940  9A 1481:0840				call	far ptr $-5100h
020A:5945  5B					pop	bx
020A:5946  58					pop	ax
020A:5947  5A					pop	dx
020A:5948  59					pop	cx
020A:5949  C3					retn
							                        ;* No entry point to code
020A:594A  87 DB				xchg	bx,bx
020A:594C  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:5951  74 01				je	$+3			; Jump if equal
020A:5953  C3					retn
							                        ;* No entry point to code
020A:5954  80 3E 1328 01			cmp	byte ptr ds:[1328h],1	; (020A:1328=0)
020A:5959  75 25				jne	$+27h			; Jump if not equal
020A:595B  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:5960  74 1E				je	$+20h			; Jump if equal
020A:5962  D1 E7				shl	di,1			; Shift w/zeros fill
020A:5964  26: 88 65 01				mov	es:[di+1],ah
020A:5968  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:596D  74 04				je	$+6			; Jump if equal
020A:596F  D1 EF				shr	di,1			; Shift w/zeros fill
020A:5971  47					inc	di
020A:5972  C3					retn
							                        ;* No entry point to code
020A:5973  51					push	cx
020A:5974  B4 FF				mov	ah,0FFh
020A:5976  B9 0001				mov	cx,1
020A:5979  CD 10				int	10h			; Video display   ah=functn FFh
										;  update video buffer   Topview
020A:597B  D1 EF				shr	di,1			; Shift w/zeros fill
020A:597D  47					inc	di
020A:597E  59					pop	cx
020A:597F  C3					retn
							                        ;* No entry point to code
020A:5980  51					push	cx
020A:5981  52					push	dx
020A:5982  50					push	ax
020A:5983  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:5988  74 20				je	$+22h			; Jump if equal
020A:598A  D1 E7				shl	di,1			; Shift w/zeros fill
020A:598C  47					inc	di
020A:598D  BA 03DA				mov	dx,3DAh
020A:5990  FB					sti				; Enable interrupts
020A:5991  B5 09				mov	ch,9
020A:5993  FA					cli				; Disable interrupts
020A:5994  EC					in	al,dx			; port 3DAh, CGA/EGA vid status
020A:5995  A8 08				test	al,8
020A:5997  75 09				jnz	$+0Bh			; Jump if not zero
020A:5999  A8 01				test	al,1
020A:599B  75 F3				jnz	$-0Bh			; Jump if not zero
020A:599D  EC					in	al,dx			; port 3DAh, CGA/EGA vid status
020A:599E  84 C5				test	al,ch
020A:59A0  74 FB				jz	$-3			; Jump if zero
020A:59A2  FC					cld				; Clear direction
020A:59A3  8A C4				mov	al,ah
020A:59A5  AA					stosb				; Store al to es:[di]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 156

020A:59A6  FB					sti				; Enable interrupts
020A:59A7  4F					dec	di
020A:59A8  D1 EF				shr	di,1			; Shift w/zeros fill
020A:59AA  47					inc	di
020A:59AB  58					pop	ax
020A:59AC  5A					pop	dx
020A:59AD  59					pop	cx
020A:59AE  C3					retn
							                        ;* No entry point to code
020A:59AF  90					nop
020A:59B0  52					push	dx
020A:59B1  E8 1F0A				call	$+1F0Dh
020A:59B4  BF 06B9				mov	di,6B9h
020A:59B7  B9 000A				mov	cx,0Ah
020A:59BA  B0 20				mov	al,20h			; ' '
020A:59BC  FC					cld				; Clear direction
020A:59BD  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:59BF  B4 36				mov	ah,36h			; '6'
020A:59C1  32 D2				xor	dl,dl			; Zero register
020A:59C3  CD 21				int	21h			; DOS Services  ah=function 36h
										;  get drive info, drive dl,1=a:
										;   returns ax=sectors per clust
										;   bx=avail clust,cx=bytes/sect
										;   dx=clusters per drive
020A:59C5  3D FFFF				cmp	ax,0FFFFh
020A:59C8  75 03				jne	$+5			; Jump if not equal
020A:59CA  E9 0096				jmp	$+99h
							                        ;* No entry point to code
020A:59CD  F7 E1				mul	cx			; dx:ax = reg * ax
020A:59CF  F7 E3				mul	bx			; dx:ax = reg * ax
020A:59D1  81 FA 05F5				cmp	dx,5F5h
020A:59D5  72 0F				jb	$+11h			; Jump if below
020A:59D7  56					push	si
020A:59D8  BD 06BE				mov	bp,6BEh
020A:59DB  BE 44C1				mov	si,44C1h
020A:59DE  9A 1481:6800				call	far ptr $+0E22h
020A:59E3  5E					pop	si
020A:59E4  EB 7D				jmp	short $+7Fh
							                        ;* No entry point to code
020A:59E6  B9 2710				mov	cx,2710h
020A:59E9  F7 F1				div	cx			; ax,dx rem=dx:ax/reg
020A:59EB  50					push	ax
020A:59EC  BD 06BE				mov	bp,6BEh
020A:59EF  B3 01				mov	bl,1
020A:59F1  8B C2				mov	ax,dx
020A:59F3  9A 1481:0300				call	far ptr $-56F3h
020A:59F8  83 ED 04				sub	bp,4
020A:59FB  3E: 8A 4E 00				mov	cl,ds:[bp]
020A:59FF  58					pop	ax
020A:5A00  3D 0000				cmp	ax,0
020A:5A03  75 11				jne	$+13h			; Jump if not equal
020A:5A05  80 F9 20				cmp	cl,20h			; ' '
020A:5A08  74 59				je	$+5Bh			; Jump if equal
020A:5A0A  3E: C6 46 00 2C			mov	byte ptr ds:[bp],2Ch	; ','
020A:5A0F  4D					dec	bp
020A:5A10  3E: 88 4E 00				mov	ds:[bp],cl
020A:5A14  EB 4D				jmp	short $+4Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 157

							                        ;* No entry point to code
020A:5A16  80 F9 20				cmp	cl,20h			; ' '
020A:5A19  75 02				jne	$+4			; Jump if not equal
020A:5A1B  B1 30				mov	cl,30h			; '0'
020A:5A1D  3E: C6 46 00 2C			mov	byte ptr ds:[bp],2Ch	; ','
020A:5A22  4D					dec	bp
020A:5A23  3E: 88 4E 00				mov	ds:[bp],cl
020A:5A27  83 C5 02				add	bp,2
020A:5A2A  3E: 80 7E 00 20			cmp	byte ptr ds:[bp],20h	; ' '
020A:5A2F  75 05				jne	$+7			; Jump if not equal
020A:5A31  3E: C6 46 00 30			mov	byte ptr ds:[bp],30h	; '0'
020A:5A36  45					inc	bp
020A:5A37  3E: 80 7E 00 20			cmp	byte ptr ds:[bp],20h	; ' '
020A:5A3C  75 05				jne	$+7			; Jump if not equal
020A:5A3E  3E: C6 46 00 30			mov	byte ptr ds:[bp],30h	; '0'
020A:5A43  BD 06B9				mov	bp,6B9h
020A:5A46  B3 01				mov	bl,1
020A:5A48  9A 1481:0300				call	far ptr $-5748h
020A:5A4D  83 ED 04				sub	bp,4
020A:5A50  3E: 8B 46 00				mov	ax,ds:[bp]
020A:5A54  80 FC 20				cmp	ah,20h			; ' '
020A:5A57  74 0A				je	$+0Ch			; Jump if equal
020A:5A59  3E: C6 46 01 2C			mov	byte ptr ds:[bp+1],2Ch	; ','
020A:5A5E  4D					dec	bp
020A:5A5F  3E: 89 46 00				mov	ds:[bp],ax
020A:5A63  5A					pop	dx
020A:5A64  C3					retn
							                        ;* No entry point to code
020A:5A65  87 DB				xchg	bx,bx
020A:5A67  90					nop
020A:5A68  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:5A6D  06					push	es
020A:5A6E  E8 1E4D				call	$+1E50h
020A:5A71  8A E6				mov	ah,dh
020A:5A73  8B 16 1D60				mov	dx,word ptr ds:[1D60h]	; (020A:1D60=0)
020A:5A77  BE 1349				mov	si,1349h
020A:5A7A  BF 0739				mov	di,739h
020A:5A7D  B9 1355				mov	cx,1355h
020A:5A80  81 E9 1349				sub	cx,1349h
020A:5A84  BB 1CC2				mov	bx,1CC2h
020A:5A87  2E: 3B 17				cmp	dx,cs:[bx]
020A:5A8A  74 0C				je	$+0Eh			; Jump if equal
020A:5A8C  43					inc	bx
020A:5A8D  43					inc	bx
020A:5A8E  03 F1				add	si,cx
020A:5A90  2E: 83 3F 00				cmp	word ptr cs:[bx],0
020A:5A94  74 02				je	$+4			; Jump if equal
020A:5A96  EB EF				jmp	short $-0Fh
							                        ;* No entry point to code
020A:5A98  FC					cld				; Clear direction
020A:5A99  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:5A9B  8A 36 1D72				mov	dh,byte ptr ds:[1D72h]	; (020A:1D72=0)
020A:5A9F  BE 13E5				mov	si,13E5h
020A:5AA2  BF 072E				mov	di,72Eh
020A:5AA5  B9 13EA				mov	cx,13EAh
020A:5AA8  81 E9 13E5				sub	cx,13E5h
020A:5AAC  F6 C6 3F				test	dh,3Fh			; '?'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 158

020A:5AAF  75 0B				jnz	$+0Dh			; Jump if not zero
020A:5AB1  F6 06 1D74 80			test	byte ptr ds:[1D74h],80h	; (020A:1D74=0)
020A:5AB6  74 36				jz	$+38h			; Jump if zero
020A:5AB8  03 F1				add	si,cx
020A:5ABA  EB 32				jmp	short $+34h
							                        ;* No entry point to code
020A:5ABC  03 F1				add	si,cx
020A:5ABE  03 F1				add	si,cx
020A:5AC0  F6 C6 01				test	dh,1
020A:5AC3  75 29				jnz	$+2Bh			; Jump if not zero
020A:5AC5  03 F1				add	si,cx
020A:5AC7  F6 C6 02				test	dh,2
020A:5ACA  75 22				jnz	$+24h			; Jump if not zero
020A:5ACC  03 F1				add	si,cx
020A:5ACE  52					push	dx
020A:5ACF  8A D6				mov	dl,dh
020A:5AD1  80 E2 FB				and	dl,0FBh
020A:5AD4  F6 C2 34				test	dl,34h			; '4'
020A:5AD7  5A					pop	dx
020A:5AD8  74 06				jz	$+8			; Jump if zero
020A:5ADA  03 F1				add	si,cx
020A:5ADC  03 F1				add	si,cx
020A:5ADE  EB 0E				jmp	short $+10h
							                        ;* No entry point to code
020A:5AE0  52					push	dx
020A:5AE1  8A D6				mov	dl,dh
020A:5AE3  80 E2 FB				and	dl,0FBh
020A:5AE6  F6 C2 0C				test	dl,0Ch
020A:5AE9  5A					pop	dx
020A:5AEA  74 02				jz	$+4			; Jump if zero
020A:5AEC  03 F1				add	si,cx
020A:5AEE  FC					cld				; Clear direction
020A:5AEF  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:5AF1  80 FC 00				cmp	ah,0
020A:5AF4  74 4C				je	$+4Eh			; Jump if equal
020A:5AF6  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:5AFB  74 05				je	$+7			; Jump if equal
020A:5AFD  E8 FD34				call	$-2C9h
020A:5B00  EB 40				jmp	short $+42h
020A:5B02  BE 0739				mov	si,739h
020A:5B05  BF 0739				mov	di,739h
020A:5B08  81 EF 0096				sub	di,96h
020A:5B0C  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5B10  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:5B14  B9 1355				mov	cx,1355h
020A:5B17  81 E9 1349				sub	cx,1349h
020A:5B1B  8A 24				mov	ah,[si]
020A:5B1D  E8 FD98				call	$-265h
020A:5B20  47					inc	di
020A:5B21  46					inc	si
020A:5B22  E2 F7				loop	$-7			; Loop if cx > 0

020A:5B24  BE 072E				mov	si,72Eh
020A:5B27  BF 072E				mov	di,72Eh
020A:5B2A  81 EF 0096				sub	di,96h
020A:5B2E  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5B32  B9 13EA				mov	cx,13EAh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 159

020A:5B35  81 E9 13E5				sub	cx,13E5h
020A:5B39  8A 24				mov	ah,[si]
020A:5B3B  E8 FD7A				call	$-283h
020A:5B3E  47					inc	di
020A:5B3F  46					inc	si
020A:5B40  E2 F7				loop	$-7			; Loop if cx > 0

020A:5B42  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:5B47  9C					pushf				; Push flags
020A:5B48  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:5B4D  5A					pop	dx
020A:5B4E  8E C2				mov	es,dx
020A:5B50  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:5B55  5A					pop	dx
020A:5B56  75 0A				jnz	$+0Ch			; Jump if not zero
020A:5B58  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:5B5D  74 03				je	$+5			; Jump if equal
020A:5B5F  E8 221E				call	$+2221h
020A:5B62  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:5B67  9D					popf				; Pop flags
020A:5B68  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:5B6D  C3					retn
							                        ;* No entry point to code
020A:5B6E  87 DB				xchg	bx,bx
020A:5B70  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:5B74  B9 0011				mov	cx,11h
020A:5B77  C6 47 30 07				mov	byte ptr [bx+30h],7
020A:5B7B  43					inc	bx
020A:5B7C  E2 F9				loop	$-5			; Loop if cx > 0

020A:5B7E  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:5B82  80 3E 2317 01			cmp	byte ptr ds:[2317h],1	; (020A:2317=0)
020A:5B87  74 0C				je	$+0Eh			; Jump if equal
020A:5B89  C6 47 30 00				mov	byte ptr [bx+30h],0
020A:5B8D  C6 47 33 00				mov	byte ptr [bx+33h],0
020A:5B91  C6 47 34 00				mov	byte ptr [bx+34h],0
020A:5B95  C3					retn
							                        ;* No entry point to code
020A:5B96  87 DB				xchg	bx,bx
020A:5B98  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:5B9C  B9 0011				mov	cx,11h
020A:5B9F  C6 47 30 0F				mov	byte ptr [bx+30h],0Fh
020A:5BA3  43					inc	bx
020A:5BA4  E2 F9				loop	$-5			; Loop if cx > 0

020A:5BA6  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:5BAA  80 3E 2317 01			cmp	byte ptr ds:[2317h],1	; (020A:2317=0)
020A:5BAF  74 0C				je	$+0Eh			; Jump if equal
020A:5BB1  C6 47 30 00				mov	byte ptr [bx+30h],0
020A:5BB5  C6 47 33 00				mov	byte ptr [bx+33h],0
020A:5BB9  C6 47 34 00				mov	byte ptr [bx+34h],0
020A:5BBD  2E: 80 3E 4775 01			cmp	byte ptr cs:[4775h],1	; (020A:4775=0C6h)
020A:5BC3  75 04				jne	$+6			; Jump if not equal
020A:5BC5  C6 47 38 07				mov	byte ptr [bx+38h],7
020A:5BC9  C3					retn
							                        ;* No entry point to code
020A:5BCA  87 DB				xchg	bx,bx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 160

020A:5BCC  50					push	ax
020A:5BCD  53					push	bx
020A:5BCE  51					push	cx
020A:5BCF  52					push	dx
020A:5BD0  56					push	si
020A:5BD1  57					push	di
020A:5BD2  55					push	bp
020A:5BD3  06					push	es
020A:5BD4  BD 06AE				mov	bp,6AEh
020A:5BD7  A1 1D42				mov	ax,word ptr ds:[1D42h]	; (020A:1D42=0)
020A:5BDA  B3 01				mov	bl,1
020A:5BDC  9A 1481:0300				call	far ptr $-58DCh
020A:5BE1  BD 074E				mov	bp,74Eh
020A:5BE4  A1 1D4A				mov	ax,word ptr ds:[1D4Ah]	; (020A:1D4A=0)
020A:5BE7  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:5BED  75 04				jne	$+6			; Jump if not equal
020A:5BEF  03 06 1D56				add	ax,word ptr ds:[1D56h]	; (020A:1D56=0)
020A:5BF3  A3 1D54				mov	word ptr ds:[1D54h],ax	; (020A:1D54=0)
020A:5BF6  B3 01				mov	bl,1
020A:5BF8  9A 1481:0300				call	far ptr $-58F8h
020A:5BFD  BD 06FE				mov	bp,6FEh
020A:5C00  A1 1D46				mov	ax,word ptr ds:[1D46h]	; (020A:1D46=0)
020A:5C03  B3 01				mov	bl,1
020A:5C05  9A 1481:0300				call	far ptr $-5905h
020A:5C0A  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:5C0E  80 7F 4E 00				cmp	byte ptr [bx+4Eh],0
020A:5C12  75 03				jne	$+5			; Jump if not equal
020A:5C14  E9 00F7				jmp	$+0FAh
							                        ;* No entry point to code
020A:5C17  BE 06AE				mov	si,6AEh
020A:5C1A  B9 0005				mov	cx,5
020A:5C1D  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:5C22  75 6F				jne	$+71h			; Jump if not equal
020A:5C24  B3 03				mov	bl,3
020A:5C26  BA 1328				mov	dx,1328h
020A:5C29  F6 06 4709 80			test	byte ptr ds:[4709h],80h	; (020A:4709=58h)
020A:5C2E  74 0C				jz	$+0Eh			; Jump if zero
020A:5C30  A1 1D0C				mov	ax,word ptr ds:[1D0Ch]	; (020A:1D0C=0)
020A:5C33  39 06 216E				cmp	word ptr ds:[216Eh],ax	; (020A:216E=104h)
020A:5C37  74 32				je	$+34h			; Jump if equal
020A:5C39  E9 00D2				jmp	$+0D5h
							                        ;* No entry point to code
020A:5C3C  80 FB 02				cmp	bl,2
020A:5C3F  72 1E				jb	$+20h			; Jump if below
020A:5C41  74 0E				jz	$+10h			; Jump if zero
020A:5C43  A1 1D42				mov	ax,word ptr ds:[1D42h]	; (020A:1D42=0)
020A:5C46  3B 06 1D4E				cmp	ax,word ptr ds:[1D4Eh]	; (020A:1D4E=0)
020A:5C4A  74 3A				je	$+3Ch			; Jump if equal
020A:5C4C  A3 1D4E				mov	word ptr ds:[1D4Eh],ax	; (020A:1D4E=0)
020A:5C4F  EB 1A				jmp	short $+1Ch
							                        ;* No entry point to code
020A:5C51  A1 1D46				mov	ax,word ptr ds:[1D46h]	; (020A:1D46=0)
020A:5C54  3B 06 1D50				cmp	ax,word ptr ds:[1D50h]	; (020A:1D50=0)
020A:5C58  74 2C				je	$+2Eh			; Jump if equal
020A:5C5A  A3 1D50				mov	word ptr ds:[1D50h],ax	; (020A:1D50=0)
020A:5C5D  EB 0C				jmp	short $+0Eh
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 161

020A:5C5F  A1 1D54				mov	ax,word ptr ds:[1D54h]	; (020A:1D54=0)
020A:5C62  3B 06 1D52				cmp	ax,word ptr ds:[1D52h]	; (020A:1D52=0)
020A:5C66  74 1E				je	$+20h			; Jump if equal
020A:5C68  A3 1D52				mov	word ptr ds:[1D52h],ax	; (020A:1D52=0)
020A:5C6B  B4 02				mov	ah,2
020A:5C6D  32 FF				xor	bh,bh			; Zero register
020A:5C6F  9A 1481:3240				call	far ptr $-2A2Fh
020A:5C74  B9 0005				mov	cx,5
020A:5C77  52					push	dx
020A:5C78  56					push	si
020A:5C79  FC					cld				; Clear direction
020A:5C7A  AC					lodsb				; String [si] to al
020A:5C7B  8A D0				mov	dl,al
020A:5C7D  9A 1481:0840				call	far ptr $-543Dh
020A:5C82  E2 F6				loop	$-8			; Loop if cx > 0

020A:5C84  5E					pop	si
020A:5C85  5A					pop	dx
020A:5C86  83 C6 50				add	si,50h
020A:5C89  81 C2 0100				add	dx,100h
020A:5C8D  FE CB				dec	bl
020A:5C8F  75 98				jnz	$-66h			; Jump if not zero
020A:5C91  EB 7B				jmp	short $+7Dh
							                        ;* No entry point to code
020A:5C93  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:5C97  A1 1D42				mov	ax,word ptr ds:[1D42h]	; (020A:1D42=0)
020A:5C9A  3B 06 1D4E				cmp	ax,word ptr ds:[1D4Eh]	; (020A:1D4E=0)
020A:5C9E  74 18				je	$+1Ah			; Jump if equal
020A:5CA0  A3 1D4E				mov	word ptr ds:[1D4Eh],ax	; (020A:1D4E=0)
020A:5CA3  BF 06AE				mov	di,6AEh
020A:5CA6  81 EF 0096				sub	di,96h
020A:5CAA  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5CAE  FC					cld				; Clear direction
020A:5CAF  AC					lodsb				; String [si] to al
020A:5CB0  8A E0				mov	ah,al
020A:5CB2  E8 FC03				call	$-3FAh
020A:5CB5  47					inc	di
020A:5CB6  E2 F6				loop	$-8			; Loop if cx > 0

020A:5CB8  A1 1D46				mov	ax,word ptr ds:[1D46h]	; (020A:1D46=0)
020A:5CBB  3B 06 1D50				cmp	ax,word ptr ds:[1D50h]	; (020A:1D50=0)
020A:5CBF  74 27				je	$+29h			; Jump if equal
020A:5CC1  A3 1D50				mov	word ptr ds:[1D50h],ax	; (020A:1D50=0)
020A:5CC4  BE 06FE				mov	si,6FEh
020A:5CC7  BF 06FE				mov	di,6FEh
020A:5CCA  81 EF 0096				sub	di,96h
020A:5CCE  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5CD2  B9 0005				mov	cx,5
020A:5CD5  AC					lodsb				; String [si] to al
020A:5CD6  83 F9 01				cmp	cx,1
020A:5CD9  76 05				jbe	$+7			; Jump if below or =
020A:5CDB  80 3C 20				cmp	byte ptr [si],20h	; ' '
020A:5CDE  74 05				je	$+7			; Jump if equal
020A:5CE0  8A E0				mov	ah,al
020A:5CE2  E8 FBD3				call	$-42Ah
020A:5CE5  47					inc	di
020A:5CE6  E2 ED				loop	$-11h			; Loop if cx > 0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 162


020A:5CE8  A1 1D54				mov	ax,word ptr ds:[1D54h]	; (020A:1D54=0)
020A:5CEB  3B 06 1D52				cmp	ax,word ptr ds:[1D52h]	; (020A:1D52=0)
020A:5CEF  74 1D				je	$+1Fh			; Jump if equal
020A:5CF1  A3 1D52				mov	word ptr ds:[1D52h],ax	; (020A:1D52=0)
020A:5CF4  BE 074E				mov	si,74Eh
020A:5CF7  BF 074E				mov	di,74Eh
020A:5CFA  81 EF 0096				sub	di,96h
020A:5CFE  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5D02  B9 0005				mov	cx,5
020A:5D05  AC					lodsb				; String [si] to al
020A:5D06  8A E0				mov	ah,al
020A:5D08  E8 FBAD				call	$-450h
020A:5D0B  47					inc	di
020A:5D0C  E2 F7				loop	$-7			; Loop if cx > 0

020A:5D0E  07					pop	es
020A:5D0F  5D					pop	bp
020A:5D10  5F					pop	di
020A:5D11  5E					pop	si
020A:5D12  5A					pop	dx
020A:5D13  59					pop	cx
020A:5D14  5B					pop	bx
020A:5D15  58					pop	ax
020A:5D16  C3					retn
							                        ;* No entry point to code
020A:5D17  90					nop
020A:5D18  50					push	ax
020A:5D19  53					push	bx
020A:5D1A  51					push	cx
020A:5D1B  52					push	dx
020A:5D1C  57					push	di
020A:5D1D  55					push	bp
020A:5D1E  06					push	es
020A:5D1F  F6 06 4709 80			test	byte ptr ds:[4709h],80h	; (020A:4709=58h)
020A:5D24  74 0B				jz	$+0Dh			; Jump if zero
020A:5D26  A1 1D0C				mov	ax,word ptr ds:[1D0Ch]	; (020A:1D0C=0)
020A:5D29  39 06 216E				cmp	word ptr ds:[216Eh],ax	; (020A:216E=104h)
020A:5D2D  74 02				je	$+4			; Jump if equal
020A:5D2F  EB 74				jmp	short $+76h
							                        ;* No entry point to code
020A:5D31  BD 07DC				mov	bp,7DCh
020A:5D34  56					push	si
020A:5D35  BE 2F2F				mov	si,2F2Fh
020A:5D38  9A 1481:6800				call	far ptr $+0AC8h
020A:5D3D  5E					pop	si
020A:5D3E  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:5D41  3E: 8B 56 00				mov	dx,ds:[bp]
020A:5D45  3E: 8B 5E 02				mov	bx,ds:[bp+2]
020A:5D49  53					push	bx
020A:5D4A  9A 1481:0294				call	far ptr $-5AB6h
020A:5D4F  5B					pop	bx
020A:5D50  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:5D54  BF 07C9				mov	di,7C9h
020A:5D57  83 C7 13				add	di,13h
020A:5D5A  81 EF 0096				sub	di,96h
020A:5D5E  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 163

020A:5D62  BD 07DC				mov	bp,7DCh
020A:5D65  B9 0009				mov	cx,9
020A:5D68  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:5D6B  3B 06 2176				cmp	ax,word ptr ds:[2176h]	; (020A:2176=0FF2Eh)
020A:5D6F  A3 2176				mov	word ptr ds:[2176h],ax	; (020A:2176=0FF2Eh)
020A:5D72  75 21				jnz	$+23h			; Jump if not zero
020A:5D74  83 C7 05				add	di,5
020A:5D77  83 C5 05				add	bp,5
020A:5D7A  B9 0004				mov	cx,4
020A:5D7D  3E: 3B 56 00				cmp	dx,ds:[bp]
020A:5D81  75 12				jne	$+14h			; Jump if not equal
020A:5D83  83 C7 02				add	di,2
020A:5D86  83 C5 02				add	bp,2
020A:5D89  B9 0002				mov	cx,2
020A:5D8C  3E: 3A 5E 00				cmp	bl,ds:[bp]
020A:5D90  75 03				jne	$+5			; Jump if not equal
020A:5D92  47					inc	di
020A:5D93  45					inc	bp
020A:5D94  49					dec	cx
020A:5D95  C6 06 17AE 01			mov	byte ptr ds:[17AEh],1	; (020A:17AE=43h)
020A:5D9A  3E: 8A 66 00				mov	ah,ds:[bp]
020A:5D9E  E8 FB17				call	$-4E6h
020A:5DA1  47					inc	di
020A:5DA2  45					inc	bp
020A:5DA3  E2 F0				loop	$-0Eh			; Loop if cx > 0

020A:5DA5  A1 2182				mov	ax,word ptr ds:[2182h]	; (020A:2182=2EFFh)
020A:5DA8  3B 06 2180				cmp	ax,word ptr ds:[2180h]	; (020A:2180=2E0Eh)
020A:5DAC  75 02				jne	$+4			; Jump if not equal
020A:5DAE  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:5DB0  9A 1481:3300				call	far ptr $-2AB0h
020A:5DB5  83 FB 00				cmp	bx,0
020A:5DB8  75 1C				jne	$+1Eh			; Jump if not equal
020A:5DBA  E9 00D1				jmp	$+0D4h
							                        ;* No entry point to code
020A:5DBD  8B 1E 217E				mov	bx,word ptr ds:[217Eh]	; (020A:217E=1E00h)
020A:5DC1  2B 1E 217C				sub	bx,word ptr ds:[217Ch]	; (020A:217C=4EE8h)
020A:5DC5  75 03				jnz	$+5			; Jump if not zero
020A:5DC7  E9 00C4				jmp	$+0C7h
							                        ;* No entry point to code
020A:5DCA  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:5DCD  2B 06 217C				sub	ax,word ptr ds:[217Ch]	; (020A:217C=4EE8h)
020A:5DD1  B9 0040				mov	cx,40h
020A:5DD4  F7 E1				mul	cx			; dx:ax = reg * ax
020A:5DD6  F7 F3				div	bx			; ax,dx rem=dx:ax/reg
020A:5DD8  8B 0E 216C				mov	cx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:5DDC  3B 0E 1D0A				cmp	cx,word ptr ds:[1D0Ah]	; (020A:1D0A=0)
020A:5DE0  75 0A				jne	$+0Ch			; Jump if not equal
020A:5DE2  8B 0E 216E				mov	cx,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:5DE6  3B 0E 1D0C				cmp	cx,word ptr ds:[1D0Ch]	; (020A:1D0C=0)
020A:5DEA  74 3B				je	$+3Dh			; Jump if equal
020A:5DEC  3B 06 2184				cmp	ax,word ptr ds:[2184h]	; (020A:2184=10Ch)
020A:5DF0  75 03				jne	$+5			; Jump if not equal
020A:5DF2  E9 0099				jmp	$+9Ch
							                        ;* No entry point to code
020A:5DF5  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 164

020A:5DFA  75 2B				jne	$+2Dh			; Jump if not equal
020A:5DFC  8B 1E 2182				mov	bx,word ptr ds:[2182h]	; (020A:2182=2EFFh)
020A:5E00  3B 1E 2180				cmp	bx,word ptr ds:[2180h]	; (020A:2180=2E0Eh)
020A:5E04  75 18				jne	$+1Ah			; Jump if not equal
020A:5E06  8B 1E 217E				mov	bx,word ptr ds:[217Eh]	; (020A:217E=1E00h)
020A:5E0A  2B 1E 217C				sub	bx,word ptr ds:[217Ch]	; (020A:217C=4EE8h)
020A:5E0E  8B D0				mov	dx,ax
020A:5E10  81 FB 0200				cmp	bx,200h
020A:5E14  77 08				ja	$+0Ah			; Jump if above
020A:5E16  F7 C2 0003				test	dx,3
020A:5E1A  74 0B				jz	$+0Dh			; Jump if zero
020A:5E1C  EB 70				jmp	short $+72h
							                        ;* No entry point to code
020A:5E1E  80 CA 01				or	dl,1
020A:5E21  3B 16 2184				cmp	dx,word ptr ds:[2184h]	; (020A:2184=10Ch)
020A:5E25  74 67				je	$+69h			; Jump if equal
020A:5E27  8B D0				mov	dx,ax
020A:5E29  BF 07C9				mov	di,7C9h
020A:5E2C  83 C7 1E				add	di,1Eh
020A:5E2F  81 EF 0096				sub	di,96h
020A:5E33  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5E37  A1 2184				mov	ax,word ptr ds:[2184h]	; (020A:2184=10Ch)
020A:5E3A  D1 E8				shr	ax,1			; Shift w/zeros fill
020A:5E3C  03 F8				add	di,ax
020A:5E3E  B4 FA				mov	ah,0FAh
020A:5E40  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:5E45  75 02				jne	$+4			; Jump if not equal
020A:5E47  B4 2E				mov	ah,2Eh			; '.'
020A:5E49  C6 06 17AE 01			mov	byte ptr ds:[17AEh],1	; (020A:17AE=43h)
020A:5E4E  E8 FA67				call	$-596h
020A:5E51  B4 0F				mov	ah,0Fh
020A:5E53  E8 FAF6				call	$-507h
020A:5E56  89 16 2184				mov	word ptr ds:[2184h],dx	; (020A:2184=10Ch)
020A:5E5A  BF 07C9				mov	di,7C9h
020A:5E5D  83 C7 1E				add	di,1Eh
020A:5E60  81 EF 0096				sub	di,96h
020A:5E64  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5E68  B4 2A				mov	ah,2Ah			; '*'
020A:5E6A  80 3E 17B1 02			cmp	byte ptr ds:[17B1h],2	; (020A:17B1=0)
020A:5E6F  74 0A				je	$+0Ch			; Jump if equal
020A:5E71  B4 DD				mov	ah,0DDh
020A:5E73  F7 C2 0001				test	dx,1
020A:5E77  74 02				jz	$+4			; Jump if zero
020A:5E79  B4 DE				mov	ah,0DEh
020A:5E7B  D1 EA				shr	dx,1			; Shift w/zeros fill
020A:5E7D  03 FA				add	di,dx
020A:5E7F  C6 06 17AE 01			mov	byte ptr ds:[17AEh],1	; (020A:17AE=43h)
020A:5E84  E8 FA31				call	$-5CCh
020A:5E87  8A 26 1207				mov	ah,byte ptr ds:[1207h]	; (020A:1207=0)
020A:5E8B  E8 FABE				call	$-53Fh
020A:5E8E  07					pop	es
020A:5E8F  5D					pop	bp
020A:5E90  5F					pop	di
020A:5E91  5A					pop	dx
020A:5E92  59					pop	cx
020A:5E93  5B					pop	bx
020A:5E94  58					pop	ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 165

020A:5E95  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:5E9A  74 05				je	$+7			; Jump if equal
020A:5E9C  9A 1481:C68C				call	far ptr $+67F0h
020A:5EA1  C3					retn
							                        ;* No entry point to code
020A:5EA2  87 DB				xchg	bx,bx
020A:5EA4  52					push	dx
020A:5EA5  51					push	cx
020A:5EA6  56					push	si
020A:5EA7  57					push	di
020A:5EA8  06					push	es
020A:5EA9  E8 1A12				call	$+1A15h
020A:5EAC  BE 1783				mov	si,1783h
020A:5EAF  F6 06 1782 03			test	byte ptr ds:[1782h],3	; (020A:1782=0)
020A:5EB4  75 03				jnz	$+5			; Jump if not zero
020A:5EB6  BE 1791				mov	si,1791h
020A:5EB9  BF 06D9				mov	di,6D9h
020A:5EBC  B9 1791				mov	cx,1791h
020A:5EBF  81 E9 1783				sub	cx,1783h
020A:5EC3  FC					cld				; Clear direction
020A:5EC4  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:5EC6  32 D2				xor	dl,dl			; Zero register
020A:5EC8  E8 19E7				call	$+19EAh
020A:5ECB  26: A1 0000				mov	ax,word ptr es:[0]	; (020A:0000=1828h)
020A:5ECF  3D FFFF				cmp	ax,0FFFFh
020A:5ED2  75 04				jne	$+6			; Jump if not equal
020A:5ED4  B2 01				mov	dl,1
020A:5ED6  33 C0				xor	ax,ax			; Zero register
020A:5ED8  BD 0699				mov	bp,699h
020A:5EDB  9A 1481:0294				call	far ptr $-5C47h
020A:5EE0  26: A1 0002				mov	ax,word ptr es:[2]	; (020A:0002=10h)
020A:5EE4  0A D2				or	dl,dl			; Zero ?
020A:5EE6  74 02				jz	$+4			; Jump if zero
020A:5EE8  33 C0				xor	ax,ax			; Zero register
020A:5EEA  BD 069E				mov	bp,69Eh
020A:5EED  9A 1481:0294				call	far ptr $-5C59h
020A:5EF2  BE 0000				mov	si,0
020A:5EF5  F6 06 1782 03			test	byte ptr ds:[1782h],3	; (020A:1782=0)
020A:5EFA  75 1D				jnz	$+1Fh			; Jump if not zero
020A:5EFC  A0 1CF1				mov	al,byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:5EFF  FE C8				dec	al
020A:5F01  B3 19				mov	bl,19h
020A:5F03  F6 E3				mul	bl			; ax = reg * al
020A:5F05  03 F0				add	si,ax
020A:5F07  26: F6 44 0B 40			test	byte ptr es:[si+0Bh],40h	; '@'
020A:5F0C  74 0B				jz	$+0Dh			; Jump if zero
020A:5F0E  81 FE 0000				cmp	si,0
020A:5F12  74 05				je	$+7			; Jump if equal
020A:5F14  83 EE 19				sub	si,19h
020A:5F17  EB EE				jmp	short $-10h
							                        ;* No entry point to code
020A:5F19  26: 8B 04				mov	ax,es:[si]
020A:5F1C  0A D2				or	dl,dl			; Zero ?
020A:5F1E  74 02				jz	$+4			; Jump if zero
020A:5F20  33 C0				xor	ax,ax			; Zero register
020A:5F22  BD 06E9				mov	bp,6E9h
020A:5F25  9A 1481:0294				call	far ptr $-5C91h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 166

020A:5F2A  26: 8B 44 04				mov	ax,es:[si+4]
020A:5F2E  BD 06EE				mov	bp,6EEh
020A:5F31  0A D2				or	dl,dl			; Zero ?
020A:5F33  74 02				jz	$+4			; Jump if zero
020A:5F35  33 C0				xor	ax,ax			; Zero register
020A:5F37  9A 1481:0294				call	far ptr $-5CA3h
020A:5F3C  07					pop	es
020A:5F3D  5F					pop	di
020A:5F3E  5E					pop	si
020A:5F3F  5A					pop	dx
020A:5F40  59					pop	cx
020A:5F41  E8 195C				call	$+195Fh
020A:5F44  C3					retn
							                        ;* No entry point to code
020A:5F45  87 DB				xchg	bx,bx
020A:5F47  90					nop
020A:5F48  BF 211E				mov	di,211Eh
020A:5F4B  57					push	di
020A:5F4C  B9 003C				mov	cx,3Ch
020A:5F4F  B3 00				mov	bl,0
020A:5F51  26: 8A 04				mov	al,es:[si]
020A:5F54  3C 20				cmp	al,20h			; ' '
020A:5F56  72 0B				jb	$+0Dh			; Jump if below
020A:5F58  3C 80				cmp	al,80h
020A:5F5A  73 07				jae	$+9			; Jump if above or =
020A:5F5C  88 05				mov	[di],al
020A:5F5E  FE C3				inc	bl
020A:5F60  47					inc	di
020A:5F61  EB 0E				jmp	short $+10h
							                        ;* No entry point to code
020A:5F63  80 FB 00				cmp	bl,0
020A:5F66  74 09				je	$+0Bh			; Jump if equal
020A:5F68  80 FB 08				cmp	bl,8
020A:5F6B  77 0C				ja	$+0Eh			; Jump if above
020A:5F6D  5F					pop	di
020A:5F6E  57					push	di
020A:5F6F  B3 00				mov	bl,0
020A:5F71  46					inc	si
020A:5F72  80 FB 20				cmp	bl,20h			; ' '
020A:5F75  77 02				ja	$+4			; Jump if above
020A:5F77  E2 D8				loop	$-26h			; Loop if cx > 0

020A:5F79  5F					pop	di
020A:5F7A  C3					retn
							                        ;* No entry point to code
020A:5F7B  90					nop
020A:5F7C  50					push	ax
020A:5F7D  B5 20				mov	ch,20h			; ' '
020A:5F7F  B4 01				mov	ah,1
020A:5F81  9A 1481:3240				call	far ptr $-2D41h
020A:5F86  58					pop	ax
020A:5F87  C3					retn
							                        ;* No entry point to code
020A:5F88  50					push	ax
020A:5F89  8B 0E 1D8D				mov	cx,word ptr ds:[1D8Dh]	; (020A:1D8D=0)
020A:5F8D  B4 01				mov	ah,1
020A:5F8F  9A 1481:3240				call	far ptr $-2D4Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 167

020A:5F94  58					pop	ax
020A:5F95  C3					retn
							                        ;* No entry point to code
020A:5F96  87 DB				xchg	bx,bx
020A:5F98  06					push	es
020A:5F99  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:5F9D  BF 06D5				mov	di,6D5h
020A:5FA0  81 EF 0631				sub	di,631h
020A:5FA4  81 C7 0190				add	di,190h
020A:5FA8  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:5FAC  B2 41				mov	dl,41h			; 'A'
020A:5FAE  B6 61				mov	dh,61h			; 'a'
020A:5FB0  B9 001A				mov	cx,1Ah
020A:5FB3  8A E2				mov	ah,dl
020A:5FB5  A0 1207				mov	al,byte ptr ds:[1207h]	; (020A:1207=0)
020A:5FB8  F7 C3 8000				test	bx,8000h
020A:5FBC  75 04				jnz	$+6			; Jump if not zero
020A:5FBE  8A E6				mov	ah,dh
020A:5FC0  B0 07				mov	al,7
020A:5FC2  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:5FC7  75 0B				jne	$+0Dh			; Jump if not equal
020A:5FC9  3A 06 1207				cmp	al,byte ptr ds:[1207h]	; (020A:1207=0)
020A:5FCD  75 05				jne	$+7			; Jump if not equal
020A:5FCF  C6 06 17AE 01			mov	byte ptr ds:[17AEh],1	; (020A:17AE=43h)
020A:5FD4  E8 F8E1				call	$-71Ch
020A:5FD7  8A E0				mov	ah,al
020A:5FD9  E8 F970				call	$-68Dh
020A:5FDC  83 C7 4F				add	di,4Fh
020A:5FDF  FE C2				inc	dl
020A:5FE1  FE C6				inc	dh
020A:5FE3  D1 C3				rol	bx,1			; Rotate
020A:5FE5  80 3E 3D40 02			cmp	byte ptr ds:[3D40h],2	; (020A:3D40=17h)
020A:5FEA  75 07				jne	$+9			; Jump if not equal
020A:5FEC  80 FA 4D				cmp	dl,4Dh			; 'M'
020A:5FEF  77 34				ja	$+36h			; Jump if above
020A:5FF1  EB 30				jmp	short $+32h
							                        ;* No entry point to code
020A:5FF3  83 F9 0D				cmp	cx,0Dh
020A:5FF6  75 0F				jne	$+11h			; Jump if not equal
020A:5FF8  BF 06FB				mov	di,6FBh
020A:5FFB  81 EF 0631				sub	di,631h
020A:5FFF  81 C7 0190				add	di,190h
020A:6003  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:6007  83 F9 0B				cmp	cx,0Bh
020A:600A  75 0E				jne	$+10h			; Jump if not equal
020A:600C  81 C7 00A0				add	di,0A0h
020A:6010  8A 3E 3D9C				mov	bh,byte ptr ds:[3D9Ch]	; (020A:3D9C=3Ch)
020A:6014  D0 CF				ror	bh,1			; Rotate
020A:6016  D0 CF				ror	bh,1			; Rotate
020A:6018  D0 CF				ror	bh,1			; Rotate
020A:601A  83 F9 07				cmp	cx,7
020A:601D  75 04				jne	$+6			; Jump if not equal
020A:601F  8A 3E 3D3E				mov	bh,byte ptr ds:[3D3Eh]	; (020A:3D3E=80h)
020A:6023  E2 8E				loop	$-70h			; Loop if cx > 0

020A:6025  07					pop	es
020A:6026  C3					retn
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 168

							                        ;* No entry point to code
020A:6027  90					nop
020A:6028  53					push	bx
020A:6029  51					push	cx
020A:602A  52					push	dx
020A:602B  57					push	di
020A:602C  56					push	si
020A:602D  06					push	es
020A:602E  E8 188D				call	$+1890h
020A:6031  BE 164F				mov	si,164Fh
020A:6034  BF 030F				mov	di,30Fh
020A:6037  B9 0003				mov	cx,3
020A:603A  F6 06 3D9C 07			test	byte ptr ds:[3D9Ch],7	; (020A:3D9C=3Ch)
020A:603F  75 02				jnz	$+4			; Jump if not zero
020A:6041  03 F1				add	si,cx
020A:6043  FC					cld				; Clear direction
020A:6044  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6046  BE 030F				mov	si,30Fh
020A:6049  BF 030F				mov	di,30Fh
020A:604C  81 EF 0096				sub	di,96h
020A:6050  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:6054  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:6058  B9 0003				mov	cx,3
020A:605B  8A 24				mov	ah,[si]
020A:605D  E8 F858				call	$-7A5h
020A:6060  47					inc	di
020A:6061  46					inc	si
020A:6062  E2 F7				loop	$-7			; Loop if cx > 0

020A:6064  B4 02				mov	ah,2
020A:6066  32 FF				xor	bh,bh			; Zero register
020A:6068  BA 184F				mov	dx,184Fh
020A:606B  9A 1481:3240				call	far ptr $-2E2Bh
020A:6070  07					pop	es
020A:6071  5E					pop	si
020A:6072  5F					pop	di
020A:6073  5A					pop	dx
020A:6074  59					pop	cx
020A:6075  5B					pop	bx
020A:6076  C3					retn
							                        ;* No entry point to code
020A:6077  90					nop
020A:6078  53					push	bx
020A:6079  E8 1842				call	$+1845h
020A:607C  B0 63				mov	al,63h			; 'c'
020A:607E  80 3E 2315 01			cmp	byte ptr ds:[2315h],1	; (020A:2315=0)
020A:6083  75 02				jne	$+4			; Jump if not equal
020A:6085  B0 33				mov	al,33h			; '3'
020A:6087  A2 16BA				mov	byte ptr ds:[16BAh],al	; (020A:16BA=0)
020A:608A  A2 1709				mov	byte ptr ds:[1709h],al	; (020A:1709=41h)
020A:608D  A0 1657				mov	al,byte ptr ds:[1657h]	; (020A:1657=0)
020A:6090  B9 1670				mov	cx,1670h
020A:6093  81 E9 1658				sub	cx,1658h
020A:6097  F6 E1				mul	cl			; ax = reg * al
020A:6099  05 1658				add	ax,1658h
020A:609C  8B F0				mov	si,ax
020A:609E  A0 1657				mov	al,byte ptr ds:[1657h]	; (020A:1657=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 169

020A:60A1  3C 00				cmp	al,0
020A:60A3  74 21				je	$+23h			; Jump if equal
020A:60A5  3C 01				cmp	al,1
020A:60A7  74 1D				je	$+1Fh			; Jump if equal
020A:60A9  3C 02				cmp	al,2
020A:60AB  74 14				je	$+16h			; Jump if equal
020A:60AD  80 3E 2315 01			cmp	byte ptr ds:[2315h],1	; (020A:2315=0)
020A:60B2  75 03				jne	$+5			; Jump if not equal
020A:60B4  BE 16D0				mov	si,16D0h
020A:60B7  F6 06 2314 04			test	byte ptr ds:[2314h],4	; (020A:2314=0)
020A:60BC  74 03				jz	$+5			; Jump if zero
020A:60BE  BE 16B8				mov	si,16B8h
020A:60C1  BB 16F8				mov	bx,16F8h
020A:60C4  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:60C6  BB 16E8				mov	bx,16E8h
020A:60C9  F6 06 2314 04			test	byte ptr ds:[2314h],4	; (020A:2314=0)
020A:60CE  74 03				jz	$+5			; Jump if zero
020A:60D0  BB 1708				mov	bx,1708h
020A:60D3  BF 047F				mov	di,47Fh
020A:60D6  26: C7 45 0B 2020			mov	word ptr es:[di+0Bh],2020h
020A:60DC  B4 20				mov	ah,20h			; ' '
020A:60DE  F7 06 3D41 8000			test	word ptr ds:[3D41h],8000h	; (020A:3D41=23h)
020A:60E4  74 07				jz	$+9			; Jump if zero
020A:60E6  26: C6 05 5B				mov	byte ptr es:[di],5Bh	; '['
020A:60EA  47					inc	di
020A:60EB  B4 5D				mov	ah,5Dh			; ']'
020A:60ED  B9 1664				mov	cx,1664h
020A:60F0  81 E9 1658				sub	cx,1658h
020A:60F4  AC					lodsb				; String [si] to al
020A:60F5  3C 20				cmp	al,20h			; ' '
020A:60F7  75 04				jne	$+6			; Jump if not equal
020A:60F9  8A C4				mov	al,ah
020A:60FB  B4 20				mov	ah,20h			; ' '
020A:60FD  AA					stosb				; Store al to es:[di]
020A:60FE  E2 F4				loop	$-0Ah			; Loop if cx > 0

020A:6100  B9 1670				mov	cx,1670h
020A:6103  81 E9 1664				sub	cx,1664h
020A:6107  BF 0572				mov	di,572h
020A:610A  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:610C  B9 16F8				mov	cx,16F8h
020A:610F  81 E9 16E8				sub	cx,16E8h
020A:6113  8B F3				mov	si,bx
020A:6115  BF 048F				mov	di,48Fh
020A:6118  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:611A  5B					pop	bx
020A:611B  C3					retn
020A:611C  E8 179F				call	$+17A2h
020A:611F  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:6123  C6 47 6F 00				mov	byte ptr [bx+6Fh],0
020A:6127  C6 47 5C 00				mov	byte ptr [bx+5Ch],0
020A:612B  C6 47 6E 00				mov	byte ptr [bx+6Eh],0
020A:612F  A0 1718				mov	al,byte ptr ds:[1718h]	; (020A:1718=0)
020A:6132  A8 01				test	al,1
020A:6134  74 04				jz	$+6			; Jump if zero
020A:6136  C6 47 6F 07				mov	byte ptr [bx+6Fh],7
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 170

020A:613A  A8 02				test	al,2
020A:613C  74 04				jz	$+6			; Jump if zero
020A:613E  C6 47 5C 07				mov	byte ptr [bx+5Ch],7
020A:6142  A8 04				test	al,4
020A:6144  74 04				jz	$+6			; Jump if zero
020A:6146  C6 47 6E 07				mov	byte ptr [bx+6Eh],7
020A:614A  BB 1722				mov	bx,1722h
020A:614D  D7					xlat				; al=[al+[bx]] table
020A:614E  8A E0				mov	ah,al
020A:6150  25 0FF0				and	ax,0FF0h
020A:6153  B1 04				mov	cl,4
020A:6155  D2 C8				ror	al,cl			; Rotate
020A:6157  8A DC				mov	bl,ah
020A:6159  32 E4				xor	ah,ah			; Zero register
020A:615B  B9 1730				mov	cx,1730h
020A:615E  81 E9 172A				sub	cx,172Ah
020A:6162  F6 E1				mul	cl			; ax = reg * al
020A:6164  05 172A				add	ax,172Ah
020A:6167  8B F0				mov	si,ax
020A:6169  BF 053D				mov	di,53Dh
020A:616C  FC					cld				; Clear direction
020A:616D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:616F  B8 1752				mov	ax,1752h
020A:6172  2D 1742				sub	ax,1742h
020A:6175  8B C8				mov	cx,ax
020A:6177  F6 E3				mul	bl			; ax = reg * al
020A:6179  8B F0				mov	si,ax
020A:617B  81 C6 1742				add	si,1742h
020A:617F  BF 0583				mov	di,583h
020A:6182  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6184  C3					retn
020A:6185  87 DB				xchg	bx,bx
020A:6187  90					nop
020A:6188  52					push	dx
020A:6189  50					push	ax
020A:618A  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:618F  1E					push	ds
020A:6190  E8 170D				call	$+1710h
020A:6193  BA 17C0				mov	dx,17C0h
020A:6196  B4 09				mov	ah,9
020A:6198  CD 21				int	21h			; DOS Services  ah=function 09h
										;  display char string at ds:dx
020A:619A  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:619F  9C					pushf				; Push flags
020A:61A0  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:61A5  5A					pop	dx
020A:61A6  8E DA				mov	ds,dx
020A:61A8  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:61AD  5A					pop	dx
020A:61AE  75 0A				jnz	$+0Ch			; Jump if not zero
020A:61B0  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:61B5  74 03				je	$+5			; Jump if equal
020A:61B7  E8 1BC6				call	$+1BC9h
020A:61BA  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:61BF  9D					popf				; Pop flags
020A:61C0  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:61C5  58					pop	ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 171

020A:61C6  5A					pop	dx
020A:61C7  C3					retn
020A:61C8  52					push	dx
020A:61C9  50					push	ax
020A:61CA  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:61CF  1E					push	ds
020A:61D0  E8 16CD				call	$+16D0h
020A:61D3  BA 17BC				mov	dx,17BCh
020A:61D6  B4 09				mov	ah,9
020A:61D8  CD 21				int	21h			; DOS Services  ah=function 09h
										;  display char string at ds:dx
020A:61DA  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:61DF  9C					pushf				; Push flags
020A:61E0  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:61E5  5A					pop	dx
020A:61E6  8E DA				mov	ds,dx
020A:61E8  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:61ED  5A					pop	dx
020A:61EE  75 0A				jnz	$+0Ch			; Jump if not zero
020A:61F0  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:61F5  74 03				je	$+5			; Jump if equal
020A:61F7  E8 1B86				call	$+1B89h
020A:61FA  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:61FF  9D					popf				; Pop flags
020A:6200  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:6205  58					pop	ax
020A:6206  5A					pop	dx
020A:6207  C3					retn
020A:6208  00					db	0
020A:6209  00					db	0
020A:620A  00					db	0
020A:620B  00					db	0
020A:620C  00					db	0
020A:620D  00 00				add	[bx+si],al
020A:620F  00 50 3E				add	[bx+si+3Eh],dl
020A:6212  81 7E 00 2020			cmp	word ptr [bp],2020h
020A:6217  74 05				je	$+7			; Jump if equal
020A:6219  45					inc	bp
020A:621A  FE C8				dec	al
020A:621C  75 F3				jnz	$-0Bh			; Jump if not zero
020A:621E  58					pop	ax
020A:621F  C3					retn
							                        ;* No entry point to code
020A:6220  E8 169B				call	$+169Eh
020A:6223  8B 36 2172				mov	si,word ptr ds:[2172h]	; (020A:2172=59h)
020A:6227  BF 1978				mov	di,1978h
020A:622A  A1 2170				mov	ax,word ptr ds:[2170h]	; (020A:2170=0E8FBh)
020A:622D  8E D8				mov	ds,ax
020A:622F  0B F6				or	si,si			; Zero ?
020A:6231  74 09				jz	$+0Bh			; Jump if zero
020A:6233  33 C9				xor	cx,cx			; Zero register
020A:6235  2B CE				sub	cx,si
020A:6237  83 F9 28				cmp	cx,28h
020A:623A  72 10				jb	$+12h			; Jump if below
020A:623C  B9 0028				mov	cx,28h
020A:623F  FC					cld				; Clear direction
020A:6240  26: 80 3E 1CF7 0A			cmp	byte ptr es:[1CF7h],0Ah	; (020A:1CF7=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 172

020A:6246  74 2F				je	$+31h			; Jump if equal
020A:6248  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:624A  EB 2F				jmp	short $+31h
							                        ;* No entry point to code
020A:624C  51					push	cx
020A:624D  FC					cld				; Clear direction
020A:624E  26: 80 3E 1CF7 0A			cmp	byte ptr es:[1CF7h],0Ah	; (020A:1CF7=0)
020A:6254  74 04				je	$+6			; Jump if equal
020A:6256  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6258  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:625A  32 C0				xor	al,al			; Zero register
020A:625C  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:625E  58					pop	ax
020A:625F  B9 0028				mov	cx,28h
020A:6262  2B C8				sub	cx,ax
020A:6264  8C D8				mov	ax,ds
020A:6266  05 1000				add	ax,1000h
020A:6269  8E D8				mov	ds,ax
020A:626B  26: 80 3E 1CF7 0A			cmp	byte ptr es:[1CF7h],0Ah	; (020A:1CF7=0)
020A:6271  74 04				je	$+6			; Jump if equal
020A:6273  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6275  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:6277  32 C0				xor	al,al			; Zero register
020A:6279  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:627B  E8 1622				call	$+1625h
020A:627E  8B 36 2172				mov	si,word ptr ds:[2172h]	; (F8FB:2172=668Dh)
020A:6282  03 36 2174				add	si,word ptr ds:[2174h]	; (F8FB:2174=5FFCh)
020A:6286  89 36 216E				mov	word ptr ds:[216Eh],si	; (F8FB:216E=0CA8Bh)
020A:628A  BE 1978				mov	si,1978h
020A:628D  C3					retn
							                        ;* No entry point to code
020A:628E  87 DB				xchg	bx,bx
020A:6290  06					push	es
020A:6291  F6 06 2302 01			test	byte ptr ds:[2302h],1	; (020A:2302=0)
020A:6296  74 34				jz	$+36h			; Jump if zero
020A:6298  BF 0708				mov	di,708h
020A:629B  81 EF 0096				sub	di,96h
020A:629F  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:62A3  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:62A7  BE 1978				mov	si,1978h
020A:62AA  B9 0004				mov	cx,4
020A:62AD  8A 04				mov	al,[si]
020A:62AF  9A 1481:0100				call	far ptr $-61AFh
020A:62B4  8A E3				mov	ah,bl
020A:62B6  E8 F5FF				call	$-9FEh
020A:62B9  B4 0F				mov	ah,0Fh
020A:62BB  E8 F68E				call	$-96Fh
020A:62BE  8A E7				mov	ah,bh
020A:62C0  E8 F5F5				call	$-0A08h
020A:62C3  B4 0F				mov	ah,0Fh
020A:62C5  E8 F684				call	$-979h
020A:62C8  47					inc	di
020A:62C9  46					inc	si
020A:62CA  E2 E1				loop	$-1Dh			; Loop if cx > 0

           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 173

020A:62CC  F6 06 2302 02			test	byte ptr ds:[2302h],2	; (020A:2302=0)
020A:62D1  74 16				jz	$+18h			; Jump if zero
020A:62D3  B9 5000				mov	cx,5000h
020A:62D6  F7 06 1D62 07F0			test	word ptr ds:[1D62h],7F0h	; (020A:1D62=0)
020A:62DC  75 03				jnz	$+5			; Jump if not zero
020A:62DE  B9 1000				mov	cx,1000h
020A:62E1  EB 00				jmp	short $+2		; delay for I/O
020A:62E3  EB 00				jmp	short $+2		; delay for I/O
020A:62E5  EB 00				jmp	short $+2		; delay for I/O
020A:62E7  E2 F8				loop	$-6			; Loop if cx > 0

020A:62E9  F6 06 2302 08			test	byte ptr ds:[2302h],8	; (020A:2302=0)
020A:62EE  74 2C				jz	$+2Eh			; Jump if zero
020A:62F0  A0 2303				mov	al,byte ptr ds:[2303h]	; (020A:2303=0)
020A:62F3  3A 06 17A7				cmp	al,byte ptr ds:[17A7h]	; (020A:17A7=0)
020A:62F7  77 06				ja	$+8			; Jump if above
020A:62F9  3A 06 17A2				cmp	al,byte ptr ds:[17A2h]	; (020A:17A2=0)
020A:62FD  75 1D				jne	$+1Fh			; Jump if not equal
020A:62FF  A1 2304				mov	ax,word ptr ds:[2304h]	; (020A:2304=0)
020A:6302  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:6306  75 14				jne	$+16h			; Jump if not equal
020A:6308  A1 2306				mov	ax,word ptr ds:[2306h]	; (020A:2306=0)
020A:630B  3B 06 216E				cmp	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:630F  75 0B				jne	$+0Dh			; Jump if not equal
020A:6311  9A 1481:3128				call	far ptr $-31E9h
020A:6316  9A 1481:0800				call	far ptr $-5B16h
020A:631B  90					nop
020A:631C  07					pop	es
020A:631D  C3					retn
							                        ;* No entry point to code
020A:631E  87 DB				xchg	bx,bx
020A:6320  F7 06 3D3C 0100			test	word ptr ds:[3D3Ch],100h	; (020A:3D3C=2477h)
020A:6326  74 67				jz	$+69h			; Jump if zero
020A:6328  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:632D  75 60				jne	$+62h			; Jump if not equal
020A:632F  06					push	es
020A:6330  1E					push	ds
020A:6331  07					pop	es
020A:6332  A0 230C				mov	al,byte ptr ds:[230Ch]	; (020A:230C=0)
020A:6335  B9 4678				mov	cx,4678h
020A:6338  81 E9 4668				sub	cx,4668h
020A:633C  F6 E1				mul	cl			; ax = reg * al
020A:633E  BF 671E				mov	di,671Eh
020A:6341  BE 4668				mov	si,4668h
020A:6344  03 F0				add	si,ax
020A:6346  FC					cld				; Clear direction
020A:6347  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6349  A1 234C				mov	ax,word ptr ds:[234Ch]	; (020A:234C=0)
020A:634C  3B 06 2308				cmp	ax,word ptr ds:[2308h]	; (020A:2308=0)
020A:6350  74 17				je	$+19h			; Jump if equal
020A:6352  A3 2308				mov	word ptr ds:[2308h],ax	; (020A:2308=0)
020A:6355  C6 06 6730 44			mov	byte ptr ds:[6730h],44h	; (020A:6730=26h) 'D'
020A:635A  BD 6737				mov	bp,6737h
020A:635D  9A 1481:0294				call	far ptr $-60C9h
020A:6362  B0 52				mov	al,52h			; 'R'
020A:6364  9A 1481:2790				call	far ptr $-3BD4h
020A:6369  A1 234A				mov	ax,word ptr ds:[234Ah]	; (020A:234A=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 174

020A:636C  3B 06 230A				cmp	ax,word ptr ds:[230Ah]	; (020A:230A=0)
020A:6370  74 17				je	$+19h			; Jump if equal
020A:6372  A3 230A				mov	word ptr ds:[230Ah],ax	; (020A:230A=0)
020A:6375  C6 06 6730 45			mov	byte ptr ds:[6730h],45h	; (020A:6730=26h) 'E'
020A:637A  BD 6737				mov	bp,6737h
020A:637D  9A 1481:0294				call	far ptr $-60E9h
020A:6382  B0 52				mov	al,52h			; 'R'
020A:6384  9A 1481:2790				call	far ptr $-3BF4h
020A:6389  C6 06 230C 00			mov	byte ptr ds:[230Ch],0	; (020A:230C=0)
020A:638E  07					pop	es
020A:638F  C3					retn
							                        ;* No entry point to code
020A:6390  57					push	di
020A:6391  06					push	es
020A:6392  A2 17A7				mov	byte ptr ds:[17A7h],al	; (020A:17A7=0)
020A:6395  8A E0				mov	ah,al
020A:6397  D0 EC				shr	ah,1			; Shift w/zeros fill
020A:6399  80 C4 30				add	ah,30h			; '0'
020A:639C  88 26 5854				mov	byte ptr ds:[5854h],ah	; (020A:5854=1)
020A:63A0  BD 0772				mov	bp,772h
020A:63A3  3E: 88 66 00				mov	ds:[bp],ah
020A:63A7  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (020A:131B=0)
020A:63AB  BF 0772				mov	di,772h
020A:63AE  81 EF 0096				sub	di,96h
020A:63B2  03 3E 131D				add	di,word ptr ds:[131Dh]	; (020A:131D=0)
020A:63B6  E8 F4FF				call	$-0AFEh
020A:63B9  07					pop	es
020A:63BA  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:63BF  74 1D				je	$+1Fh			; Jump if equal
020A:63C1  80 3E 17A7 0A			cmp	byte ptr ds:[17A7h],0Ah	; (020A:17A7=0)
020A:63C6  72 0E				jb	$+10h			; Jump if below
020A:63C8  F6 06 3D9C 07			test	byte ptr ds:[3D9Ch],7	; (020A:3D9C=3Ch)
020A:63CD  75 0C				jnz	$+0Eh			; Jump if not zero
020A:63CF  80 0E 3D9C 07			or	byte ptr ds:[3D9Ch],7	; (020A:3D9C=3Ch)
020A:63D4  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:63D6  80 26 3D9C F8			and	byte ptr ds:[3D9Ch],0F8h	; (020A:3D9C=3Ch)
020A:63DB  E8 FC4A				call	$-3B3h
020A:63DE  5F					pop	di
020A:63DF  C3					retn
							                        ;* No entry point to code
020A:63E0  50					push	ax
020A:63E1  53					push	bx
020A:63E2  56					push	si
020A:63E3  55					push	bp
020A:63E4  C6 06 4249 00			mov	byte ptr ds:[4249h],0	; (020A:4249=74h)
020A:63E9  BD 0002				mov	bp,2
020A:63EC  8B F0				mov	si,ax
020A:63EE  A3 2FD4				mov	word ptr ds:[2FD4h],ax	; (020A:2FD4=3D53h)
020A:63F1  8B CB				mov	cx,bx
020A:63F3  89 1E 2FD2				mov	word ptr ds:[2FD2h],bx	; (020A:2FD2=454Ch)
020A:63F7  83 FA 20				cmp	dx,20h
020A:63FA  75 0B				jne	$+0Dh			; Jump if not equal
020A:63FC  E8 14BF				call	$+14C2h
020A:63FF  BA 002C				mov	dx,2Ch
020A:6402  BF 36A4				mov	di,36A4h
020A:6405  EB 76				jmp	short $+78h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 175

							                        ;* No entry point to code
020A:6407  83 FA 10				cmp	dx,10h
020A:640A  75 0B				jne	$+0Dh			; Jump if not equal
020A:640C  E8 14A3				call	$+14A6h
020A:640F  BA 0019				mov	dx,19h
020A:6412  BF 0000				mov	di,0
020A:6415  EB 66				jmp	short $+68h
							                        ;* No entry point to code
020A:6417  83 FA 08				cmp	dx,8
020A:641A  75 0C				jne	$+0Eh			; Jump if not equal
020A:641C  E8 1493				call	$+1496h
020A:641F  BA 0019				mov	dx,19h
020A:6422  BF 0000				mov	di,0
020A:6425  E9 0084				jmp	$+87h
							                        ;* No entry point to code
020A:6428  83 FA 01				cmp	dx,1
020A:642B  74 32				je	$+34h			; Jump if equal
020A:642D  83 FA 02				cmp	dx,2
020A:6430  74 3C				je	$+3Eh			; Jump if equal
020A:6432  83 FA 04				cmp	dx,4
020A:6435  74 0B				je	$+0Dh			; Jump if equal
020A:6437  83 FA 40				cmp	dx,40h
020A:643A  74 16				je	$+18h			; Jump if equal
020A:643C  BB 0004				mov	bx,4
020A:643F  E9 0D5C				jmp	$+0D5Fh
							                        ;* No entry point to code
020A:6442  E8 1A67				call	$+1A6Ah
020A:6445  BB 003D				mov	bx,3Dh
020A:6448  03 1E 17AF				add	bx,word ptr ds:[17AFh]	; (020A:17AF=5C3Ah)
020A:644C  BA 004C				mov	dx,4Ch
020A:644F  E9 0083				jmp	$+86h
							                        ;* No entry point to code
020A:6452  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:6458  74 05				je	$+7			; Jump if equal
020A:645A  E8 146D				call	$+1470h
020A:645D  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:645F  E8 19DE				call	$+19E1h
020A:6462  BB 0007				mov	bx,7
020A:6465  03 1E 17AF				add	bx,word ptr ds:[17AFh]	; (020A:17AF=5C3Ah)
020A:6469  BA 0016				mov	dx,16h
020A:646C  EB 67				jmp	short $+69h
							                        ;* No entry point to code
020A:646E  E8 1963				call	$+1966h
020A:6471  BB 000A				mov	bx,0Ah
020A:6474  BA 0019				mov	dx,19h
020A:6477  03 16 17AF				add	dx,word ptr ds:[17AFh]	; (020A:17AF=5C3Ah)
020A:647B  EB 58				jmp	short $+5Ah
							                        ;* No entry point to code
020A:647D  33 ED				xor	bp,bp			; Zero register
020A:647F  06					push	es
020A:6480  8C D8				mov	ax,ds
020A:6482  8E C0				mov	es,ax
020A:6484  1F					pop	ds
020A:6485  BB FFFF				mov	bx,0FFFFh
020A:6488  39 75 02				cmp	[di+2],si
020A:648B  74 09				je	$+0Bh			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 176

020A:648D  39 1D				cmp	[di],bx
020A:648F  74 0B				je	$+0Dh			; Jump if equal
020A:6491  03 FA				add	di,dx
020A:6493  45					inc	bp
020A:6494  EB F2				jmp	short $-0Ch
							                        ;* No entry point to code
020A:6496  39 0D				cmp	[di],cx
020A:6498  75 F3				jne	$-0Bh			; Jump if not equal
020A:649A  EB 09				jmp	short $+0Bh
							                        ;* No entry point to code
020A:649C  39 5D 02				cmp	[di+2],bx
020A:649F  75 02				jne	$+4			; Jump if not equal
020A:64A1  EB 05				jmp	short $+7
020A:64A3  EB EC				jmp	short $-12h
							                        ;* No entry point to code
020A:64A5  F9					stc				; Set carry flag
020A:64A6  EB 01				jmp	short $+3
							                        ;* No entry point to code
020A:64A8  F8					clc				; Clear carry flag
020A:64A9  E9 02E1				jmp	$+2E4h
							                        ;* No entry point to code
020A:64AC  33 ED				xor	bp,bp			; Zero register
020A:64AE  06					push	es
020A:64AF  8C D8				mov	ax,ds
020A:64B1  8E C0				mov	es,ax
020A:64B3  1F					pop	ds
020A:64B4  BB FFFF				mov	bx,0FFFFh
020A:64B7  39 75 17				cmp	[di+17h],si
020A:64BA  74 09				je	$+0Bh			; Jump if equal
020A:64BC  39 1D				cmp	[di],bx
020A:64BE  74 0C				je	$+0Eh			; Jump if equal
020A:64C0  03 FA				add	di,dx
020A:64C2  45					inc	bp
020A:64C3  EB F2				jmp	short $-0Ch
							                        ;* No entry point to code
020A:64C5  39 4D 15				cmp	[di+15h],cx
020A:64C8  75 F2				jne	$-0Ch			; Jump if not equal
020A:64CA  EB D9				jmp	short $-25h
							                        ;* No entry point to code
020A:64CC  39 5D 02				cmp	[di+2],bx
020A:64CF  75 02				jne	$+4			; Jump if not equal
020A:64D1  EB D5				jmp	short $-29h
020A:64D3  EB EB				jmp	short $-13h
							                        ;* No entry point to code
020A:64D5  BF 0008				mov	di,8
020A:64D8  26: A1 0002				mov	ax,word ptr es:[2]	; (020A:0002=10h)
020A:64DC  3B C1				cmp	ax,cx
020A:64DE  77 0F				ja	$+11h			; Jump if above
020A:64E0  72 08				jc	$+0Ah			; Jump if carry Set
020A:64E2  26: A1 0004				mov	ax,word ptr es:[4]	; (020A:0004=808h)
020A:64E6  3B C6				cmp	ax,si
020A:64E8  77 05				ja	$+7			; Jump if above
020A:64EA  26: 8B 3E 0006			mov	di,word ptr es:data_5+1	; (020A:0006=3)
020A:64EF  06					push	es
020A:64F0  8C D8				mov	ax,ds
020A:64F2  8E C0				mov	es,ax
020A:64F4  1F					pop	ds
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 177

020A:64F5  B4 03				mov	ah,3
020A:64F7  26: 80 3E 1657 01			cmp	byte ptr es:[1657h],1	; (020A:1657=0)
020A:64FD  77 05				ja	$+7			; Jump if above
020A:64FF  03 DD				add	bx,bp
020A:6501  E9 00BD				jmp	$+0C0h
							                        ;* No entry point to code
020A:6504  39 0D				cmp	[di],cx
020A:6506  73 35				jae	$+37h			; Jump if above or =
020A:6508  8A 45 05				mov	al,[di+5]
020A:650B  84 C4				test	al,ah
020A:650D  75 11				jnz	$+13h			; Jump if not zero
020A:650F  03 FB				add	di,bx
020A:6511  39 0D				cmp	[di],cx
020A:6513  73 28				jae	$+2Ah			; Jump if above or =
020A:6515  8A 45 05				mov	al,[di+5]
020A:6518  84 C4				test	al,ah
020A:651A  75 04				jnz	$+6			; Jump if not zero
020A:651C  03 FB				add	di,bx
020A:651E  EB E4				jmp	short $-1Ah
							                        ;* No entry point to code
020A:6520  A8 02				test	al,2
020A:6522  75 06				jnz	$+8			; Jump if not zero
020A:6524  03 FB				add	di,bx
020A:6526  03 FD				add	di,bp
020A:6528  EB DA				jmp	short $-24h
							                        ;* No entry point to code
020A:652A  A8 01				test	al,1
020A:652C  75 04				jnz	$+6			; Jump if not zero
020A:652E  03 FA				add	di,dx
020A:6530  EB D2				jmp	short $-2Ch
							                        ;* No entry point to code
020A:6532  8A 45 06				mov	al,[di+6]
020A:6535  32 E4				xor	ah,ah			; Zero register
020A:6537  03 F8				add	di,ax
020A:6539  B4 03				mov	ah,3
020A:653B  EB C7				jmp	short $-37h
							                        ;* No entry point to code
020A:653D  74 0B				jz	$+0Dh			; Jump if zero
020A:653F  83 3D FF				cmp	word ptr [di],0FFFFh
020A:6542  75 4B				jne	$+4Dh			; Jump if not equal
020A:6544  3B 3E 0000				cmp	di,word ptr ds:[0]	; (020A:0000=1828h)
020A:6548  73 45				jae	$+47h			; Jump if above or =
020A:654A  39 0D				cmp	[di],cx
020A:654C  75 41				jne	$+43h			; Jump if not equal
020A:654E  39 75 02				cmp	[di+2],si
020A:6551  73 3A				jae	$+3Ch			; Jump if above or =
020A:6553  8A 45 05				mov	al,[di+5]
020A:6556  84 C4				test	al,ah
020A:6558  75 16				jnz	$+18h			; Jump if not zero
020A:655A  03 FB				add	di,bx
020A:655C  39 0D				cmp	[di],cx
020A:655E  75 2F				jne	$+31h			; Jump if not equal
020A:6560  39 75 02				cmp	[di+2],si
020A:6563  73 28				jae	$+2Ah			; Jump if above or =
020A:6565  8A 45 05				mov	al,[di+5]
020A:6568  84 C4				test	al,ah
020A:656A  75 04				jnz	$+6			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 178

020A:656C  03 FB				add	di,bx
020A:656E  EB DA				jmp	short $-24h
							                        ;* No entry point to code
020A:6570  A8 02				test	al,2
020A:6572  75 06				jnz	$+8			; Jump if not zero
020A:6574  03 FB				add	di,bx
020A:6576  03 FD				add	di,bp
020A:6578  EB D0				jmp	short $-2Eh
							                        ;* No entry point to code
020A:657A  A8 01				test	al,1
020A:657C  75 04				jnz	$+6			; Jump if not zero
020A:657E  03 FA				add	di,dx
020A:6580  EB C8				jmp	short $-36h
							                        ;* No entry point to code
020A:6582  8A 45 06				mov	al,[di+6]
020A:6585  32 E4				xor	ah,ah			; Zero register
020A:6587  03 F8				add	di,ax
020A:6589  B4 03				mov	ah,3
020A:658B  EB BD				jmp	short $-41h
							                        ;* No entry point to code
020A:658D  74 02				jz	$+4			; Jump if zero
020A:658F  EB 2D				jmp	short $+2Fh
							                        ;* No entry point to code
020A:6591  83 FA 16				cmp	dx,16h
020A:6594  75 25				jne	$+27h			; Jump if not equal
020A:6596  26: 80 3E 3C2B 01			cmp	byte ptr es:[3C2Bh],1	; (020A:3C2B=3)
020A:659C  74 1D				je	$+1Fh			; Jump if equal
020A:659E  26: 80 3E 4249 00			cmp	byte ptr es:[4249h],0	; (020A:4249=74h)
020A:65A4  75 0A				jne	$+0Ch			; Jump if not equal
020A:65A6  89 3E 0006				mov	word ptr data_5+1,di	; (020A:0006=3)
020A:65AA  26: C6 06 4249 01			mov	byte ptr es:[4249h],1	; (020A:4249=74h)
020A:65B0  8A 45 04				mov	al,[di+4]
020A:65B3  24 1F				and	al,1Fh
020A:65B5  3C 1F				cmp	al,1Fh
020A:65B7  75 02				jne	$+4			; Jump if not equal
020A:65B9  EB 98				jmp	short $-66h
020A:65BB  E9 00BF				jmp	$+0C2h
020A:65BE  E9 014B				jmp	$+14Eh
							                        ;* No entry point to code
020A:65C1  39 0D				cmp	[di],cx
020A:65C3  73 37				jae	$+39h			; Jump if above or =
020A:65C5  8A 45 05				mov	al,[di+5]
020A:65C8  22 C4				and	al,ah
020A:65CA  3C 01				cmp	al,1
020A:65CC  75 13				jne	$+15h			; Jump if not equal
020A:65CE  03 FB				add	di,bx
020A:65D0  39 0D				cmp	[di],cx
020A:65D2  73 28				jae	$+2Ah			; Jump if above or =
020A:65D4  8A 45 05				mov	al,[di+5]
020A:65D7  22 C4				and	al,ah
020A:65D9  3C 01				cmp	al,1
020A:65DB  75 04				jne	$+6			; Jump if not equal
020A:65DD  03 FB				add	di,bx
020A:65DF  EB E0				jmp	short $-1Eh
							                        ;* No entry point to code
020A:65E1  77 06				ja	$+8			; Jump if above
020A:65E3  03 FB				add	di,bx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 179

020A:65E5  2B FD				sub	di,bp
020A:65E7  EB D8				jmp	short $-26h
							                        ;* No entry point to code
020A:65E9  3C 02				cmp	al,2
020A:65EB  75 04				jne	$+6			; Jump if not equal
020A:65ED  03 FA				add	di,dx
020A:65EF  EB D0				jmp	short $-2Eh
							                        ;* No entry point to code
020A:65F1  8A 45 06				mov	al,[di+6]
020A:65F4  32 E4				xor	ah,ah			; Zero register
020A:65F6  03 F8				add	di,ax
020A:65F8  B4 03				mov	ah,3
020A:65FA  EB C5				jmp	short $-39h
							                        ;* No entry point to code
020A:65FC  74 0B				jz	$+0Dh			; Jump if zero
020A:65FE  83 3D FF				cmp	word ptr [di],0FFFFh
020A:6601  75 4D				jne	$+4Fh			; Jump if not equal
020A:6603  3B 3E 0000				cmp	di,word ptr ds:[0]	; (020A:0000=1828h)
020A:6607  73 47				jae	$+49h			; Jump if above or =
020A:6609  39 0D				cmp	[di],cx
020A:660B  75 43				jne	$+45h			; Jump if not equal
020A:660D  39 75 02				cmp	[di+2],si
020A:6610  73 3C				jae	$+3Eh			; Jump if above or =
020A:6612  8A 45 05				mov	al,[di+5]
020A:6615  22 C4				and	al,ah
020A:6617  3C 01				cmp	al,1
020A:6619  75 18				jne	$+1Ah			; Jump if not equal
020A:661B  03 FB				add	di,bx
020A:661D  39 0D				cmp	[di],cx
020A:661F  75 2F				jne	$+31h			; Jump if not equal
020A:6621  39 75 02				cmp	[di+2],si
020A:6624  73 28				jae	$+2Ah			; Jump if above or =
020A:6626  8A 45 05				mov	al,[di+5]
020A:6629  22 C4				and	al,ah
020A:662B  3C 01				cmp	al,1
020A:662D  75 04				jne	$+6			; Jump if not equal
020A:662F  03 FB				add	di,bx
020A:6631  EB D6				jmp	short $-28h
							                        ;* No entry point to code
020A:6633  77 06				ja	$+8			; Jump if above
020A:6635  03 FB				add	di,bx
020A:6637  2B FD				sub	di,bp
020A:6639  EB CE				jmp	short $-30h
							                        ;* No entry point to code
020A:663B  3C 02				cmp	al,2
020A:663D  75 04				jne	$+6			; Jump if not equal
020A:663F  03 FA				add	di,dx
020A:6641  EB C6				jmp	short $-38h
							                        ;* No entry point to code
020A:6643  8A 45 06				mov	al,[di+6]
020A:6646  32 E4				xor	ah,ah			; Zero register
020A:6648  03 F8				add	di,ax
020A:664A  B4 03				mov	ah,3
020A:664C  EB BB				jmp	short $-43h
							                        ;* No entry point to code
020A:664E  74 03				jz	$+5			; Jump if zero
020A:6650  E9 00B9				jmp	$+0BCh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 180

							                        ;* No entry point to code
020A:6653  83 FA 16				cmp	dx,16h
020A:6656  75 25				jne	$+27h			; Jump if not equal
020A:6658  26: 80 3E 3C2B 01			cmp	byte ptr es:[3C2Bh],1	; (020A:3C2B=3)
020A:665E  74 1D				je	$+1Fh			; Jump if equal
020A:6660  26: 80 3E 4249 00			cmp	byte ptr es:[4249h],0	; (020A:4249=74h)
020A:6666  75 0A				jne	$+0Ch			; Jump if not equal
020A:6668  89 3E 0006				mov	word ptr data_5+1,di	; (020A:0006=3)
020A:666C  26: C6 06 4249 01			mov	byte ptr es:[4249h],1	; (020A:4249=74h)
020A:6672  8A 45 04				mov	al,[di+4]
020A:6675  24 1F				and	al,1Fh
020A:6677  3C 1F				cmp	al,1Fh
020A:6679  75 02				jne	$+4			; Jump if not equal
020A:667B  EB 95				jmp	short $-69h
							                        ;* No entry point to code
020A:667D  8B 05				mov	ax,[di]
020A:667F  A3 0002				mov	word ptr ds:[2],ax	; (020A:0002=10h)
020A:6682  8B 45 02				mov	ax,[di+2]
020A:6685  A3 0004				mov	word ptr ds:[4],ax	; (020A:0004=808h)
020A:6688  26: 80 3E 4249 00			cmp	byte ptr es:[4249h],0	; (020A:4249=74h)
020A:668E  75 04				jne	$+6			; Jump if not equal
020A:6690  89 3E 0006				mov	word ptr data_5+1,di	; (020A:0006=3)
020A:6694  26: A1 2FD2				mov	ax,word ptr es:[2FD2h]	; (020A:2FD2=454Ch)
020A:6698  26: 3B 06 216C			cmp	ax,word ptr es:[216Ch]	; (020A:216C=2EFFh)
020A:669D  75 69				jne	$+6Bh			; Jump if not equal
020A:669F  26: A1 2FD4				mov	ax,word ptr es:[2FD4h]	; (020A:2FD4=3D53h)
020A:66A3  26: 3B 06 216E			cmp	ax,word ptr es:[216Eh]	; (020A:216E=104h)
020A:66A8  75 5E				jne	$+60h			; Jump if not equal
020A:66AA  BB 2F9C				mov	bx,2F9Ch
020A:66AD  8A 45 05				mov	al,[di+5]
020A:66B0  25 000F				and	ax,0Fh
020A:66B3  26: D7				xlat	es:[bx]			; al=[al+[bx]] table
020A:66B5  0A C0				or	al,al			; Zero ?
020A:66B7  75 03				jnz	$+5			; Jump if not zero
020A:66B9  8A 45 06				mov	al,[di+6]
020A:66BC  8B D8				mov	bx,ax
020A:66BE  8B 01				mov	ax,[bx+di]
020A:66C0  26: 3B 06 216C			cmp	ax,word ptr es:[216Ch]	; (020A:216C=2EFFh)
020A:66C5  8B 41 02				mov	ax,[bx+di+2]
020A:66C8  74 03				jz	$+5			; Jump if zero
020A:66CA  B8 FFFF				mov	ax,0FFFFh
020A:66CD  8A 51 05				mov	dl,[bx+di+5]
020A:66D0  80 E2 0C				and	dl,0Ch
020A:66D3  80 FA 00				cmp	dl,0
020A:66D6  74 10				je	$+12h			; Jump if equal
020A:66D8  80 FA 04				cmp	dl,4
020A:66DB  74 27				je	$+29h			; Jump if equal
020A:66DD  80 FA 08				cmp	dl,8
020A:66E0  75 26				jne	$+28h			; Jump if not equal
020A:66E2  26: A3 3DAD				mov	word ptr es:[3DADh],ax	; (020A:3DAD=8B3Eh)
020A:66E6  EB 20				jmp	short $+22h
							                        ;* No entry point to code
020A:66E8  26: A3 3DAB				mov	word ptr es:[3DABh],ax	; (020A:3DAB=80DBh)
020A:66EC  8A 41 04				mov	al,[bx+di+4]
020A:66EF  26: A2 3DAF				mov	byte ptr es:[3DAFh],al	; (020A:3DAF=44h)
020A:66F3  32 C0				xor	al,al			; Zero register
020A:66F5  F6 41 05 0F				test	byte ptr [bx+di+5],0Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 181

020A:66F9  74 03				jz	$+5			; Jump if zero
020A:66FB  8A 41 09				mov	al,[bx+di+9]
020A:66FE  26: A2 3DB0				mov	byte ptr es:[3DB0h],al	; (020A:3DB0=1)
020A:6702  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:6704  26: A3 3DA9				mov	word ptr es:[3DA9h],ax	; (020A:3DA9=87C3h)
020A:6708  F9					stc				; Set carry flag
020A:6709  E9 0081				jmp	$+84h
							                        ;* No entry point to code
020A:670C  8A 55 05				mov	dl,[di+5]
020A:670F  80 E2 0C				and	dl,0Ch
020A:6712  80 FA 04				cmp	dl,4
020A:6715  75 15				jne	$+17h			; Jump if not equal
020A:6717  F6 45 05 10				test	byte ptr [di+5],10h
020A:671B  74 0F				jz	$+11h			; Jump if zero
020A:671D  8B 05				mov	ax,[di]
020A:671F  A3 0002				mov	word ptr ds:[2],ax	; (020A:0002=10h)
020A:6722  8B 45 02				mov	ax,[di+2]
020A:6725  A3 0004				mov	word ptr ds:[4],ax	; (020A:0004=808h)
020A:6728  89 3E 0006				mov	word ptr data_5+1,di	; (020A:0006=3)
020A:672C  26: A1 2FD2				mov	ax,word ptr es:[2FD2h]	; (020A:2FD2=454Ch)
020A:6730  26					db	26h
020A:6731  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:6735  75 55				jne	$+57h			; Jump if not equal
020A:6737  26: A1 2FD4				mov	ax,word ptr es:[2FD4h]	; (020A:2FD4=3D53h)
020A:673B  26: 3B 06 216E			cmp	ax,word ptr es:[216Eh]	; (020A:216E=104h)
020A:6740  75 4A				jne	$+4Ch			; Jump if not equal
020A:6742  B8 FFFF				mov	ax,0FFFFh
020A:6745  8B 1D				mov	bx,[di]
020A:6747  26: 3B 1E 216C			cmp	bx,word ptr es:[216Ch]	; (020A:216C=2EFFh)
020A:674C  75 03				jne	$+5			; Jump if not equal
020A:674E  8B 45 02				mov	ax,[di+2]
020A:6751  8A 55 05				mov	dl,[di+5]
020A:6754  80 E2 0C				and	dl,0Ch
020A:6757  80 FA 00				cmp	dl,0
020A:675A  74 10				je	$+12h			; Jump if equal
020A:675C  80 FA 04				cmp	dl,4
020A:675F  74 27				je	$+29h			; Jump if equal
020A:6761  80 FA 08				cmp	dl,8
020A:6764  75 26				jne	$+28h			; Jump if not equal
020A:6766  26: A3 3DAD				mov	word ptr es:[3DADh],ax	; (020A:3DAD=8B3Eh)
020A:676A  EB 20				jmp	short $+22h
							                        ;* No entry point to code
020A:676C  26: A3 3DAB				mov	word ptr es:[3DABh],ax	; (020A:3DAB=80DBh)
020A:6770  8A 45 04				mov	al,[di+4]
020A:6773  26: A2 3DAF				mov	byte ptr es:[3DAFh],al	; (020A:3DAF=44h)
020A:6777  32 C0				xor	al,al			; Zero register
020A:6779  F6 45 05 0F				test	byte ptr [di+5],0Fh
020A:677D  74 03				jz	$+5			; Jump if zero
020A:677F  8A 45 09				mov	al,[di+9]
020A:6782  26: A2 3DB0				mov	byte ptr es:[3DB0h],al	; (020A:3DB0=1)
020A:6786  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:6788  26: A3 3DA9				mov	word ptr es:[3DA9h],ax	; (020A:3DA9=87C3h)
020A:678C  F8					clc				; Clear carry flag
020A:678D  1E					push	ds
020A:678E  8C C0				mov	ax,es
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 182

020A:6790  8E D8				mov	ds,ax
020A:6792  07					pop	es
020A:6793  8B CD				mov	cx,bp
020A:6795  5D					pop	bp
020A:6796  5E					pop	si
020A:6797  5B					pop	bx
020A:6798  58					pop	ax
020A:6799  C3					retn
							                        ;* No entry point to code
020A:679A  87 DB				xchg	bx,bx
020A:679C  8A 04				mov	al,[si]
020A:679E  A8 40				test	al,40h			; '@'
020A:67A0  74 18				jz	$+1Ah			; Jump if zero
020A:67A2  3C 40				cmp	al,40h			; '@'
020A:67A4  74 14				je	$+16h			; Jump if equal
020A:67A6  3C 5B				cmp	al,5Bh			; '['
020A:67A8  72 08				jb	$+0Ah			; Jump if below
020A:67AA  3C 7B				cmp	al,7Bh			; '{'
020A:67AC  73 0C				jae	$+0Eh			; Jump if above or =
020A:67AE  3C 60				cmp	al,60h			; '`'
020A:67B0  76 08				jbe	$+0Ah			; Jump if below or =
020A:67B2  24 DF				and	al,0DFh
020A:67B4  0A 06 230E				or	al,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:67B8  88 04				mov	[si],al
020A:67BA  46					inc	si
020A:67BB  E2 DF				loop	$-1Fh			; Loop if cx > 0

020A:67BD  C3					retn
							                        ;* No entry point to code
020A:67BE  87 DB				xchg	bx,bx
020A:67C0  C6 06 1CFE 00			mov	byte ptr ds:[1CFEh],0	; (020A:1CFE=0)
020A:67C5  BA 0002				mov	dx,2
020A:67C8  BB 3400				mov	bx,3400h
020A:67CB  E8 B8A2				call	$-475Bh
020A:67CE  C3					retn
							                        ;* No entry point to code
020A:67CF  90					nop
020A:67D0  BF 0008				mov	di,8
020A:67D3  BE 0000				mov	si,0
020A:67D6  E8 10BB				call	$+10BEh
020A:67D9  8B 04				mov	ax,[si]
020A:67DB  8B 5C 02				mov	bx,[si+2]
020A:67DE  8B 4C 04				mov	cx,[si+4]
020A:67E1  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (020A:0000=1828h)
020A:67E6  73 6B				jae	$+6Dh			; Jump if above or =
020A:67E8  26: F6 45 05 10			test	byte ptr es:[di+5],10h
020A:67ED  75 67				jnz	$+69h			; Jump if not zero
020A:67EF  26: F6 45 04 40			test	byte ptr es:[di+4],40h	; '@'
020A:67F4  74 60				jz	$+62h			; Jump if zero
020A:67F6  26: F6 45 07 80			test	byte ptr es:[di+7],80h
020A:67FB  75 59				jnz	$+5Bh			; Jump if not zero
020A:67FD  26: F6 45 07 40			test	byte ptr es:[di+7],40h	; '@'
020A:6802  75 4D				jnz	$+4Fh			; Jump if not zero
020A:6804  26: 3B 05				cmp	ax,es:[di]
020A:6807  72 4F				jb	$+51h			; Jump if below
020A:6809  77 46				ja	$+48h			; Jump if above
020A:680B  26: 3B 5D 02				cmp	bx,es:[di+2]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 183

020A:680F  77 40				ja	$+42h			; Jump if above
020A:6811  26: 3B 4D 02				cmp	cx,es:[di+2]
020A:6815  72 41				jb	$+43h			; Jump if below
020A:6817  1E					push	ds
020A:6818  E8 1085				call	$+1088h
020A:681B  F7 06 3D3C 0200			test	word ptr ds:[3D3Ch],200h	; (020A:3D3C=2477h)
020A:6821  1F					pop	ds
020A:6822  74 3F				jz	$+41h			; Jump if zero
020A:6824  8B 54 0A				mov	dx,[si+0Ah]
020A:6827  80 E2 03				and	dl,3
020A:682A  80 FA 02				cmp	dl,2
020A:682D  73 34				jae	$+36h			; Jump if above or =
020A:682F  26: 8A 55 04				mov	dl,es:[di+4]
020A:6833  F6 C2 80				test	dl,80h
020A:6836  74 2B				jz	$+2Dh			; Jump if zero
020A:6838  F6 C2 10				test	dl,10h
020A:683B  75 26				jnz	$+28h			; Jump if not zero
020A:683D  9A 1481:7CE0				call	far ptr $+14A3h
020A:6842  72 1F				jc	$+21h			; Jump if carry Set
020A:6844  26: 81 7D 02 0100			cmp	word ptr es:[di+2],100h
020A:684A  73 17				jae	$+19h			; Jump if above or =
020A:684C  26: 80 65 04 BF			and	byte ptr es:[di+4],0BFh
020A:6851  EB 3C				jmp	short $+3Eh
020A:6853  E9 0178				jmp	$+17Bh
020A:6856  EB 0B				jmp	short $+0Dh
							                        ;* No entry point to code
020A:6858  83 C6 19				add	si,19h
020A:685B  83 3C FF				cmp	word ptr [si],0FFFFh
020A:685E  74 2F				je	$+31h			; Jump if equal
020A:6860  E9 FF76				jmp	$-87h
							                        ;* No entry point to code
020A:6863  E8 102E				call	$+1031h
020A:6866  BB 2F9C				mov	bx,2F9Ch
020A:6869  26: 8A 45 05				mov	al,es:[di+5]
020A:686D  25 000F				and	ax,0Fh
020A:6870  1E					push	ds
020A:6871  E8 102C				call	$+102Fh
020A:6874  D7					xlat				; al=[al+[bx]] table
020A:6875  1F					pop	ds
020A:6876  0A C0				or	al,al			; Zero ?
020A:6878  75 04				jnz	$+6			; Jump if not zero
020A:687A  26: 8A 45 06				mov	al,es:[di+6]
020A:687E  03 F8				add	di,ax
020A:6880  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (020A:0000=1828h)
020A:6885  73 CC				jae	$-32h			; Jump if above or =
020A:6887  83 3C FF				cmp	word ptr [si],0FFFFh
020A:688A  74 03				je	$+5			; Jump if equal
020A:688C  E9 FF4A				jmp	$-0B3h
							                        ;* No entry point to code
020A:688F  E8 100E				call	$+1011h
020A:6892  26: F6 45 04 40			test	byte ptr es:[di+4],40h	; '@'
020A:6897  74 CA				jz	$-34h			; Jump if zero
020A:6899  26: F6 45 05 10			test	byte ptr es:[di+5],10h
020A:689E  75 C3				jnz	$-3Bh			; Jump if not zero
020A:68A0  26: 80 4D 07 40			or	byte ptr es:[di+7],40h	; '@'
020A:68A5  26: 80 4D 04 40			or	byte ptr es:[di+4],40h	; '@'
020A:68AA  26: 80 4D 05 40			or	byte ptr es:[di+5],40h	; '@'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 184

020A:68AF  26: F6 45 05 80			test	byte ptr es:[di+5],80h
020A:68B4  75 AD				jnz	$-51h			; Jump if not zero
020A:68B6  9A 1481:3840				call	far ptr $-3076h
020A:68BB  BD 19D0				mov	bp,19D0h
020A:68BE  80 3E 2313 01			cmp	byte ptr ds:[2313h],1	; (020A:2313=0)
020A:68C3  75 09				jne	$+0Bh			; Jump if not equal
020A:68C5  4D					dec	bp
020A:68C6  80 3E 2314 00			cmp	byte ptr ds:[2314h],0	; (020A:2314=0)
020A:68CB  74 08				je	$+0Ah			; Jump if equal
020A:68CD  4D					dec	bp
020A:68CE  3E: C6 46 00 3D			mov	byte ptr ds:[bp],3Dh	; '='
020A:68D3  45					inc	bp
020A:68D4  45					inc	bp
020A:68D5  26: 8B 45 02				mov	ax,es:[di+2]
020A:68D9  9A 1481:0294				call	far ptr $-6645h
020A:68DE  BD 19EB				mov	bp,19EBh
020A:68E1  B9 000A				mov	cx,0Ah
020A:68E4  9A 1481:34E0				call	far ptr $-3404h
020A:68E9  B1 00				mov	cl,0
020A:68EB  C6 06 1A0B 65			mov	byte ptr ds:[1A0Bh],65h	; (020A:1A0B=25h) 'e'
020A:68F0  C7 06 1A0C 7571			mov	word ptr ds:[1A0Ch],7571h	; (020A:1A0C=8A8h)
020A:68F6  80 3E 230E 00			cmp	byte ptr ds:[230Eh],0	; (020A:230E=0)
020A:68FB  75 0B				jne	$+0Dh			; Jump if not equal
020A:68FD  C6 06 1A0B 45			mov	byte ptr ds:[1A0Bh],45h	; (020A:1A0B=25h) 'E'
020A:6902  C7 06 1A0C 5551			mov	word ptr ds:[1A0Ch],5551h	; (020A:1A0C=8A8h)
020A:6908  BD 1A13				mov	bp,1A13h
020A:690B  26: 8B 45 02				mov	ax,es:[di+2]
020A:690F  9A 1481:02B4				call	far ptr $-665Bh
020A:6914  B7 00				mov	bh,0
020A:6916  26: 8A 45 04				mov	al,es:[di+4]
020A:691A  24 3F				and	al,3Fh			; '?'
020A:691C  3C 02				cmp	al,2
020A:691E  74 0B				je	$+0Dh			; Jump if equal
020A:6920  3C 00				cmp	al,0
020A:6922  75 09				jne	$+0Bh			; Jump if not equal
020A:6924  26: 83 7D 08 02			cmp	word ptr es:[di+8],2
020A:6929  75 02				jne	$+4			; Jump if not equal
020A:692B  B7 20				mov	bh,20h			; ' '
020A:692D  E8 00A0				call	$+0A3h
020A:6930  C6 06 1CFF 00			mov	byte ptr ds:[1CFFh],0	; (020A:1CFF=0)
020A:6935  F7 06 3D3E 0020			test	word ptr ds:[3D3Eh],20h	; (020A:3D3E=3E80h)
020A:693B  75 42				jnz	$+44h			; Jump if not zero
020A:693D  26: 8B 05				mov	ax,es:[di]
020A:6940  26: 8B 5D 02				mov	bx,es:[di+2]
020A:6944  3D A000				cmp	ax,0A000h
020A:6947  73 36				jae	$+38h			; Jump if above or =
020A:6949  0B C0				or	ax,ax			; Zero ?
020A:694B  75 08				jnz	$+0Ah			; Jump if not zero
020A:694D  81 FB 0500				cmp	bx,500h
020A:6951  76 2C				jbe	$+2Eh			; Jump if below or =
020A:6953  EB 24				jmp	short $+26h
							                        ;* No entry point to code
020A:6955  3D 0040				cmp	ax,40h
020A:6958  75 08				jne	$+0Ah			; Jump if not equal
020A:695A  81 FB 0100				cmp	bx,100h
020A:695E  76 1F				jbe	$+21h			; Jump if below or =
020A:6960  EB 17				jmp	short $+19h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 185

							                        ;* No entry point to code
020A:6962  3D 0050				cmp	ax,50h
020A:6965  75 06				jne	$+8			; Jump if not equal
020A:6967  0B DB				or	bx,bx			; Zero ?
020A:6969  74 14				jz	$+16h			; Jump if zero
020A:696B  EB 0C				jmp	short $+0Eh
							                        ;* No entry point to code
020A:696D  81 FB 00FF				cmp	bx,0FFh
020A:6971  77 06				ja	$+8			; Jump if above
020A:6973  3B 06 1CEA				cmp	ax,word ptr ds:[1CEAh]	; (020A:1CEA=0)
020A:6977  74 06				je	$+8			; Jump if equal
020A:6979  C7 06 1A5B 2A3B			mov	word ptr ds:[1A5Bh],2A3Bh	; (020A:1A5B=8B04h)
020A:697F  80 3E 4708 01			cmp	byte ptr ds:[4708h],1	; (020A:4708=56h)
020A:6984  74 0C				je	$+0Eh			; Jump if equal
020A:6986  C6 06 4708 01			mov	byte ptr ds:[4708h],1	; (020A:4708=56h)
020A:698B  B0 58				mov	al,58h			; 'X'
020A:698D  9A 1481:2790				call	far ptr $-41FDh
020A:6992  BA 19CB				mov	dx,19CBh
020A:6995  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:699A  06					push	es
020A:699B  9A 1481:284C				call	far ptr $-414Fh
020A:69A0  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:69A5  9C					pushf				; Push flags
020A:69A6  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:69AB  5A					pop	dx
020A:69AC  8E C2				mov	es,dx
020A:69AE  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:69B3  5A					pop	dx
020A:69B4  75 0A				jnz	$+0Ch			; Jump if not zero
020A:69B6  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:69BB  74 03				je	$+5			; Jump if equal
020A:69BD  E8 13C0				call	$+13C3h
020A:69C0  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:69C5  9D					popf				; Pop flags
020A:69C6  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:69CB  E9 FE95				jmp	$-168h
							                        ;* No entry point to code
020A:69CE  C3					retn
							                        ;* No entry point to code
020A:69CF  90					nop
020A:69D0  51					push	cx
020A:69D1  52					push	dx
020A:69D2  57					push	di
020A:69D3  06					push	es
020A:69D4  55					push	bp
020A:69D5  80 3E 1CFF 01			cmp	byte ptr ds:[1CFFh],1	; (020A:1CFF=0)
020A:69DA  74 26				je	$+28h			; Jump if equal
020A:69DC  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:69E1  75 0A				jne	$+0Ch			; Jump if not equal
020A:69E3  26: 8A 45 04				mov	al,es:[di+4]
020A:69E7  24 3F				and	al,3Fh			; '?'
020A:69E9  3C 20				cmp	al,20h			; ' '
020A:69EB  75 15				jne	$+17h			; Jump if not equal
020A:69ED  F6 06 1718 01			test	byte ptr ds:[1718h],1	; (020A:1718=0)
020A:69F2  74 0E				jz	$+10h			; Jump if zero
020A:69F4  80 3E 1719 01			cmp	byte ptr ds:[1719h],1	; (020A:1719=0)
020A:69F9  74 07				je	$+9			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 186

020A:69FB  80 3E 3C29 01			cmp	byte ptr ds:[3C29h],1	; (020A:3C29=1)
020A:6A00  75 03				jne	$+5			; Jump if not equal
020A:6A02  E9 0253				jmp	$+256h
							                        ;* No entry point to code
020A:6A05  FE 06 1CFF				inc	byte ptr ds:[1CFFh]	; (020A:1CFF=0)
020A:6A09  E8 0258				call	$+25Bh
020A:6A0C  32 C9				xor	cl,cl			; Zero register
020A:6A0E  B0 28				mov	al,28h			; '('
020A:6A10  80 3E 1CFE 00			cmp	byte ptr ds:[1CFEh],0	; (020A:1CFE=0)
020A:6A15  74 02				je	$+4			; Jump if equal
020A:6A17  B0 5B				mov	al,5Bh			; '['
020A:6A19  3E: 88 46 00				mov	ds:[bp],al
020A:6A1D  45					inc	bp
020A:6A1E  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:6A23  75 03				jne	$+5			; Jump if not equal
020A:6A25  E9 0144				jmp	$+147h
							                        ;* No entry point to code
020A:6A28  53					push	bx
020A:6A29  8C C8				mov	ax,cs
020A:6A2B  26: 3B 05				cmp	ax,es:[di]
020A:6A2E  75 0A				jne	$+0Ch			; Jump if not equal
020A:6A30  3E: C7 46 00 7373			mov	word ptr ds:[bp],7373h
020A:6A36  45					inc	bp
020A:6A37  45					inc	bp
020A:6A38  EB 68				jmp	short $+6Ah
							                        ;* No entry point to code
020A:6A3A  26: 8B 05				mov	ax,es:[di]
020A:6A3D  25 FFF0				and	ax,0FFF0h
020A:6A40  3D FBA0				cmp	ax,0FBA0h
020A:6A43  75 22				jne	$+24h			; Jump if not equal
020A:6A45  FE C1				inc	cl
020A:6A47  3E: C7 46 00 3F3F			mov	word ptr ds:[bp],3F3Fh
020A:6A4D  45					inc	bp
020A:6A4E  45					inc	bp
020A:6A4F  26: 8B 05				mov	ax,es:[di]
020A:6A52  24 0F				and	al,0Fh
020A:6A54  3C 0F				cmp	al,0Fh
020A:6A56  74 0D				je	$+0Fh			; Jump if equal
020A:6A58  04 30				add	al,30h			; '0'
020A:6A5A  3C 39				cmp	al,39h			; '9'
020A:6A5C  76 02				jbe	$+4			; Jump if below or =
020A:6A5E  04 07				add	al,7
020A:6A60  3E: 88 46 00				mov	ds:[bp],al
020A:6A64  45					inc	bp
020A:6A65  EB 3B				jmp	short $+3Dh
							                        ;* No entry point to code
020A:6A67  9A 1481:7CE0				call	far ptr $+1279h
020A:6A6C  72 10				jc	$+12h			; Jump if carry Set
020A:6A6E  80 3E 1657 02			cmp	byte ptr ds:[1657h],2	; (020A:1657=0)
020A:6A73  72 09				jb	$+0Bh			; Jump if below
020A:6A75  26: F6 45 04 40			test	byte ptr es:[di+4],40h	; '@'
020A:6A7A  74 02				jz	$+4			; Jump if zero
020A:6A7C  EB 51				jmp	short $+53h
							                        ;* No entry point to code
020A:6A7E  26: 8B 05				mov	ax,es:[di]
020A:6A81  F7 06 1F86 8000			test	word ptr ds:[1F86h],8000h	; (020A:1F86=0)
020A:6A87  74 07				jz	$+9			; Jump if zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 187

020A:6A89  9A 1481:0168				call	far ptr $-6921h
020A:6A8E  EB 36				jmp	short $+38h
							                        ;* No entry point to code
020A:6A90  83 3E 2178 FF			cmp	word ptr ds:[2178h],0FFFFh	; (020A:2178=82Eh)
020A:6A95  74 04				je	$+6			; Jump if equal
020A:6A97  2B 06 2178				sub	ax,word ptr ds:[2178h]	; (020A:2178=82Eh)
020A:6A9B  9A 1481:0168				call	far ptr $-6933h
020A:6AA0  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:6AA2  3E: C6 46 00 3A			mov	byte ptr ds:[bp],3Ah	; ':'
020A:6AA7  45					inc	bp
020A:6AA8  83 3E 2178 FF			cmp	word ptr ds:[2178h],0FFFFh	; (020A:2178=82Eh)
020A:6AAD  74 17				je	$+19h			; Jump if equal
020A:6AAF  A1 2178				mov	ax,word ptr ds:[2178h]	; (020A:2178=82Eh)
020A:6AB2  0B C0				or	ax,ax			; Zero ?
020A:6AB4  74 10				jz	$+12h			; Jump if zero
020A:6AB6  51					push	cx
020A:6AB7  B1 0C				mov	cl,0Ch
020A:6AB9  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:6ABB  59					pop	cx
020A:6ABC  9A 1481:0100				call	far ptr $-69BCh
020A:6AC1  3E: 88 7E 00				mov	ds:[bp],bh
020A:6AC5  45					inc	bp
020A:6AC6  26: 8B 45 02				mov	ax,es:[di+2]
020A:6ACA  9A 1481:0294				call	far ptr $-6836h
020A:6ACF  5B					pop	bx
020A:6AD0  0A C9				or	cl,cl			; Zero ?
020A:6AD2  75 0C				jnz	$+0Eh			; Jump if not zero
020A:6AD4  F6 C7 30				test	bh,30h			; '0'
020A:6AD7  74 0A				jz	$+0Ch			; Jump if zero
020A:6AD9  26: 83 7D 02 FF			cmp	word ptr es:[di+2],0FFFFh
020A:6ADE  75 03				jne	$+5			; Jump if not equal
020A:6AE0  E9 0165				jmp	$+168h
							                        ;* No entry point to code
020A:6AE3  3E: C6 46 00 3D			mov	byte ptr ds:[bp],3Dh	; '='
020A:6AE8  45					inc	bp
020A:6AE9  06					push	es
020A:6AEA  26: 8E 05				mov	es,es:[di]
020A:6AED  9A 1481:8950				call	far ptr $+1E63h
020A:6AF2  07					pop	es
020A:6AF3  73 09				jnc	$+0Bh			; Jump if carry=0
020A:6AF5  3E: C6 46 00 30			mov	byte ptr ds:[bp],30h	; '0'
020A:6AFA  45					inc	bp
020A:6AFB  E9 014A				jmp	$+14Dh
							                        ;* No entry point to code
020A:6AFE  F6 C7 30				test	bh,30h			; '0'
020A:6B01  74 53				jz	$+55h			; Jump if zero
020A:6B03  F6 C7 20				test	bh,20h			; ' '
020A:6B06  74 30				jz	$+32h			; Jump if zero
020A:6B08  F6 06 2320 02			test	byte ptr ds:[2320h],2	; (020A:2320=0)
020A:6B0D  74 29				jz	$+2Bh			; Jump if zero
020A:6B0F  26: 83 7D 02 FC			cmp	word ptr es:[di+2],0FFFCh
020A:6B14  77 1F				ja	$+21h			; Jump if above
020A:6B16  26: 8B 5D 02				mov	bx,es:[di+2]
020A:6B1A  26: 8E 05				mov	es,es:[di]
020A:6B1D  8B FB				mov	di,bx
020A:6B1F  9A 1481:8834				call	far ptr $+1D15h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 188

020A:6B24  9A 1481:8934				call	far ptr $+1E10h
020A:6B29  26: 8B 45 02				mov	ax,es:[di+2]
020A:6B2D  26: 8B 1D				mov	bx,es:[di]
020A:6B30  9A 1481:0414				call	far ptr $-671Ch
020A:6B35  E9 0110				jmp	$+113h
							                        ;* No entry point to code
020A:6B38  26: 8B 5D 02				mov	bx,es:[di+2]
020A:6B3C  26: 8E 05				mov	es,es:[di]
020A:6B3F  8B FB				mov	di,bx
020A:6B41  9A 1481:8834				call	far ptr $+1CF3h
020A:6B46  9A 1481:8934				call	far ptr $+1DEEh
020A:6B4B  26: 8B 05				mov	ax,es:[di]
020A:6B4E  9A 1481:02B4				call	far ptr $-689Ah
020A:6B53  E9 00F2				jmp	$+0F5h
							                        ;* No entry point to code
020A:6B56  26: 8B 5D 02				mov	bx,es:[di+2]
020A:6B5A  26: 8A 45 04				mov	al,es:[di+4]
020A:6B5E  24 3F				and	al,3Fh			; '?'
020A:6B60  3C 20				cmp	al,20h			; ' '
020A:6B62  74 03				je	$+5			; Jump if equal
020A:6B64  E9 00CF				jmp	$+0D2h
							                        ;* No entry point to code
020A:6B67  BA 0010				mov	dx,10h
020A:6B6A  EB 07				jmp	short $+9
							                        ;* No entry point to code
020A:6B6C  26: 8B 5D 02				mov	bx,es:[di+2]
020A:6B70  BA 0018				mov	dx,18h
020A:6B73  26: 8B 4D 08				mov	cx,es:[di+8]
020A:6B77  3B CA				cmp	cx,dx
020A:6B79  72 02				jb	$+4			; Jump if below
020A:6B7B  8B CA				mov	cx,dx
020A:6B7D  3E: C6 46 00 27			mov	byte ptr ds:[bp],27h	; '''
020A:6B82  45					inc	bp
020A:6B83  26: 8E 05				mov	es,es:[di]
020A:6B86  8B FB				mov	di,bx
020A:6B88  9A 1481:8834				call	far ptr $+1CACh
020A:6B8D  BB 428A				mov	bx,428Ah
020A:6B90  32 F6				xor	dh,dh			; Zero register
020A:6B92  83 F9 01				cmp	cx,1
020A:6B95  74 1A				je	$+1Ch			; Jump if equal
020A:6B97  80 3E 424C 02			cmp	byte ptr ds:[424Ch],2	; (020A:424C=8Ah)
020A:6B9C  75 13				jne	$+15h			; Jump if not equal
020A:6B9E  F7 06 3D3C 0002			test	word ptr ds:[3D3Ch],2	; (020A:3D3C=2477h)
020A:6BA4  74 0B				jz	$+0Dh			; Jump if zero
020A:6BA6  FE C6				inc	dh
020A:6BA8  26: 80 7D 01 00			cmp	byte ptr es:[di+1],0
020A:6BAD  75 02				jne	$+4			; Jump if not equal
020A:6BAF  FE C6				inc	dh
020A:6BB1  83 F9 01				cmp	cx,1
020A:6BB4  76 41				jbe	$+43h			; Jump if below or =
020A:6BB6  80 3E 424C 01			cmp	byte ptr ds:[424Ch],1	; (020A:424C=8Ah)
020A:6BBB  75 2A				jne	$+2Ch			; Jump if not equal
020A:6BBD  F7 06 3D3C 0002			test	word ptr ds:[3D3Ch],2	; (020A:3D3C=2477h)
020A:6BC3  74 32				jz	$+34h			; Jump if zero
020A:6BC5  26: 8B 05				mov	ax,es:[di]
020A:6BC8  3C 00				cmp	al,0
020A:6BCA  74 62				je	$+64h			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 189

020A:6BCC  50					push	ax
020A:6BCD  86 E0				xchg	ah,al
020A:6BCF  9A 1481:4F98				call	far ptr $-1C37h
020A:6BD4  3D 0001				cmp	ax,1
020A:6BD7  58					pop	ax
020A:6BD8  72 54				jc	$+56h			; Jump if carry Set
020A:6BDA  74 1E				jz	$+20h			; Jump if zero
020A:6BDC  3E: 88 46 00				mov	ds:[bp],al
020A:6BE0  45					inc	bp
020A:6BE1  47					inc	di
020A:6BE2  49					dec	cx
020A:6BE3  8A C4				mov	al,ah
020A:6BE5  EB 37				jmp	short $+39h
							                        ;* No entry point to code
020A:6BE7  F6 C6 02				test	dh,2
020A:6BEA  74 0B				jz	$+0Dh			; Jump if zero
020A:6BEC  26: 8B 05				mov	ax,es:[di]
020A:6BEF  3D 0000				cmp	ax,0
020A:6BF2  74 3A				je	$+3Ch			; Jump if equal
020A:6BF4  47					inc	di
020A:6BF5  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:6BF7  26: 8A 05				mov	al,es:[di]
020A:6BFA  0A C0				or	al,al			; Zero ?
020A:6BFC  74 30				jz	$+32h			; Jump if zero
020A:6BFE  3C 0D				cmp	al,0Dh
020A:6C00  74 2C				je	$+2Eh			; Jump if equal
020A:6C02  3C 0A				cmp	al,0Ah
020A:6C04  74 28				je	$+2Ah			; Jump if equal
020A:6C06  80 3E 424C 01			cmp	byte ptr ds:[424Ch],1	; (020A:424C=8Ah)
020A:6C0B  74 04				je	$+6			; Jump if equal
020A:6C0D  3C 7E				cmp	al,7Eh			; '~'
020A:6C0F  73 11				jae	$+13h			; Jump if above or =
020A:6C11  3C 20				cmp	al,20h			; ' '
020A:6C13  72 0D				jb	$+0Fh			; Jump if below
020A:6C15  83 F9 01				cmp	cx,1
020A:6C18  77 04				ja	$+6			; Jump if above
020A:6C1A  3C 24				cmp	al,24h			; '$'
020A:6C1C  74 10				je	$+12h			; Jump if equal
020A:6C1E  3E: 88 46 00				mov	ds:[bp],al
020A:6C22  83 FF FE				cmp	di,0FFFEh
020A:6C25  73 07				jae	$+9			; Jump if above or =
020A:6C27  47					inc	di
020A:6C28  45					inc	bp
020A:6C29  49					dec	cx
020A:6C2A  E3 02				jcxz	$+4			; Jump if cx=0
020A:6C2C  EB 83				jmp	short $-7Bh
							                        ;* No entry point to code
020A:6C2E  3E: C6 46 00 27			mov	byte ptr ds:[bp],27h	; '''
020A:6C33  45					inc	bp
020A:6C34  EB 12				jmp	short $+14h
							                        ;* No entry point to code
020A:6C36  26: 8E 05				mov	es,es:[di]
020A:6C39  8B FB				mov	di,bx
020A:6C3B  9A 1481:8834				call	far ptr $+1BF9h
020A:6C40  26: 8A 05				mov	al,es:[di]
020A:6C43  9A 1481:0134				call	far ptr $-6B0Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 190

020A:6C48  B0 29				mov	al,29h			; ')'
020A:6C4A  80 3E 1CFE 00			cmp	byte ptr ds:[1CFEh],0	; (020A:1CFE=0)
020A:6C4F  74 02				je	$+4			; Jump if equal
020A:6C51  B0 5D				mov	al,5Dh			; ']'
020A:6C53  3E: 88 46 00				mov	ds:[bp],al
020A:6C57  45					inc	bp
020A:6C58  5D					pop	bp
020A:6C59  07					pop	es
020A:6C5A  5F					pop	di
020A:6C5B  5A					pop	dx
020A:6C5C  59					pop	cx
020A:6C5D  C6 06 1CFE 00			mov	byte ptr ds:[1CFEh],0	; (020A:1CFE=0)
020A:6C62  C3					retn
							                        ;* No entry point to code
020A:6C63  90					nop
020A:6C64  50					push	ax
020A:6C65  51					push	cx
020A:6C66  57					push	di
020A:6C67  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:6C6C  06					push	es
020A:6C6D  E8 0C4E				call	$+0C51h
020A:6C70  32 E4				xor	ah,ah			; Zero register
020A:6C72  BF 1A7F				mov	di,1A7Fh
020A:6C75  B9 0026				mov	cx,26h
020A:6C78  B0 3B				mov	al,3Bh			; ';'
020A:6C7A  FD					std				; Set direction flag
020A:6C7B  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:6C7D  0B C9				or	cx,cx			; Zero ?
020A:6C7F  75 02				jnz	$+4			; Jump if not zero
020A:6C81  FE C4				inc	ah
020A:6C83  BF 1A7F				mov	di,1A7Fh
020A:6C86  B9 0026				mov	cx,26h
020A:6C89  B0 20				mov	al,20h			; ' '
020A:6C8B  FD					std				; Set direction flag
020A:6C8C  F3/ AE				repe	scasb			; Rep zf=1+cx >0 Scan es:[di] for al
020A:6C8E  47					inc	di
020A:6C8F  47					inc	di
020A:6C90  0A E4				or	ah,ah			; Zero ?
020A:6C92  74 04				jz	$+6			; Jump if zero
020A:6C94  C6 05 3B				mov	byte ptr [di],3Bh	; ';'
020A:6C97  47					inc	di
020A:6C98  47					inc	di
020A:6C99  FC					cld				; Clear direction
020A:6C9A  8B EF				mov	bp,di
020A:6C9C  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:6CA1  9C					pushf				; Push flags
020A:6CA2  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:6CA7  5A					pop	dx
020A:6CA8  8E C2				mov	es,dx
020A:6CAA  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:6CAF  5A					pop	dx
020A:6CB0  75 0A				jnz	$+0Ch			; Jump if not zero
020A:6CB2  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:6CB7  74 03				je	$+5			; Jump if equal
020A:6CB9  E8 10C4				call	$+10C7h
020A:6CBC  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:6CC1  9D					popf				; Pop flags
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 191

020A:6CC2  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:6CC7  5F					pop	di
020A:6CC8  59					pop	cx
020A:6CC9  58					pop	ax
020A:6CCA  C3					retn
							                        ;* No entry point to code
020A:6CCB  90					nop
020A:6CCC  80 3E 17A7 06			cmp	byte ptr ds:[17A7h],6	; (020A:17A7=0)
020A:6CD1  73 02				jae	$+4			; Jump if above or =
020A:6CD3  EB 19				jmp	short $+1Bh
							                        ;* No entry point to code
020A:6CD5  80 3E 17A2 04			cmp	byte ptr ds:[17A2h],4	; (020A:17A2=0)
020A:6CDA  76 12				jbe	$+14h			; Jump if below or =
020A:6CDC  F6 06 17A2 01			test	byte ptr ds:[17A2h],1	; (020A:17A2=0)
020A:6CE1  75 02				jnz	$+4			; Jump if not zero
020A:6CE3  EB 09				jmp	short $+0Bh
							                        ;* No entry point to code
020A:6CE5  BA 0007				mov	dx,7
020A:6CE8  BB 3920				mov	bx,3920h
020A:6CEB  E8 B382				call	$-4C7Bh
020A:6CEE  C3					retn
							                        ;* No entry point to code
020A:6CEF  90					nop
020A:6CF0  50					push	ax
020A:6CF1  53					push	bx
020A:6CF2  51					push	cx
020A:6CF3  52					push	dx
020A:6CF4  56					push	si
020A:6CF5  57					push	di
020A:6CF6  55					push	bp
020A:6CF7  BF 0008				mov	di,8
020A:6CFA  26: 39 3E 0000			cmp	word ptr es:[0],di	; (020A:0000=1828h)
020A:6CFF  76 45				jbe	$+47h			; Jump if below or =
020A:6D01  26: F6 45 04 40			test	byte ptr es:[di+4],40h	; '@'
020A:6D06  75 27				jnz	$+29h			; Jump if not zero
020A:6D08  26: 8A 65 05				mov	ah,es:[di+5]
020A:6D0C  80 E4 0C				and	ah,0Ch
020A:6D0F  80 FC 04				cmp	ah,4
020A:6D12  75 0E				jne	$+10h			; Jump if not equal
020A:6D14  26: F6 45 05 10			test	byte ptr es:[di+5],10h
020A:6D19  75 14				jnz	$+16h			; Jump if not zero
020A:6D1B  26: F6 45 04 20			test	byte ptr es:[di+4],20h	; ' '
020A:6D20  75 0D				jnz	$+0Fh			; Jump if not zero
020A:6D22  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020A:6D26  74 07				je	$+9			; Jump if equal
020A:6D28  8B F7				mov	si,di
020A:6D2A  E8 1C83				call	$+1C86h
020A:6D2D  EB CB				jmp	short $-33h
							                        ;* No entry point to code
020A:6D2F  BB 2F9C				mov	bx,2F9Ch
020A:6D32  26: 8A 45 05				mov	al,es:[di+5]
020A:6D36  25 000F				and	ax,0Fh
020A:6D39  D7					xlat				; al=[al+[bx]] table
020A:6D3A  0A C0				or	al,al			; Zero ?
020A:6D3C  75 04				jnz	$+6			; Jump if not zero
020A:6D3E  26: 8A 45 06				mov	al,es:[di+6]
020A:6D42  03 F8				add	di,ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 192

020A:6D44  EB B4				jmp	short $-4Ah
							                        ;* No entry point to code
020A:6D46  5D					pop	bp
020A:6D47  5F					pop	di
020A:6D48  5E					pop	si
020A:6D49  5A					pop	dx
020A:6D4A  59					pop	cx
020A:6D4B  5B					pop	bx
020A:6D4C  58					pop	ax
020A:6D4D  C3					retn
							                        ;* No entry point to code
020A:6D4E  87 DB				xchg	bx,bx
020A:6D50  50					push	ax
020A:6D51  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:6D56  06					push	es
020A:6D57  E8 0B58				call	$+0B5Bh
020A:6D5A  C6 06 1F82 01			mov	byte ptr ds:[1F82h],1	; (020A:1F82=0)
020A:6D5F  26: A1 0000				mov	ax,word ptr es:[0]	; (020A:0000=1828h)
020A:6D63  3D 0000				cmp	ax,0
020A:6D66  75 08				jne	$+0Ah			; Jump if not equal
020A:6D68  26: 83 3E 0004 00			cmp	word ptr es:[4],0	; (020A:0004=808h)
020A:6D6E  74 18				je	$+1Ah			; Jump if equal
020A:6D70  26: 83 3E 0002 FF			cmp	word ptr es:[2],0FFFFh	; (020A:0002=10h)
020A:6D76  74 10				je	$+12h			; Jump if equal
020A:6D78  26: A1 0002				mov	ax,word ptr es:[2]	; (020A:0002=10h)
020A:6D7C  26: 3B 06 0004			cmp	ax,word ptr es:[4]	; (020A:0004=808h)
020A:6D81  73 05				jae	$+7			; Jump if above or =
020A:6D83  C6 06 1F82 00			mov	byte ptr ds:[1F82h],0	; (020A:1F82=0)
020A:6D88  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:6D8D  9C					pushf				; Push flags
020A:6D8E  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:6D93  5A					pop	dx
020A:6D94  8E C2				mov	es,dx
020A:6D96  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:6D9B  5A					pop	dx
020A:6D9C  75 0A				jnz	$+0Ch			; Jump if not zero
020A:6D9E  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:6DA3  74 03				je	$+5			; Jump if equal
020A:6DA5  E8 0FD8				call	$+0FDBh
020A:6DA8  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:6DAD  9D					popf				; Pop flags
020A:6DAE  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:6DB3  58					pop	ax
020A:6DB4  C3					retn
020A:6DB5  87 DB				xchg	bx,bx
020A:6DB7  90					nop
020A:6DB8  E8 0B12				call	$+0B15h
020A:6DBB  BF 13F0				mov	di,13F0h
020A:6DBE  BE 1978				mov	si,1978h
020A:6DC1  8B 04				mov	ax,[si]
020A:6DC3  0B C0				or	ax,ax			; Zero ?
020A:6DC5  75 13				jnz	$+15h			; Jump if not zero
020A:6DC7  80 3E 218A 01			cmp	byte ptr ds:[218Ah],1	; (020A:218A=1Eh)
020A:6DCC  74 0C				je	$+0Eh			; Jump if equal
020A:6DCE  83 3E 216E FC			cmp	word ptr ds:[216Eh],0FFFCh	; (020A:216E=104h)
020A:6DD3  73 05				jae	$+7			; Jump if above or =
020A:6DD5  39 44 02				cmp	[si+2],ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 193

020A:6DD8  74 26				je	$+28h			; Jump if equal
020A:6DDA  24 F8				and	al,0F8h
020A:6DDC  D0 E8				shr	al,1			; Shift w/zeros fill
020A:6DDE  D0 E8				shr	al,1			; Shift w/zeros fill
020A:6DE0  32 E4				xor	ah,ah			; Zero register
020A:6DE2  03 F8				add	di,ax
020A:6DE4  26: 8B 3D				mov	di,es:[di]
020A:6DE7  8B 04				mov	ax,[si]
020A:6DE9  26: 3A 05				cmp	al,es:[di]
020A:6DEC  74 15				je	$+17h			; Jump if equal
020A:6DEE  72 10				jc	$+12h			; Jump if carry Set
020A:6DF0  50					push	ax
020A:6DF1  B8 1446				mov	ax,1446h
020A:6DF4  2D 1430				sub	ax,1430h
020A:6DF7  03 F8				add	di,ax
020A:6DF9  58					pop	ax
020A:6DFA  26: 83 3D 00				cmp	word ptr es:[di],0
020A:6DFE  75 E9				jne	$-15h			; Jump if not equal
020A:6E00  F8					clc				; Clear carry flag
020A:6E01  EB 01				jmp	short $+3
020A:6E03  F9					stc				; Set carry flag
020A:6E04  C3					retn
020A:6E05  87 DB				xchg	bx,bx
020A:6E07  90					nop
020A:6E08  50					push	ax
020A:6E09  51					push	cx
020A:6E0A  56					push	si
020A:6E0B  B9 1446				mov	cx,1446h
020A:6E0E  81 E9 1430				sub	cx,1430h
020A:6E12  BE 19A0				mov	si,19A0h
020A:6E15  26: 8A 05				mov	al,es:[di]
020A:6E18  88 04				mov	[si],al
020A:6E1A  47					inc	di
020A:6E1B  46					inc	si
020A:6E1C  E2 F7				loop	$-7			; Loop if cx > 0

020A:6E1E  BF 19A0				mov	di,19A0h
020A:6E21  E8 0A9A				call	$+0A9Dh
020A:6E24  5E					pop	si
020A:6E25  59					pop	cx
020A:6E26  58					pop	ax
020A:6E27  C3					retn
020A:6E28  00 87 90DB				add	byte ptr ds:[90DBh][bx],al	; (020A:90DB=8Bh)
020A:6E2C  06					push	es
020A:6E2D  57					push	di
020A:6E2E  C6 06 4714 00			mov	byte ptr ds:[4714h],0	; (020A:4714=0E8h)
020A:6E33  2E: C4 3E 3ACE			les	di,dword ptr cs:[3ACEh]	; (020A:3ACE=6104h) Load seg:offset pt
020A:6E38  C7 06 1D30 0000			mov	word ptr ds:[1D30h],0	; (020A:1D30=0)
020A:6E3E  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020A:6E42  75 09				jne	$+0Bh			; Jump if not equal
020A:6E44  26: 83 7D 02 FF			cmp	word ptr es:[di+2],0FFFFh
020A:6E49  75 02				jne	$+4			; Jump if not equal
020A:6E4B  EB 46				jmp	short $+48h
020A:6E4D  26: F6 45 0E 20			test	byte ptr es:[di+0Eh],20h	; ' '
020A:6E52  75 08				jnz	$+0Ah			; Jump if not zero
020A:6E54  C7 06 1D30 0000			mov	word ptr ds:[1D30h],0	; (020A:1D30=0)
020A:6E5A  EB 06				jmp	short $+8
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 194

020A:6E5C  81 06 1D30 1000			add	word ptr ds:[1D30h],1000h	; (020A:1D30=0)
020A:6E62  26: 39 1D				cmp	es:[di],bx
020A:6E65  75 27				jne	$+29h			; Jump if not equal
020A:6E67  2E: 80 3E 3A58 01			cmp	byte ptr cs:[3A58h],1	; (020A:3A58=25h)
020A:6E6D  74 0C				je	$+0Eh			; Jump if equal
020A:6E6F  26: 3B 45 04				cmp	ax,es:[di+4]
020A:6E73  77 19				ja	$+1Bh			; Jump if above
020A:6E75  26: 3B 45 02				cmp	ax,es:[di+2]
020A:6E79  72 13				jb	$+15h			; Jump if below
020A:6E7B  26: 8B 05				mov	ax,es:[di]
020A:6E7E  26: 3B 45 15				cmp	ax,es:[di+15h]
020A:6E82  74 04				je	$+6			; Jump if equal
020A:6E84  FE 06 4714				inc	byte ptr ds:[4714h]	; (020A:4714=0E8h)
020A:6E88  26: 8B 45 0C				mov	ax,es:[di+0Ch]
020A:6E8C  EB 0D				jmp	short $+0Fh
020A:6E8E  83 C7 19				add	di,19h
020A:6E91  EB AB				jmp	short $-53h
020A:6E93  C7 06 1D30 0000			mov	word ptr ds:[1D30h],0	; (020A:1D30=0)
020A:6E99  33 C0				xor	ax,ax			; Zero register
020A:6E9B  5F					pop	di
020A:6E9C  07					pop	es
020A:6E9D  C3					retn
020A:6E9E  00 00				add	[bx+si],al
020A:6EA0  08 28				or	[bx+si],ch
020A:6EA2  00					db	0
020A:6EA3  00					db	0
020A:6EA4  00					db	0
020A:6EA5  00					db	0
020A:6EA6  00					db	0
020A:6EA7  00					db	0
020A:6EA8  00					db	0
020A:6EA9  00					db	0
020A:6EAA  00					db	0
020A:6EAB  00					db	0
020A:6EAC  00					db	0
020A:6EAD  00 00				add	[bx+si],al
020A:6EAF  00 E8				add	al,ch
020A:6EB1  0B 0A				or	cx,[bp+si]
020A:6EB3  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:6EB8  75 03				jne	$+5			; Jump if not equal
020A:6EBA  E9 0084				jmp	$+87h
							                        ;* No entry point to code
020A:6EBD  BE 1F15				mov	si,1F15h
020A:6EC0  BF 08C9				mov	di,8C9h
020A:6EC3  B9 0060				mov	cx,60h
020A:6EC6  33 DB				xor	bx,bx			; Zero register
020A:6EC8  FC					cld				; Clear direction
020A:6EC9  80 3C 00				cmp	byte ptr [si],0
020A:6ECC  74 04				je	$+6			; Jump if equal
020A:6ECE  43					inc	bx
020A:6ECF  A4					movsb				; Mov [si] to es:[di]
020A:6ED0  E2 F7				loop	$-7			; Loop if cx > 0

020A:6ED2  83 3E 1F7C 00			cmp	word ptr ds:[1F7Ch],0	; (020A:1F7C=0)
020A:6ED7  74 56				je	$+58h			; Jump if equal
020A:6ED9  32 E4				xor	ah,ah			; Zero register
020A:6EDB  A0 0906				mov	al,byte ptr ds:[906h]	; (020A:0906=3Ch)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 195

020A:6EDE  2B C3				sub	ax,bx
020A:6EE0  2D 0002				sub	ax,2
020A:6EE3  2B C3				sub	ax,bx
020A:6EE5  7C 48				jl	$+4Ah			; Jump if <
020A:6EE7  B0 2C				mov	al,2Ch			; ','
020A:6EE9  AA					stosb				; Store al to es:[di]
020A:6EEA  B0 20				mov	al,20h			; ' '
020A:6EEC  AA					stosb				; Store al to es:[di]
020A:6EED  8B CB				mov	cx,bx
020A:6EEF  83 E9 03				sub	cx,3
020A:6EF2  BE 1F15				mov	si,1F15h
020A:6EF5  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6EF7  BE 1F76				mov	si,1F76h
020A:6EFA  B9 0003				mov	cx,3
020A:6EFD  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6EFF  F7 06 3D41 0040			test	word ptr ds:[3D41h],40h	; (020A:3D41=23h)
020A:6F05  74 28				jz	$+2Ah			; Jump if zero
020A:6F07  32 E4				xor	ah,ah			; Zero register
020A:6F09  A0 0906				mov	al,byte ptr ds:[906h]	; (020A:0906=3Ch)
020A:6F0C  2B C3				sub	ax,bx
020A:6F0E  2D 0002				sub	ax,2
020A:6F11  2B C3				sub	ax,bx
020A:6F13  2B C3				sub	ax,bx
020A:6F15  7C 18				jl	$+1Ah			; Jump if <
020A:6F17  B0 2C				mov	al,2Ch			; ','
020A:6F19  AA					stosb				; Store al to es:[di]
020A:6F1A  B0 20				mov	al,20h			; ' '
020A:6F1C  AA					stosb				; Store al to es:[di]
020A:6F1D  8B CB				mov	cx,bx
020A:6F1F  83 E9 03				sub	cx,3
020A:6F22  BE 1F15				mov	si,1F15h
020A:6F25  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6F27  BE 1F79				mov	si,1F79h
020A:6F2A  B9 0003				mov	cx,3
020A:6F2D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6F2F  BE 0866				mov	si,866h
020A:6F32  BF 01D6				mov	di,1D6h
020A:6F35  B9 00A0				mov	cx,0A0h
020A:6F38  FC					cld				; Clear direction
020A:6F39  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:6F3B  C7 06 1345 00A0			mov	word ptr ds:[1345h],0A0h	; (020A:1345=0)
020A:6F41  E8 0956				call	$+959h
020A:6F44  26: A1 211C				mov	ax,word ptr es:[211Ch]	; (020A:211C=0)
020A:6F48  3D 0001				cmp	ax,1
020A:6F4B  77 0E				ja	$+10h			; Jump if above
020A:6F4D  26: 8B 16 21BC			mov	dx,word ptr es:[21BCh]	; (020A:21BC=0E1Eh)
020A:6F52  26: A1 21BA				mov	ax,word ptr es:[21BAh]	; (020A:21BA=11h)
020A:6F56  B9 003C				mov	cx,3Ch
020A:6F59  F7 F1				div	cx			; ax,dx rem=dx:ax/reg
020A:6F5B  26: A3 477F				mov	word ptr es:[477Fh],ax	; (020A:477F=777Fh)
020A:6F5F  26: 83 3E 21BC 00			cmp	word ptr es:[21BCh],0	; (020A:21BC=0E1Eh)
020A:6F65  74 0E				je	$+10h			; Jump if equal
020A:6F67  C7 06 0286 6170			mov	word ptr ds:[286h],6170h	; (020A:0286=0)
020A:6F6D  C7 06 0288 6567			mov	word ptr ds:[288h],6567h	; (020A:0288=0)
020A:6F73  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:6F75  26: A1 21BA				mov	ax,word ptr es:[21BAh]	; (020A:21BA=11h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 196

020A:6F79  BD 028E				mov	bp,28Eh
020A:6F7C  B3 00				mov	bl,0
020A:6F7E  9A 1481:0300				call	far ptr $-6C7Eh
020A:6F83  E8 091A				call	$+91Dh
020A:6F86  83 3E 21BC 00			cmp	word ptr ds:[21BCh],0	; (020A:21BC=0E1Eh)
020A:6F8B  74 03				je	$+5			; Jump if equal
020A:6F8D  E9 00CD				jmp	$+0D0h
							                        ;* No entry point to code
020A:6F90  B4 2C				mov	ah,2Ch
020A:6F92  CD 21				int	21h			; DOS Services  ah=function 2Ch
										;  get time, cx=hrs/min, dx=sec
020A:6F94  8B 1E 3D90				mov	bx,word ptr ds:[3D90h]	; (020A:3D90=573h)
020A:6F98  3A FD				cmp	bh,ch
020A:6F9A  76 03				jbe	$+5			; Jump if below or =
020A:6F9C  80 C5 18				add	ch,18h
020A:6F9F  8B DA				mov	bx,dx
020A:6FA1  B0 3C				mov	al,3Ch			; '<'
020A:6FA3  F6 E5				mul	ch			; ax = reg * al
020A:6FA5  32 ED				xor	ch,ch			; Zero register
020A:6FA7  03 C1				add	ax,cx
020A:6FA9  B9 003C				mov	cx,3Ch
020A:6FAC  F7 E1				mul	cx			; dx:ax = reg * ax
020A:6FAE  53					push	bx
020A:6FAF  32 DB				xor	bl,bl			; Zero register
020A:6FB1  86 DF				xchg	bl,bh
020A:6FB3  03 C3				add	ax,bx
020A:6FB5  73 01				jnc	$+3			; Jump if carry=0
020A:6FB7  42					inc	dx
020A:6FB8  52					push	dx
020A:6FB9  B9 000A				mov	cx,0Ah
020A:6FBC  F7 E1				mul	cx			; dx:ax = reg * ax
020A:6FBE  59					pop	cx
020A:6FBF  03 D1				add	dx,cx
020A:6FC1  5B					pop	bx
020A:6FC2  52					push	dx
020A:6FC3  50					push	ax
020A:6FC4  32 FF				xor	bh,bh			; Zero register
020A:6FC6  8B C3				mov	ax,bx
020A:6FC8  33 D2				xor	dx,dx			; Zero register
020A:6FCA  B9 000A				mov	cx,0Ah
020A:6FCD  F7 F1				div	cx			; ax,dx rem=dx:ax/reg
020A:6FCF  8B D8				mov	bx,ax
020A:6FD1  58					pop	ax
020A:6FD2  5A					pop	dx
020A:6FD3  03 C3				add	ax,bx
020A:6FD5  73 01				jnc	$+3			; Jump if carry=0
020A:6FD7  42					inc	dx
020A:6FD8  52					push	dx
020A:6FD9  50					push	ax
020A:6FDA  8B 0E 3D90				mov	cx,word ptr ds:[3D90h]	; (020A:3D90=573h)
020A:6FDE  8B 1E 3D92				mov	bx,word ptr ds:[3D92h]	; (020A:3D92=0AB0h)
020A:6FE2  B0 3C				mov	al,3Ch			; '<'
020A:6FE4  F6 E5				mul	ch			; ax = reg * al
020A:6FE6  32 ED				xor	ch,ch			; Zero register
020A:6FE8  03 C1				add	ax,cx
020A:6FEA  B9 003C				mov	cx,3Ch
020A:6FED  F7 E1				mul	cx			; dx:ax = reg * ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 197

020A:6FEF  53					push	bx
020A:6FF0  32 DB				xor	bl,bl			; Zero register
020A:6FF2  86 DF				xchg	bl,bh
020A:6FF4  03 C3				add	ax,bx
020A:6FF6  73 01				jnc	$+3			; Jump if carry=0
020A:6FF8  42					inc	dx
020A:6FF9  52					push	dx
020A:6FFA  B9 000A				mov	cx,0Ah
020A:6FFD  F7 E1				mul	cx			; dx:ax = reg * ax
020A:6FFF  59					pop	cx
020A:7000  03 D1				add	dx,cx
020A:7002  5B					pop	bx
020A:7003  52					push	dx
020A:7004  50					push	ax
020A:7005  32 FF				xor	bh,bh			; Zero register
020A:7007  8B C3				mov	ax,bx
020A:7009  33 D2				xor	dx,dx			; Zero register
020A:700B  B9 000A				mov	cx,0Ah
020A:700E  F7 F1				div	cx			; ax,dx rem=dx:ax/reg
020A:7010  8B D8				mov	bx,ax
020A:7012  58					pop	ax
020A:7013  5A					pop	dx
020A:7014  03 C3				add	ax,bx
020A:7016  73 01				jnc	$+3			; Jump if carry=0
020A:7018  42					inc	dx
020A:7019  5B					pop	bx
020A:701A  59					pop	cx
020A:701B  2B D8				sub	bx,ax
020A:701D  1B CA				sbb	cx,dx
020A:701F  75 3C				jnz	$+3Eh			; Jump if not zero
020A:7021  0B DB				or	bx,bx			; Zero ?
020A:7023  74 38				jz	$+3Ah			; Jump if zero
020A:7025  33 D2				xor	dx,dx			; Zero register
020A:7027  8B CB				mov	cx,bx
020A:7029  A1 21BA				mov	ax,word ptr ds:[21BAh]	; (020A:21BA=11h)
020A:702C  F7 F1				div	cx			; ax,dx rem=dx:ax/reg
020A:702E  B9 0258				mov	cx,258h
020A:7031  F7 E1				mul	cx			; dx:ax = reg * ax
020A:7033  0B C0				or	ax,ax			; Zero ?
020A:7035  74 26				jz	$+28h			; Jump if zero
020A:7037  BE 21BE				mov	si,21BEh
020A:703A  BD 0297				mov	bp,297h
020A:703D  E8 085A				call	$+85Dh
020A:7040  E8 087B				call	$+87Eh
020A:7043  50					push	ax
020A:7044  26: 8A 0C				mov	cl,es:[si]
020A:7047  32 ED				xor	ch,ch			; Zero register
020A:7049  46					inc	si
020A:704A  26: 8A 04				mov	al,es:[si]
020A:704D  3E: 88 46 00				mov	ds:[bp],al
020A:7051  46					inc	si
020A:7052  45					inc	bp
020A:7053  E2 F5				loop	$-9			; Loop if cx > 0

020A:7055  58					pop	ax
020A:7056  32 DB				xor	bl,bl			; Zero register
020A:7058  9A 1481:0300				call	far ptr $-6D58h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 198

020A:705D  E8 0840				call	$+843h
020A:7060  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:7064  A0 120A				mov	al,byte ptr ds:[120Ah]	; (020A:120A=0)
020A:7067  88 47 52				mov	[bx+52h],al
020A:706A  B4 08				mov	ah,8
020A:706C  9A 1481:2F90				call	far ptr $-40DCh
020A:7071  9A 1481:3134				call	far ptr $-3F3Dh
020A:7076  8A 16 1D90				mov	dl,byte ptr ds:[1D90h]	; (020A:1D90=0)
020A:707A  B4 0E				mov	ah,0Eh
020A:707C  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:707E  E8 E92F				call	$-16CEh
020A:7081  EA 1481:3880				jmp	far ptr $-3801h
							                        ;* No entry point to code
020A:7086  B4 0E				mov	ah,0Eh
020A:7088  C6 06 231E 01			mov	byte ptr ds:[231Eh],1	; (020A:231E=0)
020A:708D  E9 02BF				jmp	$+2C2h
							                        ;* No entry point to code
020A:7090  C6 06 231E 02			mov	byte ptr ds:[231Eh],2	; (020A:231E=0)
020A:7095  B4 38				mov	ah,38h			; '8'
020A:7097  E9 02B5				jmp	$+2B8h
							                        ;* No entry point to code
020A:709A  C6 06 231E 02			mov	byte ptr ds:[231Eh],2	; (020A:231E=0)
020A:709F  26: 8A 1E 000D			mov	bl,byte ptr es:[0Dh]	; (020A:000D=90h)
020A:70A4  1E					push	ds
020A:70A5  B8 0547				mov	ax,547h
020A:70A8  8E D8				mov	ds,ax
020A:70AA  A1 3FB4				mov	ax,word ptr ds:[3FB4h]	; (ss:3FB4=0FFFFh)
020A:70AD  1F					pop	ds
020A:70AE  E8 07E9				call	$+7ECh
020A:70B1  80 E3 0C				and	bl,0Ch
020A:70B4  80 FB 04				cmp	bl,4
020A:70B7  74 19				je	$+1Bh			; Jump if equal
020A:70B9  C7 06 0330 6F6C			mov	word ptr ds:[330h],6F6Ch	; (020A:0330=7361h)
020A:70BF  C7 06 0332 2063			mov	word ptr ds:[332h],2063h	; (020A:0332=6664h)
020A:70C5  72 0B				jc	$+0Dh			; Jump if carry Set
020A:70C7  C7 06 0330 7573			mov	word ptr ds:[330h],7573h	; (020A:0330=7361h)
020A:70CD  C6 06 0332 62			mov	byte ptr ds:[332h],62h	; (020A:0332=64h) 'b'
020A:70D2  BD 033B				mov	bp,33Bh
020A:70D5  9A 1481:0294				call	far ptr $-6E41h
020A:70DA  B4 0A				mov	ah,0Ah
020A:70DC  E9 0270				jmp	$+273h
							                        ;* No entry point to code
020A:70DF  BD 02EC				mov	bp,2ECh
020A:70E2  B6 09				mov	dh,9
020A:70E4  A1 326F				mov	ax,word ptr ds:[326Fh]	; (020A:326F=3A43h)
020A:70E7  A3 477F				mov	word ptr ds:[477Fh],ax	; (020A:477F=777Fh)
020A:70EA  E8 07AD				call	$+7B0h
020A:70ED  E8 07CE				call	$+7D1h
020A:70F0  26: 80 3E 3F4B 09			cmp	byte ptr es:[3F4Bh],9	; (020A:3F4B=56h)
020A:70F6  74 57				je	$+59h			; Jump if equal
020A:70F8  26: 80 3E 3F4B 31			cmp	byte ptr es:[3F4Bh],31h	; (020A:3F4B=56h) '1'
020A:70FE  74 3A				je	$+3Ch			; Jump if equal
020A:7100  26: 80 3E 3F4B 12			cmp	byte ptr es:[3F4Bh],12h	; (020A:3F4B=56h)
020A:7106  74 1D				je	$+1Fh			; Jump if equal
020A:7108  26: 80 3E 3F4B 00			cmp	byte ptr es:[3F4Bh],0	; (020A:3F4B=56h)
020A:710E  74 3F				je	$+41h			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 199

020A:7110  26: 80 3E 3F4B 08			cmp	byte ptr es:[3F4Bh],8	; (020A:3F4B=56h)
020A:7116  74 07				je	$+9			; Jump if equal
020A:7118  BD 1486				mov	bp,1486h
020A:711B  32 F6				xor	dh,dh			; Zero register
020A:711D  EB 3D				jmp	short $+3Fh
							                        ;* No entry point to code
020A:711F  B8 0008				mov	ax,8
020A:7122  E9 00AF				jmp	$+0B2h
							                        ;* No entry point to code
020A:7125  26: C6 06 231E 13			mov	byte ptr es:[231Eh],13h	; (020A:231E=0)
020A:712B  BD 057A				mov	bp,57Ah
020A:712E  B3 00				mov	bl,0
020A:7130  9A 1481:0300				call	far ptr $-6E30h
020A:7135  B4 12				mov	ah,12h
020A:7137  E9 0215				jmp	$+218h
							                        ;* No entry point to code
020A:713A  26: C6 06 231E 0F			mov	byte ptr es:[231Eh],0Fh	; (020A:231E=0)
020A:7140  BD 0ED1				mov	bp,0ED1h
020A:7143  B3 00				mov	bl,0
020A:7145  9A 1481:0300				call	far ptr $-6E45h
020A:714A  B4 31				mov	ah,31h			; '1'
020A:714C  E9 0200				jmp	$+203h
							                        ;* No entry point to code
020A:714F  26: 80 3E 3F4C 01			cmp	byte ptr es:[3F4Ch],1	; (020A:3F4C=75h)
020A:7155  75 05				jne	$+7			; Jump if not equal
020A:7157  BD 0D4E				mov	bp,0D4Eh
020A:715A  B6 2C				mov	dh,2Ch			; ','
020A:715C  B3 00				mov	bl,0
020A:715E  9A 1481:0300				call	far ptr $-6E5Eh
020A:7163  26: A0 3F4B				mov	al,byte ptr es:[3F4Bh]	; (020A:3F4B=56h)
020A:7167  32 E4				xor	ah,ah			; Zero register
020A:7169  0A F6				or	dh,dh			; Zero ?
020A:716B  74 70				jz	$+72h			; Jump if zero
020A:716D  8A E6				mov	ah,dh
020A:716F  26: C6 06 231E 03			mov	byte ptr es:[231Eh],3	; (020A:231E=0)
020A:7175  E9 01D7				jmp	$+1DAh
							                        ;* No entry point to code
020A:7178  E8 071F				call	$+722h
020A:717B  E8 0740				call	$+743h
020A:717E  BD 03C7				mov	bp,3C7h
020A:7181  9A 1481:0294				call	far ptr $-6EEDh
020A:7186  B4 0C				mov	ah,0Ch
020A:7188  26: C6 06 231E 04			mov	byte ptr es:[231Eh],4	; (020A:231E=0)
020A:718E  E9 01BE				jmp	$+1C1h
							                        ;* No entry point to code
020A:7191  E8 070C				call	$+70Fh
020A:7194  B4 2E				mov	ah,2Eh			; '.'
020A:7196  C6 06 231E 05			mov	byte ptr ds:[231Eh],5	; (020A:231E=0)
020A:719B  E9 01B1				jmp	$+1B4h
							                        ;* No entry point to code
020A:719E  89 1E 477F				mov	word ptr ds:[477Fh],bx	; (020A:477F=777Fh)
020A:71A2  E8 06F5				call	$+6F8h
020A:71A5  E8 0716				call	$+719h
020A:71A8  8B C3				mov	ax,bx
020A:71AA  BD 0412				mov	bp,412h
020A:71AD  9A 1481:0294				call	far ptr $-6F19h
020A:71B2  B4 0D				mov	ah,0Dh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 200

020A:71B4  26: C6 06 231E 06			mov	byte ptr es:[231Eh],6	; (020A:231E=0)
020A:71BA  E9 0192				jmp	$+195h
							                        ;* No entry point to code
020A:71BD  BD 04A7				mov	bp,4A7h
020A:71C0  A1 17A5				mov	ax,word ptr ds:[17A5h]	; (020A:17A5=0)
020A:71C3  8A 26 17A2				mov	ah,byte ptr ds:[17A2h]	; (020A:17A2=0)
020A:71C7  E8 06D0				call	$+6D3h
020A:71CA  9A 1481:0294				call	far ptr $-6F36h
020A:71CF  B4 0F				mov	ah,0Fh
020A:71D1  E9 017B				jmp	$+17Eh
							                        ;* No entry point to code
020A:71D4  E8 06E7				call	$+6EAh
020A:71D7  26: C6 06 3F4B 00			mov	byte ptr es:[3F4Bh],0	; (020A:3F4B=56h)
020A:71DD  E8 06BA				call	$+6BDh
020A:71E0  E8 06DB				call	$+6DEh
020A:71E3  8B D8				mov	bx,ax
020A:71E5  B4 14				mov	ah,14h
020A:71E7  BD 05F0				mov	bp,5F0h
020A:71EA  83 FB 02				cmp	bx,2
020A:71ED  74 2D				je	$+2Fh			; Jump if equal
020A:71EF  B4 15				mov	ah,15h
020A:71F1  BD 063C				mov	bp,63Ch
020A:71F4  83 FB 05				cmp	bx,5
020A:71F7  74 23				je	$+25h			; Jump if equal
020A:71F9  B4 16				mov	ah,16h
020A:71FB  BD 0688				mov	bp,688h
020A:71FE  83 FB 08				cmp	bx,8
020A:7201  74 38				je	$+3Ah			; Jump if equal
020A:7203  B4 1D				mov	ah,1Dh
020A:7205  BD 089C				mov	bp,89Ch
020A:7208  83 FB 14				cmp	bx,14h
020A:720B  74 2E				je	$+30h			; Jump if equal
020A:720D  8A C3				mov	al,bl
020A:720F  BD 070A				mov	bp,70Ah
020A:7212  9A 1481:0124				call	far ptr $-70EEh
020A:7217  B4 17				mov	ah,17h
020A:7219  BD 06D4				mov	bp,6D4h
020A:721C  83 C5 02				add	bp,2
020A:721F  26: 80 3E 3F4B 00			cmp	byte ptr es:[3F4Bh],0	; (020A:3F4B=56h)
020A:7225  74 14				je	$+16h			; Jump if equal
020A:7227  8B FD				mov	di,bp
020A:7229  1E					push	ds
020A:722A  07					pop	es
020A:722B  83 C7 3B				add	di,3Bh
020A:722E  BE 147D				mov	si,147Dh
020A:7231  B9 148B				mov	cx,148Bh
020A:7234  81 E9 147D				sub	cx,147Dh
020A:7238  FC					cld				; Clear direction
020A:7239  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:723B  E8 0680				call	$+683h
020A:723E  26: C6 06 231E 08			mov	byte ptr es:[231Eh],8	; (020A:231E=0)
020A:7244  E9 0108				jmp	$+10Bh
							                        ;* No entry point to code
020A:7247  B4 1B				mov	ah,1Bh
020A:7249  C6 06 231E 09			mov	byte ptr ds:[231Eh],9	; (020A:231E=0)
020A:724E  E9 00FE				jmp	$+101h
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 201

020A:7251  B4 1C				mov	ah,1Ch
020A:7253  C6 06 231E 0A			mov	byte ptr ds:[231Eh],0Ah	; (020A:231E=0)
020A:7258  E9 00F4				jmp	$+0F7h
020A:725B  83 3E 1344 01			cmp	word ptr ds:[1344h],1	; (020A:1344=0)
020A:7260  75 11				jne	$+13h			; Jump if not equal
020A:7262  A1 006B				mov	ax,word ptr ds:[6Bh]	; (020A:006B=3938h)
020A:7265  E8 0632				call	$+635h
020A:7268  E8 0653				call	$+656h
020A:726B  BD 0AEF				mov	bp,0AEFh
020A:726E  9A 1481:0294				call	far ptr $-6FDAh
020A:7273  B4 24				mov	ah,24h			; '$'
020A:7275  C6 06 231E 0B			mov	byte ptr ds:[231Eh],0Bh	; (020A:231E=0)
020A:727A  E9 00D2				jmp	$+0D5h
020A:727D  BD 0C1C				mov	bp,0C1Ch
020A:7280  A1 326F				mov	ax,word ptr ds:[326Fh]	; (020A:326F=3A43h)
020A:7283  A3 477F				mov	word ptr ds:[477Fh],ax	; (020A:477F=777Fh)
020A:7286  E8 0611				call	$+614h
020A:7289  B3 00				mov	bl,0
020A:728B  9A 1481:0300				call	far ptr $-6F8Bh
020A:7290  B4 28				mov	ah,28h			; '('
020A:7292  E8 060B				call	$+60Eh
020A:7295  C6 06 231E 0C			mov	byte ptr ds:[231Eh],0Ch	; (020A:231E=0)
020A:729A  E9 00B2				jmp	$+0B5h
020A:729D  BD 0C6B				mov	bp,0C6Bh
020A:72A0  A1 326F				mov	ax,word ptr ds:[326Fh]	; (020A:326F=3A43h)
020A:72A3  A3 477F				mov	word ptr ds:[477Fh],ax	; (020A:477F=777Fh)
020A:72A6  E8 05F1				call	$+5F4h
020A:72A9  B3 00				mov	bl,0
020A:72AB  9A 1481:0300				call	far ptr $-6FABh
020A:72B0  B4 29				mov	ah,29h			; ')'
020A:72B2  E8 05EB				call	$+5EEh
020A:72B5  C6 06 231E 0D			mov	byte ptr ds:[231Eh],0Dh	; (020A:231E=0)
020A:72BA  E9 0092				jmp	$+95h
020A:72BD  FE C8				dec	al
020A:72BF  B9 0017				mov	cx,17h
020A:72C2  8A D9				mov	bl,cl
020A:72C4  F6 E3				mul	bl			; ax = reg * al
020A:72C6  8B F0				mov	si,ax
020A:72C8  81 C6 1171				add	si,1171h
020A:72CC  BF 1A84				mov	di,1A84h
020A:72CF  51					push	cx
020A:72D0  E8 05EB				call	$+5EEh
020A:72D3  E8 05CD				call	$+5D0h
020A:72D6  FC					cld				; Clear direction
020A:72D7  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:72D9  E8 05C4				call	$+5C7h
020A:72DC  59					pop	cx
020A:72DD  BE 1A84				mov	si,1A84h
020A:72E0  BF 0B72				mov	di,0B72h
020A:72E3  E8 05D2				call	$+5D5h
020A:72E6  E8 05B7				call	$+5BAh
020A:72E9  FC					cld				; Clear direction
020A:72EA  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:72EC  B4 26				mov	ah,26h			; '&'
020A:72EE  C6 06 231E 15			mov	byte ptr ds:[231Eh],15h	; (020A:231E=0)
020A:72F3  EB 5A				jmp	short $+5Ch
020A:72F5  B4 13				mov	ah,13h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 202

020A:72F7  C6 06 231E 0E			mov	byte ptr ds:[231Eh],0Eh	; (020A:231E=0)
020A:72FC  EB 51				jmp	short $+53h
020A:72FE  B4 11				mov	ah,11h
020A:7300  C6 06 231E 0E			mov	byte ptr ds:[231Eh],0Eh	; (020A:231E=0)
020A:7305  EB 48				jmp	short $+4Ah
020A:7307  B4 32				mov	ah,32h			; '2'
020A:7309  C6 06 231E 10			mov	byte ptr ds:[231Eh],10h	; (020A:231E=0)
020A:730E  EB 3F				jmp	short $+41h
020A:7310  B4 33				mov	ah,33h			; '3'
020A:7312  C6 06 231E 11			mov	byte ptr ds:[231Eh],11h	; (020A:231E=0)
020A:7317  EB 36				jmp	short $+38h
020A:7319  C6 06 231E 10			mov	byte ptr ds:[231Eh],10h	; (020A:231E=0)
020A:731E  EB 2F				jmp	short $+31h
020A:7320  B4 3B				mov	ah,3Bh			; ';'
020A:7322  EB 0A				jmp	short $+0Ch
020A:7324  B4 3A				mov	ah,3Ah			; ':'
020A:7326  EB 06				jmp	short $+8
020A:7328  B4 3C				mov	ah,3Ch			; '<'
020A:732A  EB 02				jmp	short $+4
020A:732C  B4 3D				mov	ah,3Dh			; '='
020A:732E  C6 06 231E 12			mov	byte ptr ds:[231Eh],12h	; (020A:231E=0)
020A:7333  EB 1A				jmp	short $+1Ch
020A:7335  B4 43				mov	ah,43h			; 'C'
020A:7337  C6 06 231E 16			mov	byte ptr ds:[231Eh],16h	; (020A:231E=0)
020A:733C  EB 11				jmp	short $+13h
020A:733E  C6 06 231E 17			mov	byte ptr ds:[231Eh],17h	; (020A:231E=0)
020A:7343  EA 1481:3880				jmp	far ptr $-3AC3h
020A:7348  B4 11				mov	ah,11h
020A:734A  C6 06 231E 14			mov	byte ptr ds:[231Eh],14h	; (020A:231E=0)
020A:734F  E8 054E				call	$+551h
020A:7352  9A 1481:2F90				call	far ptr $-43C2h
020A:7357  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:735C  74 0A				je	$+0Ch			; Jump if equal
020A:735E  80 3E 231E 14			cmp	byte ptr ds:[231Eh],14h	; (020A:231E=0)
020A:7363  74 03				je	$+5			; Jump if equal
020A:7365  E8 E808				call	$-17F5h
020A:7368  A0 1208				mov	al,byte ptr ds:[1208h]	; (020A:1208=0)
020A:736B  88 47 52				mov	[bx+52h],al
020A:736E  9A 1481:3128				call	far ptr $-4246h
020A:7373  EA 1481:3880				jmp	far ptr $-3AF3h
020A:7378  00					db	0
020A:7379  00					db	0
020A:737A  00					db	0
020A:737B  00					db	0
020A:737C  00					db	0
020A:737D  00					db	0
020A:737E  00					db	0
020A:737F  00					db	0
020A:7380  00					db	0
020A:7381  00 00				add	[bx+si],al
020A:7383  00 FF				add	bh,bh
020A:7385  FF 4B 7E				dec	word ptr [bp+di+7Eh]
020A:7388  75 81				jnz	$-7Dh			; Jump if not zero
020A:738A  B7 2C				mov	bh,2Ch			; ','
020A:738C  C2 0736				retn	736h
							                        ;* No entry point to code
020A:738F  44					inc	sp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 203

020A:7390  00					db	0
020A:7391  00 00				add	[bx+si],al
020A:7393  00 08				add	[bx+si],cl
020A:7395  28 37				sub	[bx],dh
020A:7397  2B 30				sub	si,[bx+si]
020A:7399  21 FF				and	di,di
020A:739B  FF					db	0FFh
020A:739C  FF					db	0FFh
020A:739D  FF					db	0FFh
020A:739E  FF					db	0FFh
020A:739F  FF 00				inc	word ptr [bx+si]
020A:73A1  87 DB				xchg	bx,bx
020A:73A3  90					nop
020A:73A4  E8 0059		;*		call	$+5Ch			;*
020A:73A4  E8 59 00				db	0E8h, 59h, 00h
020A:73A7  2E: 8B 16 3FC0			mov	dx,word ptr cs:[3FC0h]	; (020A:3FC0=812Bh)
020A:73AC  B8 0001				mov	ax,1
020A:73AF  E8 1712				call	$+1715h
020A:73B2  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:73B8  75 15				jne	$+17h			; Jump if not equal
020A:73BA  BA FFFF				mov	dx,0FFFFh
020A:73BD  B8 0002				mov	ax,2
020A:73C0  E8 1701				call	$+1704h
020A:73C3  B8 0001				mov	ax,1
020A:73C6  E8 16FB				call	$+16FEh
020A:73C9  B8 0004				mov	ax,4
020A:73CC  E8 16F5				call	$+16F8h
020A:73CF  2E: C7 06 3FC4 2808			mov	word ptr cs:[3FC4h],2808h	; (020A:3FC4=261Eh)
020A:73D6  2E: C7 06 3FC6 2B37			mov	word ptr cs:[3FC6h],2B37h	; (020A:3FC6=0C613h)
020A:73DD  B8 3292				mov	ax,3292h
020A:73E0  2D 1212				sub	ax,1212h
020A:73E3  A3 48DF				mov	word ptr ds:[48DFh],ax	; (020A:48DF=0C62Ah)
020A:73E6  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:73EC  74 06				je	$+8			; Jump if equal
020A:73EE  B8 FFF0				mov	ax,0FFF0h
020A:73F1  2D 1212				sub	ax,1212h
020A:73F4  A3 48DF				mov	word ptr ds:[48DFh],ax	; (020A:48DF=0C62Ah)
020A:73F7  C3					retn
							                        ;* No entry point to code
020A:73F8  2E: C7 06 3FC8 2130			mov	word ptr cs:[3FC8h],2130h	; (020A:3FC8=3047h)
020A:73FF  C3					retn
							                        ;* No entry point to code
020A:7400  50					push	ax
020A:7401  53					push	bx
020A:7402  51					push	cx
020A:7403  52					push	dx
020A:7404  56					push	si
020A:7405  57					push	di
020A:7406  55					push	bp
020A:7407  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:740C  1E					push	ds
020A:740D  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7412  06					push	es
020A:7413  E8 EB66				call	$-1497h
020A:7416  2E: 80 3E 3FB0 FF			cmp	byte ptr cs:[3FB0h],0FFh	; (020A:3FB0=15h)
020A:741C  2E: C6 06 3FB0 00			mov	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7422  75 03				jnz	$+5			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 204

020A:7424  E9 0277				jmp	$+27Ah
							                        ;* No entry point to code
020A:7427  B8 2130				mov	ax,2130h
020A:742A  8E D8				mov	ds,ax
020A:742C  B8 3D00				mov	ax,3D00h
020A:742F  BA 6A60				mov	dx,6A60h
020A:7432  CD 21				int	21h			; DOS Services  ah=function 3Dh
										;  open file, al=mode,name@ds:dx
020A:7434  73 03				jnc	$+5			; Jump if carry=0
020A:7436  E9 0265				jmp	$+268h
							                        ;* No entry point to code
020A:7439  8B D8				mov	bx,ax
020A:743B  B4 44				mov	ah,44h			; 'D'
020A:743D  B0 07				mov	al,7
020A:743F  B9 0000				mov	cx,0
020A:7442  BA 6A69				mov	dx,6A69h
020A:7445  CD 21				int	21h			; DOS Services  ah=function 44h
										;  IOctl-7 check output status
										;   bx=handle, returns al status
020A:7447  50					push	ax
020A:7448  B4 3E				mov	ah,3Eh
020A:744A  CD 21				int	21h			; DOS Services  ah=function 3Eh
										;  close file, bx=file handle
020A:744C  73 09				jnc	$+0Bh			; Jump if carry=0
020A:744E  58					pop	ax
020A:744F  9A 1481:3A10				call	far ptr $-3A3Fh
020A:7454  E9 0247				jmp	$+24Ah
							                        ;* No entry point to code
020A:7457  58					pop	ax
020A:7458  0A C0				or	al,al			; Zero ?
020A:745A  74 F3				jz	$-0Bh			; Jump if zero
020A:745C  B4 40				mov	ah,40h
020A:745E  CD 67				int	67h			; EMS Memory        ah=func 40h
										;  get manager status in ah
020A:7460  80 FC 00				cmp	ah,0
020A:7463  75 EA				jne	$-14h			; Jump if not equal
020A:7465  B4 42				mov	ah,42h
020A:7467  CD 67				int	67h			; EMS Memory        ah=func 42h
										;  get pages, bx=unused,dx=total
020A:7469  0A E4				or	ah,ah			; Zero ?
020A:746B  75 E2				jnz	$-1Ch			; Jump if not zero
020A:746D  83 FB 24				cmp	bx,24h
020A:7470  72 DD				jb	$-21h			; Jump if below
020A:7472  B4 41				mov	ah,41h
020A:7474  CD 67				int	67h			; EMS Memory        ah=func 41h
										;  get page frame segment in bx
020A:7476  0A E4				or	ah,ah			; Zero ?
020A:7478  75 D5				jnz	$-29h			; Jump if not zero
020A:747A  2E: 89 1E 3FB2			mov	word ptr cs:[3FB2h],bx	; (020A:3FB2=575h)
020A:747F  C6 06 6AC1 01			mov	byte ptr ds:[6AC1h],1	; (2130:6AC1=0)
020A:7484  B4 43				mov	ah,43h			; 'C'
020A:7486  BB 0004				mov	bx,4
020A:7489  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:748B  0A E4				or	ah,ah			; Zero ?
020A:748D  75 C0				jnz	$-3Eh			; Jump if not zero
020A:748F  2E: 89 16 3FC0			mov	word ptr cs:[3FC0h],dx	; (020A:3FC0=812Bh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 205

020A:7494  89 16 6AC2				mov	word ptr ds:[6AC2h],dx	; (2130:6AC2=0FFFFh)
020A:7498  B4 43				mov	ah,43h			; 'C'
020A:749A  BB 0004				mov	bx,4
020A:749D  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:749F  0A E4				or	ah,ah			; Zero ?
020A:74A1  75 AC				jnz	$-52h			; Jump if not zero
020A:74A3  2E: 89 16 3FBA			mov	word ptr cs:[3FBAh],dx	; (020A:3FBA=1706h)
020A:74A8  89 16 6AC4				mov	word ptr ds:[6AC4h],dx	; (2130:6AC4=0FFFFh)
020A:74AC  B4 43				mov	ah,43h			; 'C'
020A:74AE  BB 0004				mov	bx,4
020A:74B1  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:74B3  0A E4				or	ah,ah			; Zero ?
020A:74B5  75 98				jnz	$-66h			; Jump if not zero
020A:74B7  2E: 89 16 3FBE			mov	word ptr cs:[3FBEh],dx	; (020A:3FBE=0B09Ah)
020A:74BC  89 16 6AC6				mov	word ptr ds:[6AC6h],dx	; (2130:6AC6=0FFFFh)
020A:74C0  B4 43				mov	ah,43h			; 'C'
020A:74C2  BB 0004				mov	bx,4
020A:74C5  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:74C7  0A E4				or	ah,ah			; Zero ?
020A:74C9  75 84				jnz	$-7Ah			; Jump if not zero
020A:74CB  2E: 89 16 3FB6			mov	word ptr cs:[3FB6h],dx	; (020A:3FB6=155Fh)
020A:74D0  89 16 6AC8				mov	word ptr ds:[6AC8h],dx	; (2130:6AC8=0FFFFh)
020A:74D4  B4 43				mov	ah,43h			; 'C'
020A:74D6  BB 0004				mov	bx,4
020A:74D9  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:74DB  0A E4				or	ah,ah			; Zero ?
020A:74DD  75 37				jnz	$+39h			; Jump if not zero
020A:74DF  2E: 89 16 3FC2			mov	word ptr cs:[3FC2h],dx	; (020A:3FC2=8B14h)
020A:74E4  89 16 6ACA				mov	word ptr ds:[6ACAh],dx	; (2130:6ACA=0FFFFh)
020A:74E8  B4 43				mov	ah,43h			; 'C'
020A:74EA  BB 0004				mov	bx,4
020A:74ED  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:74EF  0A E4				or	ah,ah			; Zero ?
020A:74F1  75 23				jnz	$+25h			; Jump if not zero
020A:74F3  2E: 89 16 3FBC			mov	word ptr cs:[3FBCh],dx	; (020A:3FBC=23h)
020A:74F8  89 16 6ACC				mov	word ptr ds:[6ACCh],dx	; (2130:6ACC=0FFFFh)
020A:74FC  B4 43				mov	ah,43h			; 'C'
020A:74FE  BB 0004				mov	bx,4
020A:7501  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:7503  0A E4				or	ah,ah			; Zero ?
020A:7505  75 0F				jnz	$+11h			; Jump if not zero
020A:7507  89 16 6ACE				mov	word ptr ds:[6ACEh],dx	; (2130:6ACE=0FFFFh)
020A:750B  B4 43				mov	ah,43h			; 'C'
020A:750D  BB 0004				mov	bx,4
020A:7510  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:7512  0A E4				or	ah,ah			; Zero ?
020A:7514  74 03				jz	$+5			; Jump if zero
020A:7516  E9 FF36				jmp	$-0C7h
							                        ;* No entry point to code
020A:7519  89 16 6AD0				mov	word ptr ds:[6AD0h],dx	; (2130:6AD0=0FFFFh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 206

020A:751D  B4 43				mov	ah,43h			; 'C'
020A:751F  BB 0004				mov	bx,4
020A:7522  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:7524  0A E4				or	ah,ah			; Zero ?
020A:7526  75 11				jnz	$+13h			; Jump if not zero
020A:7528  89 16 6AD2				mov	word ptr ds:[6AD2h],dx	; (2130:6AD2=0FFFFh)
020A:752C  C6 06 6BF2 03			mov	byte ptr ds:[6BF2h],3	; (2130:6BF2=0)
020A:7531  C6 06 6BF3 01			mov	byte ptr ds:[6BF3h],1	; (2130:6BF3=0)
020A:7536  EB 09				jmp	short $+0Bh
							                        ;* No entry point to code
020A:7538  90					nop
020A:7539  9A 1481:3A10				call	far ptr $-3B29h
020A:753E  E9 015D				jmp	$+160h
							                        ;* No entry point to code
020A:7541  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (2130:17AC=0)
020A:7546  75 07				jne	$+9			; Jump if not equal
020A:7548  BA 44CC				mov	dx,44CCh
020A:754B  B4 09				mov	ah,9
020A:754D  CD 21				int	21h			; DOS Services  ah=function 09h
										;  display char string at ds:dx
020A:754F  B9 0004				mov	cx,4
020A:7552  BD 0000				mov	bp,0
020A:7555  8B 16 6AC2				mov	dx,word ptr ds:[6AC2h]	; (2130:6AC2=0FFFFh)
020A:7559  BE 6A9B				mov	si,6A9Bh
020A:755C  E8 0221				call	$+224h
020A:755F  72 D8				jc	$-26h			; Jump if carry Set
020A:7561  BA 2CB7				mov	dx,2CB7h
020A:7564  8E C2				mov	es,dx
020A:7566  8B 16 6AC4				mov	dx,word ptr ds:[6AC4h]	; (2130:6AC4=0FFFFh)
020A:756A  E8 02DF				call	$+2E2h
020A:756D  72 CA				jc	$-34h			; Jump if carry Set
020A:756F  BA 4407				mov	dx,4407h
020A:7572  8E C2				mov	es,dx
020A:7574  8B 16 6AC6				mov	dx,word ptr ds:[6AC6h]	; (2130:6AC6=0FFFFh)
020A:7578  E8 02D1				call	$+2D4h
020A:757B  72 BC				jc	$-42h			; Jump if carry Set
020A:757D  BA 7E4B				mov	dx,7E4Bh
020A:7580  8E C2				mov	es,dx
020A:7582  8B 16 6AC8				mov	dx,word ptr ds:[6AC8h]	; (2130:6AC8=0FFFFh)
020A:7586  E8 02C3				call	$+2C6h
020A:7589  72 AE				jc	$-50h			; Jump if carry Set
020A:758B  8B 16 6ACA				mov	dx,word ptr ds:[6ACAh]	; (2130:6ACA=0FFFFh)
020A:758F  BE 6AAB				mov	si,6AABh
020A:7592  E8 01EB				call	$+1EEh
020A:7595  72 A2				jc	$-5Ch			; Jump if carry Set
020A:7597  BA 36C2				mov	dx,36C2h
020A:759A  8E C2				mov	es,dx
020A:759C  8B 16 6ACC				mov	dx,word ptr ds:[6ACCh]	; (2130:6ACC=0FFFFh)
020A:75A0  E8 02A9				call	$+2ACh
020A:75A3  72 94				jc	$-6Ah			; Jump if carry Set
020A:75A5  C6 06 44F3 00			mov	byte ptr ds:[44F3h],0	; (2130:44F3=0FFh)
020A:75AA  8B 16 6ACE				mov	dx,word ptr ds:[6ACEh]	; (2130:6ACE=0FFFFh)
020A:75AE  BE 6A6B				mov	si,6A6Bh
020A:75B1  E8 01CC				call	$+1CFh
020A:75B4  72 83				jc	$-7Bh			; Jump if carry Set
020A:75B6  8B 16 6AD0				mov	dx,word ptr ds:[6AD0h]	; (2130:6AD0=0FFFFh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 207

020A:75BA  BE 6A8B				mov	si,6A8Bh
020A:75BD  E8 01C0				call	$+1C3h
020A:75C0  72 0C				jc	$+0Eh			; Jump if carry Set
020A:75C2  8B 16 6AD2				mov	dx,word ptr ds:[6AD2h]	; (2130:6AD2=0FFFFh)
020A:75C6  BE 6A7B				mov	si,6A7Bh
020A:75C9  E8 01B4				call	$+1B7h
020A:75CC  73 03				jnc	$+5			; Jump if carry=0
020A:75CE  E9 FF68				jmp	$-95h
							                        ;* No entry point to code
020A:75D1  2E: C6 06 3FB0 01			mov	byte ptr cs:[3FB0h],1	; (020A:3FB0=15h)
020A:75D7  B8 2CB7				mov	ax,2CB7h
020A:75DA  40					inc	ax
020A:75DB  2E: A3 3FB8				mov	word ptr cs:[3FB8h],ax	; (020A:3FB8=0C602h)
020A:75DF  B8 2130				mov	ax,2130h
020A:75E2  8E D8				mov	ds,ax
020A:75E4  B4 42				mov	ah,42h
020A:75E6  CD 67				int	67h			; EMS Memory        ah=func 42h
										;  get pages, bx=unused,dx=total
020A:75E8  0A E4				or	ah,ah			; Zero ?
020A:75EA  74 03				jz	$+5			; Jump if zero
020A:75EC  E9 00E9				jmp	$+0ECh
							                        ;* No entry point to code
020A:75EF  81 FB 0260				cmp	bx,260h
020A:75F3  76 03				jbe	$+5			; Jump if below or =
020A:75F5  BB 0260				mov	bx,260h
020A:75F8  F6 06 1656 01			test	byte ptr ds:[1656h],1	; (2130:1656=0)
020A:75FD  75 4E				jnz	$+50h			; Jump if not zero
020A:75FF  8B C3				mov	ax,bx
020A:7601  B1 04				mov	cl,4
020A:7603  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:7605  74 11				jz	$+13h			; Jump if zero
020A:7607  3D 0004				cmp	ax,4
020A:760A  76 03				jbe	$+5			; Jump if below or =
020A:760C  B8 0004				mov	ax,4
020A:760F  B1 02				mov	cl,2
020A:7611  D3 E0				shl	ax,cl			; Shift w/zeros fill
020A:7613  2B D8				sub	bx,ax
020A:7615  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:7617  90					nop
020A:7618  8B C3				mov	ax,bx
020A:761A  33 DB				xor	bx,bx			; Zero register
020A:761C  8B EB				mov	bp,bx
020A:761E  B1 02				mov	cl,2
020A:7620  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:7622  8B C8				mov	cx,ax
020A:7624  E3 25				jcxz	$+27h			; Jump if cx=0
020A:7626  BF 0128				mov	di,128h
020A:7629  89 3E 6BF5				mov	word ptr ds:[6BF5h],di	; (2130:6BF5=0)
020A:762D  B4 43				mov	ah,43h			; 'C'
020A:762F  BB 0004				mov	bx,4
020A:7632  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:7634  0A E4				or	ah,ah			; Zero ?
020A:7636  75 24				jnz	$+26h			; Jump if not zero
020A:7638  89 95 6AC2				mov	word ptr ds:[6AC2h][di],dx	; (2130:6AC2=0FFFFh)
020A:763C  33 F6				xor	si,si			; Zero register
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 208

020A:763E  E8 013F				call	$+142h
020A:7641  72 19				jc	$+1Bh			; Jump if carry Set
020A:7643  FE 06 6BF4				inc	byte ptr ds:[6BF4h]	; (2130:6BF4=0)
020A:7647  47					inc	di
020A:7648  47					inc	di
020A:7649  E2 E2				loop	$-1Ch			; Loop if cx > 0

020A:764B  8B DD				mov	bx,bp
020A:764D  83 FB 0C				cmp	bx,0Ch
020A:7650  72 0A				jb	$+0Ch			; Jump if below
020A:7652  8B C3				mov	ax,bx
020A:7654  B3 0C				mov	bl,0Ch
020A:7656  F6 F3				div	bl			; al, ah rem = ax/reg
020A:7658  3C 00				cmp	al,0
020A:765A  75 03				jne	$+5			; Jump if not equal
020A:765C  EB 7A				jmp	short $+7Ch
							                        ;* No entry point to code
020A:765E  90					nop
020A:765F  32 E4				xor	ah,ah			; Zero register
020A:7661  3D 002E				cmp	ax,2Eh
020A:7664  72 03				jb	$+5			; Jump if below
020A:7666  B8 002E				mov	ax,2Eh
020A:7669  8B C8				mov	cx,ax
020A:766B  BF 0012				mov	di,12h
020A:766E  51					push	cx
020A:766F  B9 0003				mov	cx,3
020A:7672  B4 43				mov	ah,43h			; 'C'
020A:7674  BB 0004				mov	bx,4
020A:7677  CD 67				int	67h			; EMS Memory        ah=func 43h
										;  get handle dx,allocate pgs bx
020A:7679  0A E4				or	ah,ah			; Zero ?
020A:767B  75 1D				jnz	$+1Fh			; Jump if not zero
020A:767D  89 95 6AC2				mov	word ptr ds:[6AC2h][di],dx	; (2130:6AC2=0FFFFh)
020A:7681  FE 06 6BF2				inc	byte ptr ds:[6BF2h]	; (2130:6BF2=0)
020A:7685  33 F6				xor	si,si			; Zero register
020A:7687  E8 00F6				call	$+0F9h
020A:768A  72 0E				jc	$+10h			; Jump if carry Set
020A:768C  47					inc	di
020A:768D  47					inc	di
020A:768E  E2 E2				loop	$-1Ch			; Loop if cx > 0

020A:7690  59					pop	cx
020A:7691  FE 06 6BF3				inc	byte ptr ds:[6BF3h]	; (2130:6BF3=0)
020A:7695  E2 D7				loop	$-27h			; Loop if cx > 0

020A:7697  EB 3F				jmp	short $+41h
							                        ;* No entry point to code
020A:7699  90					nop
020A:769A  59					pop	cx
020A:769B  EB 3B				jmp	short $+3Dh
							                        ;* No entry point to code
020A:769D  90					nop
020A:769E  2E: C7 06 3FB6 7E4B			mov	word ptr cs:[3FB6h],7E4Bh	; (020A:3FB6=155Fh)
020A:76A5  B8 7E4B				mov	ax,7E4Bh
020A:76A8  BB 3292				mov	bx,3292h
020A:76AB  D1 EB				shr	bx,1			; Shift w/zeros fill
020A:76AD  D1 EB				shr	bx,1			; Shift w/zeros fill
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 209

020A:76AF  D1 EB				shr	bx,1			; Shift w/zeros fill
020A:76B1  D1 EB				shr	bx,1			; Shift w/zeros fill
020A:76B3  03 C3				add	ax,bx
020A:76B5  40					inc	ax
020A:76B6  2E: A3 3FB8				mov	word ptr cs:[3FB8h],ax	; (020A:3FB8=0C602h)
020A:76BA  2E: C7 06 3FBA 2CB7			mov	word ptr cs:[3FBAh],2CB7h	; (020A:3FBA=1706h)
020A:76C1  2E: C7 06 3FBC 36C2			mov	word ptr cs:[3FBCh],36C2h	; (020A:3FBC=23h)
020A:76C8  2E: C7 06 3FBE 4407			mov	word ptr cs:[3FBEh],4407h	; (020A:3FBE=0B09Ah)
020A:76CF  2E: C6 06 3FB0 00			mov	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:76D5  EB 3A				jmp	short $+3Ch
							                        ;* No entry point to code
020A:76D7  90					nop
020A:76D8  A0 6BF2				mov	al,byte ptr ds:[6BF2h]	; (2130:6BF2=0)
020A:76DB  02 06 6BF4				add	al,byte ptr ds:[6BF4h]	; (2130:6BF4=0)
020A:76DF  32 E4				xor	ah,ah			; Zero register
020A:76E1  04 06				add	al,6
020A:76E3  B1 06				mov	cl,6
020A:76E5  D3 E0				shl	ax,cl			; Shift w/zeros fill
020A:76E7  B3 62				mov	bl,62h			; 'b'
020A:76E9  F6 F3				div	bl			; al, ah rem = ax/reg
020A:76EB  32 E4				xor	ah,ah			; Zero register
020A:76ED  B3 01				mov	bl,1
020A:76EF  C6 06 0720 20			mov	byte ptr ds:[720h],20h	; (2130:0720=66h) ' '
020A:76F4  BD 071D				mov	bp,71Dh
020A:76F7  9A 1481:0300				call	far ptr $-73F7h
020A:76FC  A1 0720				mov	ax,word ptr ds:[720h]	; (2130:0720=2066h)
020A:76FF  A2 071D				mov	byte ptr ds:[71Dh],al	; (2130:071D=20h)
020A:7702  C6 06 071E 2E			mov	byte ptr ds:[71Eh],2Eh	; (2130:071E=6Fh) '.'
020A:7707  88 26 071F				mov	byte ptr ds:[71Fh],ah	; (2130:071F=66h)
020A:770B  C7 06 0720 424D			mov	word ptr ds:[720h],424Dh	; (2130:0720=2066h)
020A:7711  B8 2130				mov	ax,2130h
020A:7714  8E D8				mov	ds,ax
020A:7716  2E: A0 3FB0				mov	al,byte ptr cs:[3FB0h]	; (020A:3FB0=15h)
020A:771A  A2 44F2				mov	byte ptr ds:[44F2h],al	; (2130:44F2=0)
020A:771D  E8 E868				call	$-1795h
020A:7720  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:7725  9C					pushf				; Push flags
020A:7726  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:772B  5A					pop	dx
020A:772C  8E C2				mov	es,dx
020A:772E  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7733  5A					pop	dx
020A:7734  75 0A				jnz	$+0Ch			; Jump if not zero
020A:7736  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:773B  74 03				je	$+5			; Jump if equal
020A:773D  E8 0640				call	$+643h
020A:7740  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7745  9D					popf				; Pop flags
020A:7746  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:774B  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:7750  9C					pushf				; Push flags
020A:7751  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7756  5A					pop	dx
020A:7757  8E DA				mov	ds,dx
020A:7759  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:775E  5A					pop	dx
020A:775F  75 0A				jnz	$+0Ch			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 210

020A:7761  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7766  74 03				je	$+5			; Jump if equal
020A:7768  E8 0615				call	$+618h
020A:776B  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7770  9D					popf				; Pop flags
020A:7771  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:7776  5D					pop	bp
020A:7777  5F					pop	di
020A:7778  5E					pop	si
020A:7779  5A					pop	dx
020A:777A  59					pop	cx
020A:777B  5B					pop	bx
020A:777C  58					pop	ax
020A:777D  C3					retn
							                        ;* No entry point to code
020A:777E  87 DB				xchg	bx,bx
020A:7780  50					push	ax
020A:7781  53					push	bx
020A:7782  51					push	cx
020A:7783  55					push	bp
020A:7784  33 ED				xor	bp,bp			; Zero register
020A:7786  80 3E 17AC 00			cmp	byte ptr ds:[17ACh],0	; (020A:17AC=2)
020A:778B  75 3E				jne	$+40h			; Jump if not equal
020A:778D  52					push	dx
020A:778E  2E: 8A 36 3FB1			mov	dh,byte ptr cs:[3FB1h]	; (020A:3FB1=80h)
020A:7793  FE C6				inc	dh
020A:7795  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (020A:1329=0)
020A:779A  74 1E				je	$+20h			; Jump if equal
020A:779C  F6 C6 01				test	dh,1
020A:779F  74 0E				jz	$+10h			; Jump if zero
020A:77A1  B4 09				mov	ah,9
020A:77A3  B0 DD				mov	al,0DDh
020A:77A5  BB 0002				mov	bx,2
020A:77A8  B9 0001				mov	cx,1
020A:77AB  CD 10				int	10h			; Video display   ah=functn 09h
										;  set char al & attrib bl @curs
										;   cx=# of chars to replicate
020A:77AD  EB 16				jmp	short $+18h
							                        ;* No entry point to code
020A:77AF  B4 0E				mov	ah,0Eh
020A:77B1  B0 DB				mov	al,0DBh
020A:77B3  BB 0002				mov	bx,2
020A:77B6  CD 10				int	10h			; Video display   ah=functn 0Eh
										;  write char al, teletype mode
020A:77B8  EB 0B				jmp	short $+0Dh
							                        ;* No entry point to code
020A:77BA  F6 C6 01				test	dh,1
020A:77BD  75 06				jnz	$+8			; Jump if not zero
020A:77BF  B2 3E				mov	dl,3Eh			; '>'
020A:77C1  B4 02				mov	ah,2
020A:77C3  CD 21				int	21h			; DOS Services  ah=function 02h
										;  display char dl
020A:77C5  2E: 88 36 3FB1			mov	byte ptr cs:[3FB1h],dh	; (020A:3FB1=80h)
020A:77CA  5A					pop	dx
020A:77CB  B9 0004				mov	cx,4
020A:77CE  B4 44				mov	ah,44h			; 'D'
020A:77D0  8B DD				mov	bx,bp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 211

020A:77D2  8A C3				mov	al,bl
020A:77D4  CD 67				int	67h			; EMS Memory        ah=func 44h
										;  map memory, dx=handle
020A:77D6  0A E4				or	ah,ah			; Zero ?
020A:77D8  75 6A				jnz	$+6Ch			; Jump if not zero
020A:77DA  45					inc	bp
020A:77DB  E2 F1				loop	$-0Dh			; Loop if cx > 0

020A:77DD  06					push	es
020A:77DE  57					push	di
020A:77DF  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:77E4  FC					cld				; Clear direction
020A:77E5  B8 FFFF				mov	ax,0FFFFh
020A:77E8  80 3E 44F3 00			cmp	byte ptr ds:[44F3h],0	; (020A:44F3=3)
020A:77ED  74 24				je	$+26h			; Jump if equal
020A:77EF  F7 06 1D62 07E0			test	word ptr ds:[1D62h],7E0h	; (020A:1D62=0)
020A:77F5  74 15				jz	$+17h			; Jump if zero
020A:77F7  66					db	66h
020A:77F8  33 FF				xor	di,di			; Zero register
020A:77FA  66					db	66h
020A:77FB  B8 FFFF				mov	ax,0FFFFh
020A:77FE  FF					db	0FFh
020A:77FF  FF 66 B9				jmp	word ptr [bp-47h]	;*
020A:7802  00 40 00		;*		add	[bx+si+0],al
020A:7802  00 40 00				db	 00h, 40h, 00h
020A:7805  00 F3				add	bl,dh
020A:7807  66					db	66h
020A:7808  AB					stosw				; Store ax to es:[di]
020A:7809  EB 08				jmp	short $+0Ah
							                        ;* No entry point to code
020A:780B  90					nop
020A:780C  33 FF				xor	di,di			; Zero register
020A:780E  B9 8000				mov	cx,8000h
020A:7811  F3/ AB				rep	stosw			; Rep when cx >0 Store ax to es:[di]
020A:7813  B9 0010				mov	cx,10h
020A:7816  83 FE 00				cmp	si,0
020A:7819  74 08				je	$+0Ah			; Jump if equal
020A:781B  BF FFF0				mov	di,0FFF0h
020A:781E  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:7820  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:7822  90					nop
020A:7823  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:7825  1E					push	ds
020A:7826  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:782B  BD FFFC				mov	bp,0FFFCh
020A:782E  8B C2				mov	ax,dx
020A:7830  9A 1481:0294				call	far ptr $-759Ch
020A:7835  1F					pop	ds
020A:7836  5F					pop	di
020A:7837  07					pop	es
020A:7838  B4 47				mov	ah,47h
020A:783A  CD 67				int	67h			; EMS Memory        ah=func 47h
										;  save map context, dx=handle
020A:783C  0A E4				or	ah,ah			; Zero ?
020A:783E  75 04				jnz	$+6			; Jump if not zero
020A:7840  F8					clc				; Clear carry flag
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 212

020A:7841  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:7843  90					nop
020A:7844  F9					stc				; Set carry flag
020A:7845  5D					pop	bp
020A:7846  59					pop	cx
020A:7847  5B					pop	bx
020A:7848  58					pop	ax
020A:7849  C3					retn
							                        ;* No entry point to code
020A:784A  87 DB				xchg	bx,bx
020A:784C  50					push	ax
020A:784D  53					push	bx
020A:784E  51					push	cx
020A:784F  55					push	bp
020A:7850  33 ED				xor	bp,bp			; Zero register
020A:7852  B9 0004				mov	cx,4
020A:7855  B4 44				mov	ah,44h			; 'D'
020A:7857  8B DD				mov	bx,bp
020A:7859  8A C3				mov	al,bl
020A:785B  CD 67				int	67h			; EMS Memory        ah=func 44h
										;  map memory, dx=handle
020A:785D  0A E4				or	ah,ah			; Zero ?
020A:785F  75 28				jnz	$+2Ah			; Jump if not zero
020A:7861  45					inc	bp
020A:7862  E2 F1				loop	$-0Dh			; Loop if cx > 0

020A:7864  06					push	es
020A:7865  1E					push	ds
020A:7866  57					push	di
020A:7867  56					push	si
020A:7868  06					push	es
020A:7869  1F					pop	ds
020A:786A  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:786F  33 FF				xor	di,di			; Zero register
020A:7871  8B F7				mov	si,di
020A:7873  B9 8000				mov	cx,8000h
020A:7876  FC					cld				; Clear direction
020A:7877  F3/ A5				rep	movsw			; Rep when cx >0 Mov [si] to es:[di]
020A:7879  5E					pop	si
020A:787A  5F					pop	di
020A:787B  1F					pop	ds
020A:787C  07					pop	es
020A:787D  B4 47				mov	ah,47h
020A:787F  CD 67				int	67h			; EMS Memory        ah=func 47h
										;  save map context, dx=handle
020A:7881  0A E4				or	ah,ah			; Zero ?
020A:7883  75 04				jnz	$+6			; Jump if not zero
020A:7885  F8					clc				; Clear carry flag
020A:7886  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:7888  90					nop
020A:7889  F9					stc				; Set carry flag
020A:788A  EB 01				jmp	short $+3		; delay for I/O
020A:788C  90					nop
020A:788D  5D					pop	bp
020A:788E  59					pop	cx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 213

020A:788F  5B					pop	bx
020A:7890  58					pop	ax
020A:7891  C3					retn
							                        ;* No entry point to code
020A:7892  87 DB				xchg	bx,bx
020A:7894  EB 58				jmp	short $+5Ah
020A:7896  90					nop
020A:7897  EB 5B				jmp	short $+5Dh
020A:7899  90					nop
020A:789A  EB 5E				jmp	short $+60h
020A:789C  90					nop
020A:789D  EB 79				jmp	short $+7Bh
							                        ;* No entry point to code
020A:789F  90					nop
020A:78A0  E9 0093				jmp	$+96h
020A:78A3  E9 0096				jmp	$+99h
020A:78A6  E9 00B1				jmp	$+0B4h
020A:78A9  E9 00CC				jmp	$+0CFh
020A:78AC  E9 00CF				jmp	$+0D2h
020A:78AF  E9 00EC				jmp	$+0EFh
020A:78B2  E9 0107				jmp	$+10Ah
020A:78B5  E9 010A				jmp	$+10Dh
020A:78B8  E9 010D				jmp	$+110h
020A:78BB  E9 0128				jmp	$+12Bh
020A:78BE  E9 0143				jmp	$+146h
020A:78C1  E9 0146				jmp	$+149h
020A:78C4  E9 0161				jmp	$+164h
020A:78C7  E9 017C				jmp	$+17Fh
020A:78CA  E9 017F				jmp	$+182h
020A:78CD  E9 019C				jmp	$+19Fh
020A:78D0  E9 01B7				jmp	$+1BAh
020A:78D3  E9 01B9				jmp	$+1BCh
020A:78D6  E9 01BB				jmp	$+1BEh
020A:78D9  E9 01D4				jmp	$+1D7h
020A:78DC  E9 01ED				jmp	$+1F0h
020A:78DF  E9 01EF				jmp	$+1F2h
020A:78E2  E9 0208				jmp	$+20Bh
020A:78E5  E9 0221				jmp	$+224h
020A:78E8  E9 0223				jmp	$+226h
020A:78EB  E9 023B				jmp	$+23Eh
							                        ;* No entry point to code
020A:78EE  2E: 8E 1E 3FC4			mov	ds,word ptr cs:[3FC4h]	; (020A:3FC4=261Eh)
020A:78F3  C3					retn
							                        ;* No entry point to code
020A:78F4  2E: 8E 1E 3FC6			mov	ds,word ptr cs:[3FC6h]	; (020A:3FC6=0C613h)
020A:78F9  C3					retn
							                        ;* No entry point to code
020A:78FA  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7900  75 06				jne	$+8			; Jump if not equal
020A:7902  2E: 8E 1E 3FBA			mov	ds,word ptr cs:[3FBAh]	; (020A:3FBA=1706h)
020A:7907  C3					retn
							                        ;* No entry point to code
020A:7908  52					push	dx
020A:7909  2E: 8B 16 3FBA			mov	dx,word ptr cs:[3FBAh]	; (020A:3FBA=1706h)
020A:790E  E8 046F				call	$+472h
020A:7911  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7916  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 214

020A:7917  C3					retn
							                        ;* No entry point to code
020A:7918  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:791E  75 06				jne	$+8			; Jump if not equal
020A:7920  2E: 8E 1E 3FBC			mov	ds,word ptr cs:[3FBCh]	; (020A:3FBC=23h)
020A:7925  C3					retn
							                        ;* No entry point to code
020A:7926  52					push	dx
020A:7927  2E: 8B 16 3FBC			mov	dx,word ptr cs:[3FBCh]	; (020A:3FBC=23h)
020A:792C  E8 0451				call	$+454h
020A:792F  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7934  5A					pop	dx
020A:7935  C3					retn
							                        ;* No entry point to code
020A:7936  2E: 8E 1E 3FC8			mov	ds,word ptr cs:[3FC8h]	; (020A:3FC8=3047h)
020A:793B  C3					retn
							                        ;* No entry point to code
020A:793C  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7942  75 06				jne	$+8			; Jump if not equal
020A:7944  2E: 8E 1E 3FB6			mov	ds,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7949  C3					retn
							                        ;* No entry point to code
020A:794A  52					push	dx
020A:794B  2E: 8B 16 3FB6			mov	dx,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7950  E8 042D				call	$+430h
020A:7953  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7958  5A					pop	dx
020A:7959  C3					retn
							                        ;* No entry point to code
020A:795A  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7960  75 06				jne	$+8			; Jump if not equal
020A:7962  2E: 8E 1E 3FB6			mov	ds,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7967  C3					retn
							                        ;* No entry point to code
020A:7968  52					push	dx
020A:7969  2E: 8B 16 3FC2			mov	dx,word ptr cs:[3FC2h]	; (020A:3FC2=8B14h)
020A:796E  E8 040F				call	$+412h
020A:7971  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7976  5A					pop	dx
020A:7977  C3					retn
							                        ;* No entry point to code
020A:7978  2E: 8E 1E 3FB8			mov	ds,word ptr cs:[3FB8h]	; (020A:3FB8=0C602h)
020A:797D  C3					retn
							                        ;* No entry point to code
020A:797E  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7984  75 08				jne	$+0Ah			; Jump if not equal
020A:7986  50					push	ax
020A:7987  B8 6E4B				mov	ax,6E4Bh
020A:798A  8E D8				mov	ds,ax
020A:798C  58					pop	ax
020A:798D  C3					retn
							                        ;* No entry point to code
020A:798E  52					push	dx
020A:798F  2E: 8B 16 3FC0			mov	dx,word ptr cs:[3FC0h]	; (020A:3FC0=812Bh)
020A:7994  E8 03E9				call	$+3ECh
020A:7997  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:799C  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 215

020A:799D  C3					retn
							                        ;* No entry point to code
020A:799E  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:79A4  75 06				jne	$+8			; Jump if not equal
020A:79A6  2E: 8E 1E 3FBE			mov	ds,word ptr cs:[3FBEh]	; (020A:3FBE=0B09Ah)
020A:79AB  C3					retn
							                        ;* No entry point to code
020A:79AC  52					push	dx
020A:79AD  2E: 8B 16 3FBE			mov	dx,word ptr cs:[3FBEh]	; (020A:3FBE=0B09Ah)
020A:79B2  E8 03CB				call	$+3CEh
020A:79B5  2E: 8E 1E 3FB2			mov	ds,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:79BA  5A					pop	dx
020A:79BB  C3					retn
							                        ;* No entry point to code
020A:79BC  2E: 8E 06 3FC4			mov	es,word ptr cs:[3FC4h]	; (020A:3FC4=261Eh)
020A:79C1  C3					retn
							                        ;* No entry point to code
020A:79C2  2E: 8E 06 3FC6			mov	es,word ptr cs:[3FC6h]	; (020A:3FC6=0C613h)
020A:79C7  C3					retn
							                        ;* No entry point to code
020A:79C8  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:79CE  75 06				jne	$+8			; Jump if not equal
020A:79D0  2E: 8E 06 3FBA			mov	es,word ptr cs:[3FBAh]	; (020A:3FBA=1706h)
020A:79D5  C3					retn
							                        ;* No entry point to code
020A:79D6  52					push	dx
020A:79D7  2E: 8B 16 3FBA			mov	dx,word ptr cs:[3FBAh]	; (020A:3FBA=1706h)
020A:79DC  E8 03A1				call	$+3A4h
020A:79DF  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:79E4  5A					pop	dx
020A:79E5  C3					retn
							                        ;* No entry point to code
020A:79E6  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:79EC  75 06				jne	$+8			; Jump if not equal
020A:79EE  2E: 8E 06 3FBC			mov	es,word ptr cs:[3FBCh]	; (020A:3FBC=23h)
020A:79F3  C3					retn
							                        ;* No entry point to code
020A:79F4  52					push	dx
020A:79F5  2E: 8B 16 3FBC			mov	dx,word ptr cs:[3FBCh]	; (020A:3FBC=23h)
020A:79FA  E8 0383				call	$+386h
020A:79FD  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7A02  5A					pop	dx
020A:7A03  C3					retn
							                        ;* No entry point to code
020A:7A04  2E: 8E 06 3FC8			mov	es,word ptr cs:[3FC8h]	; (020A:3FC8=3047h)
020A:7A09  C3					retn
							                        ;* No entry point to code
020A:7A0A  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7A10  75 06				jne	$+8			; Jump if not equal
020A:7A12  2E: 8E 06 3FB6			mov	es,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7A17  C3					retn
							                        ;* No entry point to code
020A:7A18  52					push	dx
020A:7A19  2E: 8B 16 3FB6			mov	dx,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7A1E  E8 035F				call	$+362h
020A:7A21  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7A26  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 216

020A:7A27  C3					retn
							                        ;* No entry point to code
020A:7A28  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7A2E  75 06				jne	$+8			; Jump if not equal
020A:7A30  2E: 8E 06 3FB6			mov	es,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7A35  C3					retn
							                        ;* No entry point to code
020A:7A36  52					push	dx
020A:7A37  2E: 8B 16 3FC2			mov	dx,word ptr cs:[3FC2h]	; (020A:3FC2=8B14h)
020A:7A3C  E8 0341				call	$+344h
020A:7A3F  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7A44  5A					pop	dx
020A:7A45  C3					retn
							                        ;* No entry point to code
020A:7A46  2E: 8E 06 3FB8			mov	es,word ptr cs:[3FB8h]	; (020A:3FB8=0C602h)
020A:7A4B  C3					retn
							                        ;* No entry point to code
020A:7A4C  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7A52  75 08				jne	$+0Ah			; Jump if not equal
020A:7A54  50					push	ax
020A:7A55  B8 6E4B				mov	ax,6E4Bh
020A:7A58  8E C0				mov	es,ax
020A:7A5A  58					pop	ax
020A:7A5B  C3					retn
							                        ;* No entry point to code
020A:7A5C  52					push	dx
020A:7A5D  2E: 8B 16 3FC0			mov	dx,word ptr cs:[3FC0h]	; (020A:3FC0=812Bh)
020A:7A62  E8 031B				call	$+31Eh
020A:7A65  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7A6A  5A					pop	dx
020A:7A6B  C3					retn
							                        ;* No entry point to code
020A:7A6C  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7A72  75 06				jne	$+8			; Jump if not equal
020A:7A74  2E: 8E 06 3FBE			mov	es,word ptr cs:[3FBEh]	; (020A:3FBE=0B09Ah)
020A:7A79  C3					retn
							                        ;* No entry point to code
020A:7A7A  52					push	dx
020A:7A7B  2E: 8B 16 3FBE			mov	dx,word ptr cs:[3FBEh]	; (020A:3FBE=0B09Ah)
020A:7A80  E8 02FD				call	$+300h
020A:7A83  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7A88  5A					pop	dx
020A:7A89  C3					retn
							                        ;* No entry point to code
020A:7A8A  2E: A1 3FC4				mov	ax,word ptr cs:[3FC4h]	; (020A:3FC4=261Eh)
020A:7A8E  C3					retn
							                        ;* No entry point to code
020A:7A8F  2E: A1 3FC6				mov	ax,word ptr cs:[3FC6h]	; (020A:3FC6=0C613h)
020A:7A93  C3					retn
							                        ;* No entry point to code
020A:7A94  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7A9A  75 05				jne	$+7			; Jump if not equal
020A:7A9C  2E: A1 3FBA				mov	ax,word ptr cs:[3FBAh]	; (020A:3FBA=1706h)
020A:7AA0  C3					retn
							                        ;* No entry point to code
020A:7AA1  52					push	dx
020A:7AA2  2E: 8B 16 3FBA			mov	dx,word ptr cs:[3FBAh]	; (020A:3FBA=1706h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 217

020A:7AA7  E8 02D6				call	$+2D9h
020A:7AAA  2E: A1 3FB2				mov	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7AAE  5A					pop	dx
020A:7AAF  C3					retn
							                        ;* No entry point to code
020A:7AB0  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7AB6  75 05				jne	$+7			; Jump if not equal
020A:7AB8  2E: A1 3FBC				mov	ax,word ptr cs:[3FBCh]	; (020A:3FBC=23h)
020A:7ABC  C3					retn
							                        ;* No entry point to code
020A:7ABD  52					push	dx
020A:7ABE  2E: 8B 16 3FBC			mov	dx,word ptr cs:[3FBCh]	; (020A:3FBC=23h)
020A:7AC3  E8 02BA				call	$+2BDh
020A:7AC6  2E: A1 3FB2				mov	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7ACA  5A					pop	dx
020A:7ACB  C3					retn
							                        ;* No entry point to code
020A:7ACC  2E: A1 3FC8				mov	ax,word ptr cs:[3FC8h]	; (020A:3FC8=3047h)
020A:7AD0  C3					retn
							                        ;* No entry point to code
020A:7AD1  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7AD7  75 05				jne	$+7			; Jump if not equal
020A:7AD9  2E: A1 3FB6				mov	ax,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7ADD  C3					retn
							                        ;* No entry point to code
020A:7ADE  52					push	dx
020A:7ADF  2E: 8B 16 3FB6			mov	dx,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7AE4  E8 0299				call	$+29Ch
020A:7AE7  2E: A1 3FB2				mov	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7AEB  5A					pop	dx
020A:7AEC  C3					retn
							                        ;* No entry point to code
020A:7AED  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7AF3  75 05				jne	$+7			; Jump if not equal
020A:7AF5  2E: A1 3FB6				mov	ax,word ptr cs:[3FB6h]	; (020A:3FB6=155Fh)
020A:7AF9  C3					retn
							                        ;* No entry point to code
020A:7AFA  52					push	dx
020A:7AFB  2E: 8B 16 3FC2			mov	dx,word ptr cs:[3FC2h]	; (020A:3FC2=8B14h)
020A:7B00  E8 027D				call	$+280h
020A:7B03  2E: A1 3FB2				mov	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7B07  5A					pop	dx
020A:7B08  C3					retn
							                        ;* No entry point to code
020A:7B09  2E: A1 3FB8				mov	ax,word ptr cs:[3FB8h]	; (020A:3FB8=0C602h)
020A:7B0D  C3					retn
							                        ;* No entry point to code
020A:7B0E  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7B14  75 04				jne	$+6			; Jump if not equal
020A:7B16  B8 6E4B				mov	ax,6E4Bh
020A:7B19  C3					retn
							                        ;* No entry point to code
020A:7B1A  52					push	dx
020A:7B1B  2E: 8B 16 3FC0			mov	dx,word ptr cs:[3FC0h]	; (020A:3FC0=812Bh)
020A:7B20  E8 025D				call	$+260h
020A:7B23  2E: A1 3FB2				mov	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7B27  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 218

020A:7B28  C3					retn
							                        ;* No entry point to code
020A:7B29  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7B2F  75 05				jne	$+7			; Jump if not equal
020A:7B31  2E: A1 3FBE				mov	ax,word ptr cs:[3FBEh]	; (020A:3FBE=0B09Ah)
020A:7B35  C3					retn
							                        ;* No entry point to code
020A:7B36  52					push	dx
020A:7B37  2E: 8B 16 3FBE			mov	dx,word ptr cs:[3FBEh]	; (020A:3FBE=0B09Ah)
020A:7B3C  E8 0241				call	$+244h
020A:7B3F  2E: A1 3FB2				mov	ax,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7B43  5A					pop	dx
020A:7B44  C3					retn
							                        ;* No entry point to code
020A:7B45  01 87 2EDB				add	word ptr ds:[2EDBh][bx],ax	; (020A:2EDB=0E8Ah)
020A:7B49  80 3E 4775 00			cmp	byte ptr ds:[4775h],0	; (020A:4775=0C6h)
020A:7B4E  74 03				je	$+5			; Jump if equal
020A:7B50  E9 022A				jmp	$+22Dh
							                        ;* No entry point to code
020A:7B53  2E: FE 06 4775			inc	byte ptr cs:[4775h]	; (020A:4775=0C6h)
020A:7B58  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7B5E  75 03				jne	$+5			; Jump if not equal
020A:7B60  E9 021A				jmp	$+21Dh
							                        ;* No entry point to code
020A:7B63  50					push	ax
020A:7B64  53					push	bx
020A:7B65  51					push	cx
020A:7B66  52					push	dx
020A:7B67  56					push	si
020A:7B68  57					push	di
020A:7B69  55					push	bp
020A:7B6A  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7B6F  06					push	es
020A:7B70  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7B75  1E					push	ds
020A:7B76  E8 FD39				call	$-2C4h
020A:7B79  E8 FD24				call	$-2D9h
020A:7B7C  33 F6				xor	si,si			; Zero register
020A:7B7E  33 C9				xor	cx,cx			; Zero register
020A:7B80  26: 8B 44 04				mov	ax,es:[si+4]
020A:7B84  26: 3B 44 02				cmp	ax,es:[si+2]
020A:7B88  75 09				jne	$+0Bh			; Jump if not equal
020A:7B8A  2E: C6 06 4775 00			mov	byte ptr cs:[4775h],0	; (020A:4775=0C6h)
020A:7B90  E9 018D				jmp	$+190h
							                        ;* No entry point to code
020A:7B93  26: 8B 04				mov	ax,es:[si]
020A:7B96  3D FFFF				cmp	ax,0FFFFh
020A:7B99  74 1C				je	$+1Eh			; Jump if equal
020A:7B9B  26: 8B 54 04				mov	dx,es:[si+4]
020A:7B9F  26: 2B 54 02				sub	dx,es:[si+2]
020A:7BA3  01 16 6ABB				add	word ptr ds:[6ABBh],dx	; (020A:6ABB=9A59h)
020A:7BA7  83 16 6ABD 00			adc	word ptr ds:[6ABDh],0	; (020A:6ABD=100h)
020A:7BAC  83 C6 19				add	si,19h
020A:7BAF  26: 3B 04				cmp	ax,es:[si]
020A:7BB2  74 DF				je	$-1Fh			; Jump if equal
020A:7BB4  41					inc	cx
020A:7BB5  EB DC				jmp	short $-22h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 219

							                        ;* No entry point to code
020A:7BB7  89 0E 6ABF				mov	word ptr ds:[6ABFh],cx	; (020A:6ABF=1481h)
020A:7BBB  3A 0E 6BF3				cmp	cl,byte ptr ds:[6BF3h]	; (020A:6BF3=3Ah)
020A:7BBF  74 65				je	$+67h			; Jump if equal
020A:7BC1  72 03				jc	$+5			; Jump if carry Set
020A:7BC3  E9 00A9				jmp	$+0ACh
							                        ;* No entry point to code
020A:7BC6  80 F9 F9				cmp	cl,0F9h
020A:7BC9  73 5B				jae	$+5Dh			; Jump if above or =
020A:7BCB  26: 81 7C E7 FC00			cmp	word ptr es:[si-19h],0FC00h
020A:7BD1  73 53				jae	$+55h			; Jump if above or =
020A:7BD3  32 C0				xor	al,al			; Zero register
020A:7BD5  B9 0032				mov	cx,32h
020A:7BD8  8B FE				mov	di,si
020A:7BDA  FC					cld				; Clear direction
020A:7BDB  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:7BDD  B8 FC00				mov	ax,0FC00h
020A:7BE0  26: 89 04				mov	es:[si],ax
020A:7BE3  26: 89 44 15				mov	es:[si+15h],ax
020A:7BE7  26: C7 44 0A 4000			mov	word ptr es:[si+0Ah],4000h
020A:7BED  26: C7 44 19 FFFF			mov	word ptr es:[si+19h],0FFFFh
020A:7BF3  FF 06 6ABF				inc	word ptr ds:[6ABFh]	; (020A:6ABF=1481h)
020A:7BF7  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:7BFB  8B 0E 6ABF				mov	cx,word ptr ds:[6ABFh]	; (020A:6ABF=1481h)
020A:7BFF  3A 0E 6BF3				cmp	cl,byte ptr ds:[6BF3h]	; (020A:6BF3=3Ah)
020A:7C03  73 21				jae	$+23h			; Jump if above or =
020A:7C05  83 C6 19				add	si,19h
020A:7C08  B8 FD00				mov	ax,0FD00h
020A:7C0B  26: 89 04				mov	es:[si],ax
020A:7C0E  26: 89 44 15				mov	es:[si+15h],ax
020A:7C12  26: C7 44 0A 4000			mov	word ptr es:[si+0Ah],4000h
020A:7C18  26: C7 44 19 FFFF			mov	word ptr es:[si+19h],0FFFFh
020A:7C1E  FF 06 6ABF				inc	word ptr ds:[6ABFh]	; (020A:6ABF=1481h)
020A:7C22  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:7C26  33 F6				xor	si,si			; Zero register
020A:7C28  BB 000C				mov	bx,0Ch
020A:7C2B  26: 8B 04				mov	ax,es:[si]
020A:7C2E  3D FFFF				cmp	ax,0FFFFh
020A:7C31  74 39				je	$+3Bh			; Jump if equal
020A:7C33  50					push	ax
020A:7C34  8B 97 6AC2				mov	dx,word ptr ds:[6AC2h][bx]	; (020A:6AC2=7E88h)
020A:7C38  26: 89 54 11				mov	es:[si+11h],dx
020A:7C3C  B8 0002				mov	ax,2
020A:7C3F  E8 0E82				call	$+0E85h
020A:7C42  8B 97 6AC4				mov	dx,word ptr ds:[6AC4h][bx]	; (020A:6AC4=4500h)
020A:7C46  26: 89 54 13				mov	es:[si+13h],dx
020A:7C4A  B8 0001				mov	ax,1
020A:7C4D  E8 0E74				call	$+0E77h
020A:7C50  8B 97 6AC6				mov	dx,word ptr ds:[6AC6h][bx]	; (020A:6AC6=8B26h)
020A:7C54  26: 89 54 0F				mov	es:[si+0Fh],dx
020A:7C58  B8 0004				mov	ax,4
020A:7C5B  E8 0E66				call	$+0E69h
020A:7C5E  58					pop	ax
020A:7C5F  83 C6 19				add	si,19h
020A:7C62  26: 3B 04				cmp	ax,es:[si]
020A:7C65  74 C4				je	$-3Ah			; Jump if equal
020A:7C67  83 C3 06				add	bx,6
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 220

020A:7C6A  EB BF				jmp	short $-3Fh
020A:7C6C  E9 00B1				jmp	$+0B4h
							                        ;* No entry point to code
020A:7C6F  32 FF				xor	bh,bh			; Zero register
020A:7C71  8A 1E 6BF3				mov	bl,byte ptr ds:[6BF3h]	; (020A:6BF3=3Ah)
020A:7C75  B8 FFFF				mov	ax,0FFFFh
020A:7C78  F7 E3				mul	bx			; dx:ax = reg * ax
020A:7C7A  3B 16 6ABD				cmp	dx,word ptr ds:[6ABDh]	; (020A:6ABD=100h)
020A:7C7E  77 0E				ja	$+10h			; Jump if above
020A:7C80  72 06				jc	$+8			; Jump if carry Set
020A:7C82  3B 06 6ABB				cmp	ax,word ptr ds:[6ABBh]	; (020A:6ABB=9A59h)
020A:7C86  77 06				ja	$+8			; Jump if above
020A:7C88  B8 FFFF				mov	ax,0FFFFh
020A:7C8B  EB 10				jmp	short $+12h
							                        ;* No entry point to code
020A:7C8D  90					nop
020A:7C8E  32 FF				xor	bh,bh			; Zero register
020A:7C90  8A 1E 6BF3				mov	bl,byte ptr ds:[6BF3h]	; (020A:6BF3=3Ah)
020A:7C94  8B 16 6ABD				mov	dx,word ptr ds:[6ABDh]	; (020A:6ABD=100h)
020A:7C98  A1 6ABB				mov	ax,word ptr ds:[6ABBh]	; (020A:6ABB=9A59h)
020A:7C9B  F7 F3				div	bx			; ax,dx rem=dx:ax/reg
020A:7C9D  8B E8				mov	bp,ax
020A:7C9F  33 C9				xor	cx,cx			; Zero register
020A:7CA1  33 D2				xor	dx,dx			; Zero register
020A:7CA3  FE C6				inc	dh
020A:7CA5  33 F6				xor	si,si			; Zero register
020A:7CA7  BF 000C				mov	di,0Ch
020A:7CAA  26: 8B 1C				mov	bx,es:[si]
020A:7CAD  83 FB FF				cmp	bx,0FFFFh
020A:7CB0  74 6E				je	$+70h			; Jump if equal
020A:7CB2  26: 8B 44 04				mov	ax,es:[si+4]
020A:7CB6  26: 2B 44 02				sub	ax,es:[si+2]
020A:7CBA  03 C8				add	cx,ax
020A:7CBC  9C					pushf				; Push flags
020A:7CBD  8B 85 6AC2				mov	ax,word ptr ds:[6AC2h][di]	; (020A:6AC2=7E88h)
020A:7CC1  26: 89 44 11				mov	es:[si+11h],ax
020A:7CC5  50					push	ax
020A:7CC6  52					push	dx
020A:7CC7  8B D0				mov	dx,ax
020A:7CC9  B8 0002				mov	ax,2
020A:7CCC  E8 0DF5				call	$+0DF8h
020A:7CCF  5A					pop	dx
020A:7CD0  58					pop	ax
020A:7CD1  8B 85 6AC4				mov	ax,word ptr ds:[6AC4h][di]	; (020A:6AC4=4500h)
020A:7CD5  26: 89 44 13				mov	es:[si+13h],ax
020A:7CD9  50					push	ax
020A:7CDA  52					push	dx
020A:7CDB  8B D0				mov	dx,ax
020A:7CDD  B8 0001				mov	ax,1
020A:7CE0  E8 0DE1				call	$+0DE4h
020A:7CE3  5A					pop	dx
020A:7CE4  58					pop	ax
020A:7CE5  8B 85 6AC6				mov	ax,word ptr ds:[6AC6h][di]	; (020A:6AC6=8B26h)
020A:7CE9  26: 89 44 0F				mov	es:[si+0Fh],ax
020A:7CED  50					push	ax
020A:7CEE  52					push	dx
020A:7CEF  8B D0				mov	dx,ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 221

020A:7CF1  B8 0004				mov	ax,4
020A:7CF4  E8 0DCD				call	$+0DD0h
020A:7CF7  5A					pop	dx
020A:7CF8  58					pop	ax
020A:7CF9  83 C6 19				add	si,19h
020A:7CFC  26: 3B 1C				cmp	bx,es:[si]
020A:7CFF  75 09				jne	$+0Bh			; Jump if not equal
020A:7D01  9D					popf				; Pop flags
020A:7D02  73 1A				jnc	$+1Ch			; Jump if carry=0
020A:7D04  B9 FFFF				mov	cx,0FFFFh
020A:7D07  EB 15				jmp	short $+17h
							                        ;* No entry point to code
020A:7D09  90					nop
020A:7D0A  9D					popf				; Pop flags
020A:7D0B  72 04				jc	$+6			; Jump if carry Set
020A:7D0D  3B CD				cmp	cx,bp
020A:7D0F  72 0D				jb	$+0Fh			; Jump if below
020A:7D11  33 C9				xor	cx,cx			; Zero register
020A:7D13  3A 36 6BF3				cmp	dh,byte ptr ds:[6BF3h]	; (020A:6BF3=3Ah)
020A:7D17  73 05				jae	$+7			; Jump if above or =
020A:7D19  83 C7 06				add	di,6
020A:7D1C  FE C6				inc	dh
020A:7D1E  EB 8A				jmp	short $-74h
							                        ;* No entry point to code
020A:7D20  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:7D25  9C					pushf				; Push flags
020A:7D26  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7D2B  5A					pop	dx
020A:7D2C  8E DA				mov	ds,dx
020A:7D2E  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7D33  5A					pop	dx
020A:7D34  75 0A				jnz	$+0Ch			; Jump if not zero
020A:7D36  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7D3B  74 03				je	$+5			; Jump if equal
020A:7D3D  E8 0040		;*		call	$+43h			;*
020A:7D3D  E8 40 00				db	0E8h, 40h, 00h
020A:7D40  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7D45  9D					popf				; Pop flags
020A:7D46  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:7D4B  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:7D50  9C					pushf				; Push flags
020A:7D51  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7D56  5A					pop	dx
020A:7D57  8E C2				mov	es,dx
020A:7D59  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7D5E  5A					pop	dx
020A:7D5F  75 0A				jnz	$+0Ch			; Jump if not zero
020A:7D61  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7D66  74 03				je	$+5			; Jump if equal
020A:7D68  E8 0015		;*		call	$+18h			;*
020A:7D68  E8 15 00				db	0E8h, 15h, 00h
020A:7D6B  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:7D70  9D					popf				; Pop flags
020A:7D71  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:7D76  5D					pop	bp
020A:7D77  5F					pop	di
020A:7D78  5E					pop	si
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 222

020A:7D79  5A					pop	dx
020A:7D7A  59					pop	cx
020A:7D7B  5B					pop	bx
020A:7D7C  58					pop	ax
020A:7D7D  C3					retn
							                        ;* No entry point to code
020A:7D7E  87 DB				xchg	bx,bx
020A:7D80  2E: 39 16 3FB4			cmp	word ptr cs:[3FB4h],dx	; (020A:3FB4=6C6h)
020A:7D85  74 19				je	$+1Bh			; Jump if equal
020A:7D87  2E: 89 16 3FB4			mov	word ptr cs:[3FB4h],dx	; (020A:3FB4=6C6h)
020A:7D8C  50					push	ax
020A:7D8D  B4 48				mov	ah,48h
020A:7D8F  CD 67				int	67h			; EMS Memory        ah=func 48h
										;  restore map context,dx=handle
020A:7D91  80 FC 00				cmp	ah,0
020A:7D94  75 0B				jne	$+0Dh			; Jump if not equal
020A:7D96  B4 47				mov	ah,47h
020A:7D98  CD 67				int	67h			; EMS Memory        ah=func 47h
										;  save map context, dx=handle
020A:7D9A  80 FC 00				cmp	ah,0
020A:7D9D  75 02				jne	$+4			; Jump if not equal
020A:7D9F  58					pop	ax
020A:7DA0  C3					retn
							                        ;* No entry point to code
020A:7DA1  2E: 8A 0E 3FD0			mov	cl,byte ptr cs:[3FD0h]	; (020A:3FD0=47h)
020A:7DA6  51					push	cx
020A:7DA7  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7DAC  E8 FAEB				call	$-512h
020A:7DAF  BD 0F5D				mov	bp,0F5Dh
020A:7DB2  32 C0				xor	al,al			; Zero register
020A:7DB4  86 C4				xchg	al,ah
020A:7DB6  9A 1481:0294				call	far ptr $-7B22h
020A:7DBB  83 C5 03				add	bp,3
020A:7DBE  8B D0				mov	dx,ax
020A:7DC0  58					pop	ax
020A:7DC1  9A 1481:0294				call	far ptr $-7B2Dh
020A:7DC6  8B C2				mov	ax,dx
020A:7DC8  E8 FAD5				call	$-528h
020A:7DCB  A3 477F				mov	word ptr ds:[477Fh],ax	; (020A:477F=777Fh)
020A:7DCE  E9 F53F				jmp	$-0ABEh
							                        ;* No entry point to code
020A:7DD1  87 DB				xchg	bx,bx
020A:7DD3  90					nop
020A:7DD4  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7DDA  75 0A				jne	$+0Ch			; Jump if not equal
020A:7DDC  50					push	ax
020A:7DDD  B8 5E4B				mov	ax,5E4Bh
020A:7DE0  8E C0				mov	es,ax
020A:7DE2  58					pop	ax
020A:7DE3  EB 59				jmp	short $+5Bh
							                        ;* No entry point to code
020A:7DE5  90					nop
020A:7DE6  E8 FAD5				call	$-528h
020A:7DE9  26: 3B 1E 216C			cmp	bx,word ptr es:[216Ch]	; (5E4B:216C=223h)
020A:7DEE  75 1C				jne	$+1Eh			; Jump if not equal
020A:7DF0  2E: 83 3E 3FCA FF			cmp	word ptr cs:[3FCAh],0FFFFh	; (020A:3FCA=0C600h)
020A:7DF6  74 14				je	$+16h			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 223

020A:7DF8  52					push	dx
020A:7DF9  2E: 8B 16 3FCA			mov	dx,word ptr cs:[3FCAh]	; (020A:3FCA=0C600h)
020A:7DFE  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7E03  74 03				je	$+5			; Jump if equal
020A:7E05  E8 FF78				call	$-85h
020A:7E08  5A					pop	dx
020A:7E09  EB 2E				jmp	short $+30h
							                        ;* No entry point to code
020A:7E0B  90					nop
020A:7E0C  E8 FAA3				call	$-55Ah
020A:7E0F  56					push	si
020A:7E10  33 F6				xor	si,si			; Zero register
020A:7E12  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:7E16  74 0C				je	$+0Eh			; Jump if equal
020A:7E18  26: 39 1C				cmp	es:[si],bx
020A:7E1B  77 07				ja	$+9			; Jump if above
020A:7E1D  74 10				jz	$+12h			; Jump if zero
020A:7E1F  83 C6 19				add	si,19h
020A:7E22  EB EE				jmp	short $-10h
							                        ;* No entry point to code
020A:7E24  83 FE 19				cmp	si,19h
020A:7E27  73 03				jae	$+5			; Jump if above or =
020A:7E29  BE 0019				mov	si,19h
020A:7E2C  83 EE 19				sub	si,19h
020A:7E2F  52					push	dx
020A:7E30  26: 8B 54 11				mov	dx,es:[si+11h]
020A:7E34  E8 FF49				call	$-0B4h
020A:7E37  5A					pop	dx
020A:7E38  5E					pop	si
020A:7E39  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7E3E  C3					retn
							                        ;* No entry point to code
020A:7E3F  90					nop
020A:7E40  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7E46  75 0A				jne	$+0Ch			; Jump if not equal
020A:7E48  50					push	ax
020A:7E49  B8 6E4B				mov	ax,6E4Bh
020A:7E4C  8E C0				mov	es,ax
020A:7E4E  58					pop	ax
020A:7E4F  EB 59				jmp	short $+5Bh
							                        ;* No entry point to code
020A:7E51  90					nop
020A:7E52  E8 FA69				call	$-594h
020A:7E55  26: 3B 1E 216C			cmp	bx,word ptr es:[216Ch]	; (6E4B:216C=0FFFFh)
020A:7E5A  75 1C				jne	$+1Eh			; Jump if not equal
020A:7E5C  2E: 83 3E 3FCC FF			cmp	word ptr cs:[3FCCh],0FFFFh	; (020A:3FCC=3347h)
020A:7E62  74 14				je	$+16h			; Jump if equal
020A:7E64  52					push	dx
020A:7E65  2E: 8B 16 3FCC			mov	dx,word ptr cs:[3FCCh]	; (020A:3FCC=3347h)
020A:7E6A  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7E6F  74 03				je	$+5			; Jump if equal
020A:7E71  E8 FF0C				call	$-0F1h
020A:7E74  5A					pop	dx
020A:7E75  EB 2E				jmp	short $+30h
							                        ;* No entry point to code
020A:7E77  90					nop
020A:7E78  E8 FA37				call	$-5C6h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 224

020A:7E7B  56					push	si
020A:7E7C  33 F6				xor	si,si			; Zero register
020A:7E7E  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:7E82  74 0C				je	$+0Eh			; Jump if equal
020A:7E84  26: 39 1C				cmp	es:[si],bx
020A:7E87  77 07				ja	$+9			; Jump if above
020A:7E89  74 10				jz	$+12h			; Jump if zero
020A:7E8B  83 C6 19				add	si,19h
020A:7E8E  EB EE				jmp	short $-10h
							                        ;* No entry point to code
020A:7E90  83 FE 19				cmp	si,19h
020A:7E93  73 03				jae	$+5			; Jump if above or =
020A:7E95  BE 0019				mov	si,19h
020A:7E98  83 EE 19				sub	si,19h
020A:7E9B  52					push	dx
020A:7E9C  26: 8B 54 13				mov	dx,es:[si+13h]
020A:7EA0  E8 FEDD				call	$-120h
020A:7EA3  5A					pop	dx
020A:7EA4  5E					pop	si
020A:7EA5  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7EAA  C3					retn
							                        ;* No entry point to code
020A:7EAB  90					nop
020A:7EAC  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7EB2  75 0A				jne	$+0Ch			; Jump if not equal
020A:7EB4  50					push	ax
020A:7EB5  B8 4E4B				mov	ax,4E4Bh
020A:7EB8  8E C0				mov	es,ax
020A:7EBA  58					pop	ax
020A:7EBB  EB 59				jmp	short $+5Bh
							                        ;* No entry point to code
020A:7EBD  90					nop
020A:7EBE  E8 F9FD				call	$-600h
020A:7EC1  26: 3B 1E 216C			cmp	bx,word ptr es:[216Ch]	; (4E4B:216C=0FFFFh)
020A:7EC6  75 1C				jne	$+1Eh			; Jump if not equal
020A:7EC8  2E: 83 3E 3FCE FF			cmp	word ptr cs:[3FCEh],0FFFFh	; (020A:3FCE=0C600h)
020A:7ECE  74 14				je	$+16h			; Jump if equal
020A:7ED0  52					push	dx
020A:7ED1  2E: 8B 16 3FCE			mov	dx,word ptr cs:[3FCEh]	; (020A:3FCE=0C600h)
020A:7ED6  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7EDB  74 03				je	$+5			; Jump if equal
020A:7EDD  E8 FEA0				call	$-15Dh
020A:7EE0  5A					pop	dx
020A:7EE1  EB 2E				jmp	short $+30h
							                        ;* No entry point to code
020A:7EE3  90					nop
020A:7EE4  E8 F9CB				call	$-632h
020A:7EE7  56					push	si
020A:7EE8  33 F6				xor	si,si			; Zero register
020A:7EEA  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:7EEE  74 0C				je	$+0Eh			; Jump if equal
020A:7EF0  26: 39 1C				cmp	es:[si],bx
020A:7EF3  77 07				ja	$+9			; Jump if above
020A:7EF5  74 10				jz	$+12h			; Jump if zero
020A:7EF7  83 C6 19				add	si,19h
020A:7EFA  EB EE				jmp	short $-10h
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 225

020A:7EFC  83 FE 19				cmp	si,19h
020A:7EFF  73 03				jae	$+5			; Jump if above or =
020A:7F01  BE 0019				mov	si,19h
020A:7F04  83 EE 19				sub	si,19h
020A:7F07  52					push	dx
020A:7F08  26: 8B 54 0F				mov	dx,es:[si+0Fh]
020A:7F0C  E8 FE71				call	$-18Ch
020A:7F0F  5A					pop	dx
020A:7F10  5E					pop	si
020A:7F11  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7F16  C3					retn
							                        ;* No entry point to code
020A:7F17  90					nop
020A:7F18  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7F1E  75 0A				jne	$+0Ch			; Jump if not equal
020A:7F20  50					push	ax
020A:7F21  B8 5E4B				mov	ax,5E4Bh
020A:7F24  8E D8				mov	ds,ax
020A:7F26  58					pop	ax
020A:7F27  EB 55				jmp	short $+57h
							                        ;* No entry point to code
020A:7F29  90					nop
020A:7F2A  E8 F973				call	$-68Ah
020A:7F2D  3B 1E 216C				cmp	bx,word ptr ds:[216Ch]	; (5E4B:216C=223h)
020A:7F31  75 1C				jne	$+1Eh			; Jump if not equal
020A:7F33  2E: 83 3E 3FCA FF			cmp	word ptr cs:[3FCAh],0FFFFh	; (020A:3FCA=0C600h)
020A:7F39  74 14				je	$+16h			; Jump if equal
020A:7F3B  52					push	dx
020A:7F3C  2E: 8B 16 3FCA			mov	dx,word ptr cs:[3FCAh]	; (020A:3FCA=0C600h)
020A:7F41  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7F46  74 03				je	$+5			; Jump if equal
020A:7F48  E8 FE35				call	$-1C8h
020A:7F4B  5A					pop	dx
020A:7F4C  EB 2B				jmp	short $+2Dh
							                        ;* No entry point to code
020A:7F4E  90					nop
020A:7F4F  E8 F942				call	$-6BBh
020A:7F52  56					push	si
020A:7F53  33 F6				xor	si,si			; Zero register
020A:7F55  83 3C FF				cmp	word ptr [si],0FFFFh
020A:7F58  74 0B				je	$+0Dh			; Jump if equal
020A:7F5A  39 1C				cmp	[si],bx
020A:7F5C  77 07				ja	$+9			; Jump if above
020A:7F5E  74 10				jz	$+12h			; Jump if zero
020A:7F60  83 C6 19				add	si,19h
020A:7F63  EB F0				jmp	short $-0Eh
							                        ;* No entry point to code
020A:7F65  83 FE 19				cmp	si,19h
020A:7F68  73 03				jae	$+5			; Jump if above or =
020A:7F6A  BE 0019				mov	si,19h
020A:7F6D  83 EE 19				sub	si,19h
020A:7F70  52					push	dx
020A:7F71  8B 54 11				mov	dx,[si+11h]
020A:7F74  E8 FE09				call	$-1F4h
020A:7F77  5A					pop	dx
020A:7F78  5E					pop	si
020A:7F79  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 226

020A:7F7E  C3					retn
							                        ;* No entry point to code
020A:7F7F  90					nop
020A:7F80  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7F86  75 0A				jne	$+0Ch			; Jump if not equal
020A:7F88  50					push	ax
020A:7F89  B8 6E4B				mov	ax,6E4Bh
020A:7F8C  8E D8				mov	ds,ax
020A:7F8E  58					pop	ax
020A:7F8F  EB 55				jmp	short $+57h
							                        ;* No entry point to code
020A:7F91  90					nop
020A:7F92  E8 F90B				call	$-6F2h
020A:7F95  3B 1E 216C				cmp	bx,word ptr ds:[216Ch]	; (6E4B:216C=0FFFFh)
020A:7F99  75 1C				jne	$+1Eh			; Jump if not equal
020A:7F9B  2E: 83 3E 3FCC FF			cmp	word ptr cs:[3FCCh],0FFFFh	; (020A:3FCC=3347h)
020A:7FA1  74 14				je	$+16h			; Jump if equal
020A:7FA3  52					push	dx
020A:7FA4  2E: 8B 16 3FCC			mov	dx,word ptr cs:[3FCCh]	; (020A:3FCC=3347h)
020A:7FA9  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:7FAE  74 03				je	$+5			; Jump if equal
020A:7FB0  E8 FDCD				call	$-230h
020A:7FB3  5A					pop	dx
020A:7FB4  EB 2B				jmp	short $+2Dh
							                        ;* No entry point to code
020A:7FB6  90					nop
020A:7FB7  E8 F8DA				call	$-723h
020A:7FBA  56					push	si
020A:7FBB  33 F6				xor	si,si			; Zero register
020A:7FBD  83 3C FF				cmp	word ptr [si],0FFFFh
020A:7FC0  74 0B				je	$+0Dh			; Jump if equal
020A:7FC2  39 1C				cmp	[si],bx
020A:7FC4  77 07				ja	$+9			; Jump if above
020A:7FC6  74 10				jz	$+12h			; Jump if zero
020A:7FC8  83 C6 19				add	si,19h
020A:7FCB  EB F0				jmp	short $-0Eh
							                        ;* No entry point to code
020A:7FCD  83 FE 19				cmp	si,19h
020A:7FD0  73 03				jae	$+5			; Jump if above or =
020A:7FD2  BE 0019				mov	si,19h
020A:7FD5  83 EE 19				sub	si,19h
020A:7FD8  52					push	dx
020A:7FD9  8B 54 13				mov	dx,[si+13h]
020A:7FDC  E8 FDA1				call	$-25Ch
020A:7FDF  5A					pop	dx
020A:7FE0  5E					pop	si
020A:7FE1  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:7FE6  C3					retn
							                        ;* No entry point to code
020A:7FE7  90					nop
020A:7FE8  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:7FEE  75 0A				jne	$+0Ch			; Jump if not equal
020A:7FF0  50					push	ax
020A:7FF1  B8 4E4B				mov	ax,4E4Bh
020A:7FF4  8E D8				mov	ds,ax
020A:7FF6  58					pop	ax
020A:7FF7  EB 55				jmp	short $+57h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 227

							                        ;* No entry point to code
020A:7FF9  90					nop
020A:7FFA  E8 F8A3				call	$-75Ah
020A:7FFD  3B 1E 216C				cmp	bx,word ptr ds:[216Ch]	; (4E4B:216C=0FFFFh)
020A:8001  75 1C				jne	$+1Eh			; Jump if not equal
020A:8003  2E: 83 3E 3FCE FF			cmp	word ptr cs:[3FCEh],0FFFFh	; (020A:3FCE=0C600h)
020A:8009  74 14				je	$+16h			; Jump if equal
020A:800B  52					push	dx
020A:800C  2E: 8B 16 3FCE			mov	dx,word ptr cs:[3FCEh]	; (020A:3FCE=0C600h)
020A:8011  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8016  74 03				je	$+5			; Jump if equal
020A:8018  E8 FD65				call	$-298h
020A:801B  5A					pop	dx
020A:801C  EB 2B				jmp	short $+2Dh
							                        ;* No entry point to code
020A:801E  90					nop
020A:801F  E8 F872				call	$-78Bh
020A:8022  56					push	si
020A:8023  33 F6				xor	si,si			; Zero register
020A:8025  83 3C FF				cmp	word ptr [si],0FFFFh
020A:8028  74 0B				je	$+0Dh			; Jump if equal
020A:802A  39 1C				cmp	[si],bx
020A:802C  77 07				ja	$+9			; Jump if above
020A:802E  74 10				jz	$+12h			; Jump if zero
020A:8030  83 C6 19				add	si,19h
020A:8033  EB F0				jmp	short $-0Eh
							                        ;* No entry point to code
020A:8035  83 FE 19				cmp	si,19h
020A:8038  73 03				jae	$+5			; Jump if above or =
020A:803A  BE 0019				mov	si,19h
020A:803D  83 EE 19				sub	si,19h
020A:8040  52					push	dx
020A:8041  8B 54 0F				mov	dx,[si+0Fh]
020A:8044  E8 FD39				call	$-2C4h
020A:8047  5A					pop	dx
020A:8048  5E					pop	si
020A:8049  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:804E  C3					retn
							                        ;* No entry point to code
020A:804F  90					nop
020A:8050  FF D3				call	bx			;*
020A:8052  CB					retf
							                        ;* No entry point to code
020A:8053  90					nop
020A:8054  FF D5				call	bp			;*
020A:8056  CB					retf
							                        ;* No entry point to code
020A:8057  90					nop
020A:8058  2E: A1 3FB4				mov	ax,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:805C  CB					retf
							                        ;* No entry point to code
020A:805D  87 DB				xchg	bx,bx
020A:805F  90					nop
020A:8060  9C					pushf				; Push flags
020A:8061  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:8066  75 0C				jne	$+0Eh			; Jump if not equal
020A:8068  2E: 3B 06 3FB4			cmp	ax,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 228

020A:806D  74 05				je	$+7			; Jump if equal
020A:806F  8B D0				mov	dx,ax
020A:8071  E8 FD0C				call	$-2F1h
020A:8074  9D					popf				; Pop flags
020A:8075  CB					retf
							                        ;* No entry point to code
020A:8076  87 DB				xchg	bx,bx
020A:8078  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:807E  74 1F				je	$+21h			; Jump if equal
020A:8080  E8 FAC5				call	$-538h
020A:8083  2E: 80 3E 4775 00			cmp	byte ptr cs:[4775h],0	; (020A:4775=0C6h)
020A:8089  75 14				jne	$+16h			; Jump if not equal
020A:808B  E8 CD12				call	$-32EBh
020A:808E  E8 FAB7				call	$-546h
020A:8091  2E: 80 3E 4775 00			cmp	byte ptr cs:[4775h],0	; (020A:4775=0C6h)
020A:8097  75 06				jne	$+8			; Jump if not equal
020A:8099  BB 0002				mov	bx,2
020A:809C  E9 F135				jmp	$-0EC8h
							                        ;* No entry point to code
020A:809F  CB					retf
							                        ;* No entry point to code
020A:80A0  53					push	bx
020A:80A1  51					push	cx
020A:80A2  52					push	dx
020A:80A3  25 3FFF				and	ax,3FFFh
020A:80A6  8B F8				mov	di,ax
020A:80A8  57					push	di
020A:80A9  B1 0C				mov	cl,0Ch
020A:80AB  D3 EF				shr	di,cl			; Shift w/zeros fill
020A:80AD  D1 E7				shl	di,1			; Shift w/zeros fill
020A:80AF  03 3E 6BF5				add	di,word ptr ds:[6BF5h]	; (020A:6BF5=3EBh)
020A:80B3  8B 95 6AC2				mov	dx,word ptr ds:[6AC2h][di]	; (020A:6AC2=7E88h)
020A:80B7  E8 FCC6				call	$-337h
020A:80BA  5F					pop	di
020A:80BB  81 E7 0FFF				and	di,0FFFh
020A:80BF  B1 04				mov	cl,4
020A:80C1  D3 E7				shl	di,cl			; Shift w/zeros fill
020A:80C3  5A					pop	dx
020A:80C4  59					pop	cx
020A:80C5  5B					pop	bx
020A:80C6  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:80CB  C3					retn
020A:80CC  00					db	0
020A:80CD  00 00				add	[bx+si],al
020A:80CF  00 56 57				add	[bp+57h],dl
020A:80D2  51					push	cx
020A:80D3  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:80D8  06					push	es
020A:80D9  26: 8A 45 04				mov	al,es:[di+4]
020A:80DD  24 1F				and	al,1Fh
020A:80DF  3C 1F				cmp	al,1Fh
020A:80E1  74 17				je	$+19h			; Jump if equal
020A:80E3  FE C8				dec	al
020A:80E5  B4 2C				mov	ah,2Ch			; ','
020A:80E7  F6 E4				mul	ah			; ax = reg * al
020A:80E9  BE 36A8				mov	si,36A8h
020A:80EC  03 F0				add	si,ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 229

020A:80EE  BF 232C				mov	di,232Ch
020A:80F1  B9 0028				mov	cx,28h
020A:80F4  E8 F7C7				call	$-836h
020A:80F7  FC					cld				; Clear direction
020A:80F8  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:80FA  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:80FF  9C					pushf				; Push flags
020A:8100  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8105  5A					pop	dx
020A:8106  8E C2				mov	es,dx
020A:8108  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:810D  5A					pop	dx
020A:810E  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8110  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8115  74 03				je	$+5			; Jump if equal
020A:8117  E8 FC66				call	$-397h
020A:811A  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:811F  9D					popf				; Pop flags
020A:8120  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:8125  59					pop	cx
020A:8126  5F					pop	di
020A:8127  5E					pop	si
020A:8128  C3					retn
							                        ;* No entry point to code
020A:8129  87 DB				xchg	bx,bx
020A:812B  90					nop
020A:812C  F7 06 3D3C 0040			test	word ptr ds:[3D3Ch],40h	; (020A:3D3C=2477h)
020A:8132  75 34				jnz	$+36h			; Jump if not zero
020A:8134  26: 80 7C 01 21			cmp	byte ptr es:[si+1],21h	; '!'
020A:8139  74 25				je	$+27h			; Jump if equal
020A:813B  26: 80 7C 01 20			cmp	byte ptr es:[si+1],20h	; ' '
020A:8140  75 26				jne	$+28h			; Jump if not equal
020A:8142  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:8147  75 1F				jne	$+21h			; Jump if not equal
020A:8149  26: 83 7C 04 01			cmp	word ptr es:[si+4],1
020A:814E  75 18				jne	$+1Ah			; Jump if not equal
020A:8150  26: 83 7C 02 43			cmp	word ptr es:[si+2],43h
020A:8155  74 14				je	$+16h			; Jump if equal
020A:8157  26: 83 7C 02 45			cmp	word ptr es:[si+2],45h
020A:815C  75 0A				jne	$+0Ch			; Jump if not equal
020A:815E  EB 0B				jmp	short $+0Dh
							                        ;* No entry point to code
020A:8160  A1 232C				mov	ax,word ptr ds:[232Ch]	; (020A:232C=0)
020A:8163  80 FC 25				cmp	ah,25h			; '%'
020A:8166  74 03				je	$+5			; Jump if equal
020A:8168  E9 0188				jmp	$+18Bh
							                        ;* No entry point to code
020A:816B  53					push	bx
020A:816C  51					push	cx
020A:816D  52					push	dx
020A:816E  57					push	di
020A:816F  56					push	si
020A:8170  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8175  06					push	es
020A:8176  8B 1E 234C				mov	bx,word ptr ds:[234Ch]	; (020A:234C=0)
020A:817A  26: 80 7C 01 20			cmp	byte ptr es:[si+1],20h	; ' '
020A:817F  75 12				jne	$+14h			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 230

020A:8181  8B 1E 2334				mov	bx,word ptr ds:[2334h]	; (020A:2334=0)
020A:8185  A1 233A				mov	ax,word ptr ds:[233Ah]	; (020A:233A=0)
020A:8188  3D 0006				cmp	ax,6
020A:818B  77 06				ja	$+8			; Jump if above
020A:818D  B1 0C				mov	cl,0Ch
020A:818F  D3 E0				shl	ax,cl			; Shift w/zeros fill
020A:8191  03 D8				add	bx,ax
020A:8193  A1 2338				mov	ax,word ptr ds:[2338h]	; (020A:2338=0)
020A:8196  3D 0000				cmp	ax,0
020A:8199  75 15				jne	$+17h			; Jump if not equal
020A:819B  83 FB 00				cmp	bx,0
020A:819E  75 03				jne	$+5			; Jump if not equal
020A:81A0  E9 0120				jmp	$+123h
							                        ;* No entry point to code
020A:81A3  3B 1E 1CE4				cmp	bx,word ptr ds:[1CE4h]	; (020A:1CE4=0)
020A:81A7  75 07				jne	$+9			; Jump if not equal
020A:81A9  80 3E 1F85 05			cmp	byte ptr ds:[1F85h],5	; (020A:1F85=0)
020A:81AE  74 F0				je	$-0Eh			; Jump if equal
020A:81B0  89 1E 2FD6				mov	word ptr ds:[2FD6h],bx	; (020A:2FD6=3A43h)
020A:81B4  A3 2FD8				mov	word ptr ds:[2FD8h],ax	; (020A:2FD8=505Ch)
020A:81B7  BF 2FD6				mov	di,2FD6h
020A:81BA  E8 F701				call	$-8FCh
020A:81BD  E8 2AFC				call	$+2AFFh
020A:81C0  72 03				jc	$+5			; Jump if carry Set
020A:81C2  E9 00FE				jmp	$+101h
							                        ;* No entry point to code
020A:81C5  A1 2338				mov	ax,word ptr ds:[2338h]	; (020A:2338=0)
020A:81C8  BA 0001				mov	dx,1
020A:81CB  E8 E212				call	$-1DEBh
020A:81CE  72 05				jc	$+7			; Jump if carry Set
020A:81D0  EB 44				jmp	short $+46h
020A:81D2  E9 00EE				jmp	$+0F1h
							                        ;* No entry point to code
020A:81D5  26: 80 4D 05 30			or	byte ptr es:[di+5],30h	; '0'
020A:81DA  80 3E 17A2 04			cmp	byte ptr ds:[17A2h],4	; (020A:17A2=0)
020A:81DF  72 F1				jb	$-0Dh			; Jump if below
020A:81E1  26: 80 4D 04 40			or	byte ptr es:[di+4],40h	; '@'
020A:81E6  9A 1481:7CE0				call	far ptr $-506h
020A:81EB  72 E5				jc	$-19h			; Jump if carry Set
020A:81ED  57					push	di
020A:81EE  8B F7				mov	si,di
020A:81F0  BF 41A1				mov	di,41A1h
020A:81F3  B9 007F				mov	cx,7Fh
020A:81F6  8C C0				mov	ax,es
020A:81F8  1E					push	ds
020A:81F9  07					pop	es
020A:81FA  8E D8				mov	ds,ax
020A:81FC  FC					cld				; Clear direction
020A:81FD  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:81FF  8C C0				mov	ax,es
020A:8201  1E					push	ds
020A:8202  07					pop	es
020A:8203  8E D8				mov	ds,ax
020A:8205  5E					pop	si
020A:8206  E8 07A7				call	$+7AAh
020A:8209  BF 41A1				mov	di,41A1h
020A:820C  80 65 05 FC				and	byte ptr [di+5],0FCh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 231

020A:8210  80 4D 05 02				or	byte ptr [di+5],2
020A:8214  EB 49				jmp	short $+4Bh
							                        ;* No entry point to code
020A:8216  3D FFF0				cmp	ax,0FFF0h
020A:8219  74 1F				je	$+21h			; Jump if equal
020A:821B  8E C3				mov	es,bx
020A:821D  8B F0				mov	si,ax
020A:821F  26: 83 3C 00				cmp	word ptr es:[si],0
020A:8223  74 12				je	$+14h			; Jump if equal
020A:8225  B9 000A				mov	cx,0Ah
020A:8228  26: 80 3C 20				cmp	byte ptr es:[si],20h	; ' '
020A:822C  72 09				jb	$+0Bh			; Jump if below
020A:822E  26: 80 3C 7E				cmp	byte ptr es:[si],7Eh	; '~'
020A:8232  77 03				ja	$+5			; Jump if above
020A:8234  46					inc	si
020A:8235  E2 F1				loop	$-0Dh			; Loop if cx > 0

020A:8237  E9 0089				jmp	$+8Ch
							                        ;* No entry point to code
020A:823A  BF 41A1				mov	di,41A1h
020A:823D  89 1D				mov	[di],bx
020A:823F  89 45 02				mov	[di+2],ax
020A:8242  B0 40				mov	al,40h			; '@'
020A:8244  80 3E 17A7 06			cmp	byte ptr ds:[17A7h],6	; (020A:17A7=0)
020A:8249  72 09				jb	$+0Bh			; Jump if below
020A:824B  80 3E 17A2 04			cmp	byte ptr ds:[17A2h],4	; (020A:17A2=0)
020A:8250  73 02				jae	$+4			; Jump if above or =
020A:8252  B0 00				mov	al,0
020A:8254  88 45 04				mov	[di+4],al
020A:8257  C6 45 05 32				mov	byte ptr [di+5],32h	; '2'
020A:825B  C6 45 06 00				mov	byte ptr [di+6],0
020A:825F  A1 232C				mov	ax,word ptr ds:[232Ch]	; (020A:232C=0)
020A:8262  BD 2915				mov	bp,2915h
020A:8265  9A 1481:0124				call	far ptr $+7EBFh
020A:826A  BD 2911				mov	bp,2911h
020A:826D  83 C7 07				add	di,7
020A:8270  B9 2920				mov	cx,2920h
020A:8273  81 E9 2911				sub	cx,2911h
020A:8277  9A 1481:6BA8				call	far ptr $-16CFh
020A:827C  3C 00				cmp	al,0
020A:827E  74 1B				je	$+1Dh			; Jump if equal
020A:8280  55					push	bp
020A:8281  53					push	bx
020A:8282  BD 291C				mov	bp,291Ch
020A:8285  3E: C6 46 00 5F			mov	byte ptr ds:[bp],5Fh	; '_'
020A:828A  45					inc	bp
020A:828B  32 E4				xor	ah,ah			; Zero register
020A:828D  33 DB				xor	bx,bx			; Zero register
020A:828F  9A 1481:0300				call	far ptr $-7F8Fh
020A:8294  3E: C6 46 00 20			mov	byte ptr ds:[bp],20h	; ' '
020A:8299  5B					pop	bx
020A:829A  5D					pop	bp
020A:829B  3E: 8A 46 00				mov	al,ds:[bp]
020A:829F  88 05				mov	[di],al
020A:82A1  45					inc	bp
020A:82A2  47					inc	di
020A:82A3  E2 F6				loop	$-8			; Loop if cx > 0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 232


020A:82A5  E8 04B8				call	$+4BBh
020A:82A8  BD 291C				mov	bp,291Ch
020A:82AB  3E: C6 46 00 72			mov	byte ptr ds:[bp],72h	; 'r'
020A:82B0  45					inc	bp
020A:82B1  3E: C6 46 00 79			mov	byte ptr ds:[bp],79h	; 'y'
020A:82B6  45					inc	bp
020A:82B7  3E: C6 46 00 20			mov	byte ptr ds:[bp],20h	; ' '
020A:82BC  45					inc	bp
020A:82BD  81 FD 2920				cmp	bp,2920h
020A:82C1  72 F4				jb	$-0Ah			; Jump if below
020A:82C3  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:82C8  9C					pushf				; Push flags
020A:82C9  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:82CE  5A					pop	dx
020A:82CF  8E C2				mov	es,dx
020A:82D1  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:82D6  5A					pop	dx
020A:82D7  75 0A				jnz	$+0Ch			; Jump if not zero
020A:82D9  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:82DE  74 03				je	$+5			; Jump if equal
020A:82E0  E8 FA9D				call	$-560h
020A:82E3  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:82E8  9D					popf				; Pop flags
020A:82E9  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:82EE  5E					pop	si
020A:82EF  5F					pop	di
020A:82F0  5A					pop	dx
020A:82F1  59					pop	cx
020A:82F2  5B					pop	bx
020A:82F3  C3					retn
							                        ;* No entry point to code
020A:82F4  8B F7				mov	si,di
020A:82F6  E8 06B7				call	$+6BAh
020A:82F9  8B 1E 216C				mov	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:82FD  BA 0001				mov	dx,1
020A:8300  A8 02				test	al,2
020A:8302  75 03				jnz	$+5			; Jump if not zero
020A:8304  BA 0004				mov	dx,4
020A:8307  06					push	es
020A:8308  8E 06 2170				mov	es,word ptr ds:[2170h]	; (020A:2170=0E8FBh)
020A:830C  8B 3E 2172				mov	di,word ptr ds:[2172h]	; (020A:2172=59h)
020A:8310  A8 01				test	al,1
020A:8312  74 04				jz	$+6			; Jump if zero
020A:8314  26: 8B 5D 02				mov	bx,es:[di+2]
020A:8318  26: 8B 05				mov	ax,es:[di]
020A:831B  07					pop	es
020A:831C  E8 E0C1				call	$-1F3Ch
020A:831F  73 0F				jnc	$+11h			; Jump if carry=0
020A:8321  8B F7				mov	si,di
020A:8323  E8 068A				call	$+68Dh
020A:8326  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:8329  40					inc	ax
020A:832A  A3 3DAB				mov	word ptr ds:[3DABh],ax	; (020A:3DAB=80DBh)
020A:832D  A3 3DAD				mov	word ptr ds:[3DADh],ax	; (020A:3DAD=8B3Eh)
020A:8330  C3					retn
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 233

020A:8331  EC					in	al,dx			; port 0, DMA-1 bas&add ch 0
020A:8332  4F					dec	di
020A:8333  F9					stc				; Set carry flag
020A:8334  4F					dec	di
020A:8335  06					push	es
020A:8336  50					push	ax
020A:8337  15 2450				adc	ax,2450h
020A:833A  50					push	ax
020A:833B  4E					dec	si
020A:833C  50					push	ax
020A:833D  73 50				jnc	$+52h			; Jump if carry=0
020A:833F  AB					stosw				; Store ax to es:[di]
020A:8340  50					push	ax
020A:8341  DD					db	0DDh
020A:8342  50					push	ax
020A:8343  DD					db	0DDh
020A:8344  50					push	ax
020A:8345  DD					db	0DDh
020A:8346  50					push	ax
020A:8347  EB 50				jmp	short $+52h
							                        ;* No entry point to code
020A:8349  07					pop	es
020A:834A  51					push	cx
020A:834B  0F			;*		pop	cs			; Dangerous-8088 only
020A:834B  0F					db	0Fh
020A:834C  51					push	cx
020A:834D  51					push	cx
020A:834E  53					push	bx
020A:834F  51					push	cx
020A:8350  53					push	bx
020A:8351  17					pop	ss
020A:8352  51					push	cx
020A:8353  17					pop	ss
020A:8354  51					push	cx
020A:8355  17					pop	ss
020A:8356  51					push	cx
020A:8357  17					pop	ss
020A:8358  51					push	cx
020A:8359  51					push	cx
020A:835A  53					push	bx
020A:835B  51					push	cx
020A:835C  53					push	bx
020A:835D  D6					db	0D6h
020A:835E  51					push	cx
020A:835F  DE					db	0DEh
020A:8360  51					push	cx
020A:8361  F9					stc				; Set carry flag
020A:8362  51					push	cx
020A:8363  01 52 09				add	[bp+si+9],dx
020A:8366  52					push	dx
020A:8367  2E					db	2Eh
020A:8368  52					push	dx
020A:8369  87 DB				xchg	bx,bx
020A:836B  90					nop
020A:836C  50					push	ax
020A:836D  53					push	bx
020A:836E  57					push	di
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 234

020A:836F  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8374  06					push	es
020A:8375  26: 8A 45 05				mov	al,es:[di+5]
020A:8379  24 0F				and	al,0Fh
020A:837B  75 03				jnz	$+5			; Jump if not zero
020A:837D  E9 03A1				jmp	$+3A4h
							                        ;* No entry point to code
020A:8380  B0 2E				mov	al,2Eh			; '.'
020A:8382  26: 80 7D 08 3F			cmp	byte ptr es:[di+8],3Fh	; '?'
020A:8387  74 0C				je	$+0Eh			; Jump if equal
020A:8389  B0 FA				mov	al,0FAh
020A:838B  F7 06 3D3E 0080			test	word ptr ds:[3D3Eh],80h	; (020A:3D3E=3E80h)
020A:8391  74 02				jz	$+4			; Jump if zero
020A:8393  B0 2C				mov	al,2Ch			; ','
020A:8395  A2 19D5				mov	byte ptr ds:[19D5h],al	; (020A:19D5=0C3h)
020A:8398  80 3E 2313 00			cmp	byte ptr ds:[2313h],0	; (020A:2313=0)
020A:839D  74 03				je	$+5			; Jump if equal
020A:839F  A2 19EA				mov	byte ptr ds:[19EAh],al	; (020A:19EA=0Ah)
020A:83A2  26: 8A 45 09				mov	al,es:[di+9]
020A:83A6  3C 1B				cmp	al,1Bh
020A:83A8  76 03				jbe	$+5			; Jump if below or =
020A:83AA  E9 02F1				jmp	$+2F4h
							                        ;* No entry point to code
020A:83AD  8A D8				mov	bl,al
020A:83AF  32 FF				xor	bh,bh			; Zero register
020A:83B1  D1 E3				shl	bx,1			; Shift w/zeros fill
020A:83B3  81 C3 4F61				add	bx,4F61h
020A:83B7  2E: 8B 1F				mov	bx,cs:[bx]
020A:83BA  FF E3				jmp	bx			;*
							                        ;* No entry point to code
020A:83BC  C6 06 2187 00			mov	byte ptr ds:[2187h],0	; (020A:2187=0E8h)
020A:83C1  C6 06 218A 01			mov	byte ptr ds:[218Ah],1	; (020A:218A=1Eh)
020A:83C6  E9 0358				jmp	$+35Bh
							                        ;* No entry point to code
020A:83C9  C6 06 2187 05			mov	byte ptr ds:[2187h],5	; (020A:2187=0E8h)
020A:83CE  C6 06 45A4 04			mov	byte ptr ds:[45A4h],4	; (020A:45A4=77h)
020A:83D3  E9 034B				jmp	$+34Eh
							                        ;* No entry point to code
020A:83D6  F6 06 22CF 05			test	byte ptr ds:[22CFh],5	; (020A:22CF=0)
020A:83DB  74 05				jz	$+7			; Jump if zero
020A:83DD  C6 06 3C2C 01			mov	byte ptr ds:[3C2Ch],1	; (020A:3C2C=0F9h)
020A:83E2  E9 033C				jmp	$+33Fh
							                        ;* No entry point to code
020A:83E5  9A 1481:5113				call	far ptr $-32D2h
020A:83EA  B0 03				mov	al,3
020A:83EC  9A 1481:2790				call	far ptr $-5C5Ch
020A:83F1  E9 032D				jmp	$+330h
							                        ;* No entry point to code
020A:83F4  C6 06 2187 00			mov	byte ptr ds:[2187h],0	; (020A:2187=0E8h)
020A:83F9  C6 06 218A 01			mov	byte ptr ds:[218Ah],1	; (020A:218A=1Eh)
020A:83FE  F6 06 2320 04			test	byte ptr ds:[2320h],4	; (020A:2320=0)
020A:8403  74 16				jz	$+18h			; Jump if zero
020A:8405  80 26 2320 CF			and	byte ptr ds:[2320h],0CFh	; (020A:2320=0)
020A:840A  80 26 2320 FC			and	byte ptr ds:[2320h],0FCh	; (020A:2320=0)
020A:840F  80 26 2320 FB			and	byte ptr ds:[2320h],0FBh	; (020A:2320=0)
020A:8414  B0 42				mov	al,42h			; 'B'
020A:8416  9A 1481:2790				call	far ptr $-5C86h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 235

020A:841B  E9 0303				jmp	$+306h
							                        ;* No entry point to code
020A:841E  C6 06 2187 00			mov	byte ptr ds:[2187h],0	; (020A:2187=0E8h)
020A:8423  C6 06 218A 01			mov	byte ptr ds:[218Ah],1	; (020A:218A=1Eh)
020A:8428  F6 06 2320 04			test	byte ptr ds:[2320h],4	; (020A:2320=0)
020A:842D  75 11				jnz	$+13h			; Jump if not zero
020A:842F  80 0E 2320 04			or	byte ptr ds:[2320h],4	; (020A:2320=0)
020A:8434  80 0E 2320 03			or	byte ptr ds:[2320h],3	; (020A:2320=0)
020A:8439  B0 41				mov	al,41h			; 'A'
020A:843B  9A 1481:2790				call	far ptr $-5CABh
020A:8440  E9 02DE				jmp	$+2E1h
							                        ;* No entry point to code
020A:8443  26: 8B 45 0A				mov	ax,es:[di+0Ah]
020A:8447  09 06 3D3C				or	word ptr ds:[3D3Ch],ax	; (020A:3D3C=2477h)
020A:844B  26: 8A 45 0C				mov	al,es:[di+0Ch]
020A:844F  32 E4				xor	ah,ah			; Zero register
020A:8451  09 06 3D3E				or	word ptr ds:[3D3Eh],ax	; (020A:3D3E=3E80h)
020A:8455  26: 8B 45 0D				mov	ax,es:[di+0Dh]
020A:8459  21 06 3D3C				and	word ptr ds:[3D3Ch],ax	; (020A:3D3C=2477h)
020A:845D  26: 8A 45 0F				mov	al,es:[di+0Fh]
020A:8461  B4 FF				mov	ah,0FFh
020A:8463  21 06 3D3E				and	word ptr ds:[3D3Eh],ax	; (020A:3D3E=3E80h)
020A:8467  B0 00				mov	al,0
020A:8469  F7 06 3D3C 0002			test	word ptr ds:[3D3Ch],2	; (020A:3D3C=2477h)
020A:846F  74 02				jz	$+4			; Jump if zero
020A:8471  B0 01				mov	al,1
020A:8473  9A 1481:6CB0				call	far ptr $-17C3h
020A:8478  E9 02A6				jmp	$+2A9h
							                        ;* No entry point to code
020A:847B  26: 8B 45 0A				mov	ax,es:[di+0Ah]
020A:847F  A3 234C				mov	word ptr ds:[234Ch],ax	; (020A:234C=0)
020A:8482  26: 8B 45 0C				mov	ax,es:[di+0Ch]
020A:8486  A3 234A				mov	word ptr ds:[234Ah],ax	; (020A:234A=0)
020A:8489  26: 8B 45 0E				mov	ax,es:[di+0Eh]
020A:848D  A3 232C				mov	word ptr ds:[232Ch],ax	; (020A:232C=0)
020A:8490  26: 8B 45 10				mov	ax,es:[di+10h]
020A:8494  A3 2330				mov	word ptr ds:[2330h],ax	; (020A:2330=0)
020A:8497  26: 8B 45 12				mov	ax,es:[di+12h]
020A:849B  A3 233C				mov	word ptr ds:[233Ch],ax	; (020A:233C=0)
020A:849E  26: 8B 45 14				mov	ax,es:[di+14h]
020A:84A2  A3 2340				mov	word ptr ds:[2340h],ax	; (020A:2340=0)
020A:84A5  C6 06 230C 05			mov	byte ptr ds:[230Ch],5	; (020A:230C=0)
020A:84AA  E9 0274				jmp	$+277h
							                        ;* No entry point to code
020A:84AD  26: 8B 5D 0A				mov	bx,es:[di+0Ah]
020A:84B1  89 1E 3D1C				mov	word ptr ds:[3D1Ch],bx	; (020A:3D1C=412Ch)
020A:84B5  A2 3D1E				mov	byte ptr ds:[3D1Eh],al	; (020A:3D1E=0BBh)
020A:84B8  E9 0266				jmp	$+269h
							                        ;* No entry point to code
020A:84BB  F7 06 3D3C 4000			test	word ptr ds:[3D3Ch],4000h	; (020A:3D3C=2477h)
020A:84C1  75 0C				jnz	$+0Eh			; Jump if not zero
020A:84C3  81 0E 3D3C 4000			or	word ptr ds:[3D3Ch],4000h	; (020A:3D3C=2477h)
020A:84C9  C7 06 3D3A BFFF			mov	word ptr ds:[3D3Ah],0BFFFh	; (020A:3D3A=543Ch)
020A:84CF  C6 06 218B 00			mov	byte ptr ds:[218Bh],0	; (020A:218B=0Eh)
020A:84D4  E9 024A				jmp	$+24Dh
							                        ;* No entry point to code
020A:84D7  C6 06 3C2D 01			mov	byte ptr ds:[3C2Dh],1	; (020A:3C2D=0EBh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 236

020A:84DC  E9 0242				jmp	$+245h
							                        ;* No entry point to code
020A:84DF  C6 06 3C2E 01			mov	byte ptr ds:[3C2Eh],1	; (020A:3C2E=1)
020A:84E4  E9 023A				jmp	$+23Dh
							                        ;* No entry point to code
020A:84E7  FF 36 2FD4				push	word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:84EB  FF 36 2FC6				push	word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:84EF  FF 36 1D8B				push	word ptr ds:[1D8Bh]	; (020A:1D8B=0)
020A:84F3  C6 06 3C29 01			mov	byte ptr ds:[3C29h],1	; (020A:3C29=1)
020A:84F8  26: 8B 45 0C				mov	ax,es:[di+0Ch]
020A:84FC  A3 2FD4				mov	word ptr ds:[2FD4h],ax	; (020A:2FD4=3D53h)
020A:84FF  26: 8B 45 0A				mov	ax,es:[di+0Ah]
020A:8503  A3 2FC6				mov	word ptr ds:[2FC6h],ax	; (020A:2FC6=4F4Dh)
020A:8506  26: 8A 45 0E				mov	al,es:[di+0Eh]
020A:850A  A2 3C2A				mov	byte ptr ds:[3C2Ah],al	; (020A:3C2A=72h)
020A:850D  26: 8A 45 09				mov	al,es:[di+9]
020A:8511  B7 20				mov	bh,20h			; ' '
020A:8513  A8 01				test	al,1
020A:8515  74 03				jz	$+5			; Jump if zero
020A:8517  80 CF 10				or	bh,10h
020A:851A  C6 06 1D5C 00			mov	byte ptr ds:[1D5Ch],0	; (020A:1D5C=0)
020A:851F  C6 06 1D5D 00			mov	byte ptr ds:[1D5Dh],0	; (020A:1D5D=0)
020A:8524  3C 11				cmp	al,11h
020A:8526  77 05				ja	$+7			; Jump if above
020A:8528  C6 06 1D5C 4F			mov	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:852D  B2 00				mov	dl,0
020A:852F  E8 F38C				call	$-0C71h
020A:8532  BE 3C26				mov	si,3C26h
020A:8535  9A 1481:3B30				call	far ptr $-4A05h
020A:853A  C6 06 3C29 02			mov	byte ptr ds:[3C29h],2	; (020A:3C29=1)
020A:853F  C6 06 3C2A 00			mov	byte ptr ds:[3C2Ah],0	; (020A:3C2A=72h)
020A:8544  C6 06 1D5C 00			mov	byte ptr ds:[1D5Ch],0	; (020A:1D5C=0)
020A:8549  C6 06 1D5D 00			mov	byte ptr ds:[1D5Dh],0	; (020A:1D5D=0)
020A:854E  8F 06 1D8B				pop	word ptr ds:[1D8Bh]	; (020A:1D8B=0)
020A:8552  8F 06 2FC6				pop	word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:8556  8F 06 2FD4				pop	word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:855A  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:855F  9C					pushf				; Push flags
020A:8560  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8565  5A					pop	dx
020A:8566  8E C2				mov	es,dx
020A:8568  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:856D  5A					pop	dx
020A:856E  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8570  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8575  74 03				je	$+5			; Jump if equal
020A:8577  E8 F806				call	$-7F7h
020A:857A  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:857F  9D					popf				; Pop flags
020A:8580  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:8585  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:858A  06					push	es
020A:858B  BA 0001				mov	dx,1
020A:858E  26: 8A 45 09				mov	al,es:[di+9]
020A:8592  3C 11				cmp	al,11h
020A:8594  77 03				ja	$+5			; Jump if above
020A:8596  BA 0004				mov	dx,4
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 237

020A:8599  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:859C  8B 1E 216C				mov	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:85A0  E8 DE3D				call	$-21C0h
020A:85A3  E9 017B				jmp	$+17Eh
							                        ;* No entry point to code
020A:85A6  9A 1481:5298				call	far ptr $-330Eh
020A:85AB  E9 0173				jmp	$+176h
							                        ;* No entry point to code
020A:85AE  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:85B3  75 11				jne	$+13h			; Jump if not equal
020A:85B5  26: 8A 45 06				mov	al,es:[di+6]
020A:85B9  B4 13				mov	ah,13h
020A:85BB  BB 0007				mov	bx,7
020A:85BE  BE 3280				mov	si,3280h
020A:85C1  9A 1481:694C				call	far ptr $-1C75h
020A:85C6  E9 0158				jmp	$+15Bh
							                        ;* No entry point to code
020A:85C9  9A 1481:7D10				call	far ptr $-8B9h
020A:85CE  E9 0151				jmp	$+154h
							                        ;* No entry point to code
020A:85D1  C7 06 1978 0000			mov	word ptr ds:[1978h],0	; (020A:1978=20Ah)
020A:85D7  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:85D9  C7 06 1978 FFFF			mov	word ptr ds:[1978h],0FFFFh	; (020A:1978=20Ah)
020A:85DF  80 3E 17A3 02			cmp	byte ptr ds:[17A3h],2	; (020A:17A3=0)
020A:85E4  75 05				jne	$+7			; Jump if not equal
020A:85E6  26: 80 4D 04 80			or	byte ptr es:[di+4],80h
020A:85EB  C6 06 3D31 01			mov	byte ptr ds:[3D31h],1	; (020A:3D31=0D3h)
020A:85F0  BD 1A5B				mov	bp,1A5Bh
020A:85F3  BE 2F35				mov	si,2F35h
020A:85F6  9A 1481:6800				call	far ptr $-1DF6h
020A:85FB  E9 0123				jmp	$+126h
							                        ;* No entry point to code
020A:85FE  26: 8B 45 10				mov	ax,es:[di+10h]
020A:8602  A3 4767				mov	word ptr ds:[4767h],ax	; (020A:4767=675h)
020A:8605  26: 8B 5D 0E				mov	bx,es:[di+0Eh]
020A:8609  89 1E 4765				mov	word ptr ds:[4765h],bx	; (020A:4765=3B3Ch)
020A:860D  89 1E 476B				mov	word ptr ds:[476Bh],bx	; (020A:476B=8C3h)
020A:8611  26: 8B 45 12				mov	ax,es:[di+12h]
020A:8615  A3 4769				mov	word ptr ds:[4769h],ax	; (020A:4769=8346h)
020A:8618  26: 8B 5D 0A				mov	bx,es:[di+0Ah]
020A:861C  26: 8B 45 0C				mov	ax,es:[di+0Ch]
020A:8620  FF 36 2FD2				push	word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:8624  FF 36 2FD4				push	word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:8628  8A 16 3C2B				mov	dl,byte ptr ds:[3C2Bh]	; (020A:3C2B=3)
020A:862C  52					push	dx
020A:862D  BA 0001				mov	dx,1
020A:8630  C6 06 3C2B 01			mov	byte ptr ds:[3C2Bh],1	; (020A:3C2B=3)
020A:8635  55					push	bp
020A:8636  BD 3010				mov	bp,3010h
020A:8639  90					nop
020A:863A  0E E8 FA16				callf	$-5E6h
020A:863E  5D					pop	bp
020A:863F  5A					pop	dx
020A:8640  88 16 3C2B				mov	byte ptr ds:[3C2Bh],dl	; (020A:3C2B=3)
020A:8644  8F 06 2FD4				pop	word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:8648  8F 06 2FD2				pop	word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 238

020A:864C  73 47				jnc	$+49h			; Jump if carry=0
020A:864E  26: 8A 4D 04				mov	cl,es:[di+4]
020A:8652  80 E1 1F				and	cl,1Fh
020A:8655  80 F9 1F				cmp	cl,1Fh
020A:8658  75 07				jne	$+9			; Jump if not equal
020A:865A  26: 80 7D 09 22			cmp	byte ptr es:[di+9],22h	; '"'
020A:865F  74 2B				je	$+2Dh			; Jump if equal
020A:8661  50					push	ax
020A:8662  BB 2F9C				mov	bx,2F9Ch
020A:8665  26: 8A 45 05				mov	al,es:[di+5]
020A:8669  25 000F				and	ax,0Fh
020A:866C  D7					xlat				; al=[al+[bx]] table
020A:866D  0A C0				or	al,al			; Zero ?
020A:866F  75 04				jnz	$+6			; Jump if not zero
020A:8671  26: 8A 45 06				mov	al,es:[di+6]
020A:8675  03 F8				add	di,ax
020A:8677  58					pop	ax
020A:8678  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (2450:0000=2020h)
020A:867D  73 16				jae	$+18h			; Jump if above or =
020A:867F  26: 3B 1D				cmp	bx,es:[di]
020A:8682  75 11				jne	$+13h			; Jump if not equal
020A:8684  26: 3B 45 02				cmp	ax,es:[di+2]
020A:8688  75 0B				jne	$+0Dh			; Jump if not equal
020A:868A  EB C2				jmp	short $-3Ch
020A:868C  26: 8B 45 0A				mov	ax,es:[di+0Ah]
020A:8690  A3 4763				mov	word ptr ds:[4763h],ax	; (020A:4763=8018h)
020A:8693  EB 06				jmp	short $+8
020A:8695  C7 06 4767 0000			mov	word ptr ds:[4767h],0	; (020A:4767=675h)
020A:869B  E9 0083				jmp	$+86h
020A:869E  3C 20				cmp	al,20h			; ' '
020A:86A0  72 7F				jb	$+81h			; Jump if below
020A:86A2  3C 27				cmp	al,27h			; '''
020A:86A4  76 1A				jbe	$+1Ch			; Jump if below or =
020A:86A6  3C 40				cmp	al,40h			; '@'
020A:86A8  72 14				jb	$+16h			; Jump if below
020A:86AA  3C 44				cmp	al,44h			; 'D'
020A:86AC  76 19				jbe	$+1Bh			; Jump if below or =
020A:86AE  3C 80				cmp	al,80h
020A:86B0  72 0C				jb	$+0Eh			; Jump if below
020A:86B2  3C 8C				cmp	al,8Ch
020A:86B4  76 26				jbe	$+28h			; Jump if below or =
020A:86B6  3C 90				cmp	al,90h
020A:86B8  72 04				jb	$+6			; Jump if below
020A:86BA  3C 96				cmp	al,96h
020A:86BC  76 49				jbe	$+4Bh			; Jump if below or =
020A:86BE  EB 61				jmp	short $+63h
020A:86C0  9A 1481:4344				call	far ptr $-437Ch
020A:86C5  EB 5A				jmp	short $+5Ch
020A:86C7  F7 06 3D3C 4000			test	word ptr ds:[3D3Ch],4000h	; (020A:3D3C=2477h)
020A:86CD  75 0B				jnz	$+0Dh			; Jump if not zero
020A:86CF  26: 8B 5D 0A				mov	bx,es:[di+0Ah]
020A:86D3  89 1E 218C				mov	word ptr ds:[218Ch],bx	; (020A:218C=0FF2Eh)
020A:86D7  A2 218B				mov	byte ptr ds:[218Bh],al	; (020A:218B=0Eh)
020A:86DA  EB 45				jmp	short $+47h
020A:86DC  26: 8B 5D 0A				mov	bx,es:[di+0Ah]
020A:86E0  BE 232C				mov	si,232Ch
020A:86E3  24 0F				and	al,0Fh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 239

020A:86E5  3C 07				cmp	al,7
020A:86E7  72 12				jb	$+14h			; Jump if below
020A:86E9  BE 2348				mov	si,2348h
020A:86EC  2C 07				sub	al,7
020A:86EE  74 0D				jz	$+0Fh			; Jump if zero
020A:86F0  3C 02				cmp	al,2
020A:86F2  77 09				ja	$+0Bh			; Jump if above
020A:86F4  C6 06 230C 03			mov	byte ptr ds:[230Ch],3	; (020A:230C=0)
020A:86F9  EB 02				jmp	short $+4
020A:86FB  D0 E0				shl	al,1			; Shift w/zeros fill
020A:86FD  D0 E0				shl	al,1			; Shift w/zeros fill
020A:86FF  32 E4				xor	ah,ah			; Zero register
020A:8701  03 F0				add	si,ax
020A:8703  89 1C				mov	[si],bx
020A:8705  EB 1A				jmp	short $+1Ch
020A:8707  2C 90				sub	al,90h
020A:8709  32 E4				xor	ah,ah			; Zero register
020A:870B  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:870D  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:870F  BE 232C				mov	si,232Ch
020A:8712  03 F0				add	si,ax
020A:8714  26: 8B 5D 0A				mov	bx,es:[di+0Ah]
020A:8718  89 1C				mov	[si],bx
020A:871A  26: 8B 5D 0C				mov	bx,es:[di+0Ch]
020A:871E  89 5C 02				mov	[si+2],bx
020A:8721  F8					clc				; Clear carry flag
020A:8722  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:8727  9C					pushf				; Push flags
020A:8728  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:872D  5A					pop	dx
020A:872E  8E C2				mov	es,dx
020A:8730  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:8735  5A					pop	dx
020A:8736  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8738  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:873D  74 03				je	$+5			; Jump if equal
020A:873F  E8 F63E				call	$-9BFh
020A:8742  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8747  9D					popf				; Pop flags
020A:8748  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:874D  5F					pop	di
020A:874E  5B					pop	bx
020A:874F  58					pop	ax
020A:8750  C3					retn
020A:8751  00					db	0
020A:8752  00					db	0
020A:8753  00					db	0
020A:8754  00					db	0
020A:8755  00					db	0
020A:8756  00					db	0
020A:8757  00					db	0
020A:8758  00					db	0
020A:8759  00					db	0
020A:875A  00					db	0
020A:875B  00					db	0
020A:875C  00					db	0
020A:875D  00 00				add	[bx+si],al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 240

020A:875F  00 50 53				add	[bx+si+53h],dl
020A:8762  51					push	cx
020A:8763  52					push	dx
020A:8764  56					push	si
020A:8765  57					push	di
020A:8766  55					push	bp
020A:8767  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:876C  1E					push	ds
020A:876D  E8 F130				call	$-0ECDh
020A:8770  BD 2F9C				mov	bp,2F9Ch
020A:8773  BE 41A1				mov	si,41A1h
020A:8776  8B 1C				mov	bx,[si]
020A:8778  F6 06 2302 80			test	byte ptr ds:[2302h],80h	; (020A:2302=0)
020A:877D  74 2B				jz	$+2Dh			; Jump if zero
020A:877F  50					push	ax
020A:8780  A0 2303				mov	al,byte ptr ds:[2303h]	; (020A:2303=0)
020A:8783  3A 06 17A7				cmp	al,byte ptr ds:[17A7h]	; (020A:17A7=0)
020A:8787  77 06				ja	$+8			; Jump if above
020A:8789  3A 06 17A2				cmp	al,byte ptr ds:[17A2h]	; (020A:17A2=0)
020A:878D  75 1A				jne	$+1Ch			; Jump if not equal
020A:878F  A1 2304				mov	ax,word ptr ds:[2304h]	; (020A:2304=0)
020A:8792  3B C3				cmp	ax,bx
020A:8794  75 13				jne	$+15h			; Jump if not equal
020A:8796  A1 2306				mov	ax,word ptr ds:[2306h]	; (020A:2306=0)
020A:8799  3B 44 02				cmp	ax,[si+2]
020A:879C  75 0B				jne	$+0Dh			; Jump if not equal
020A:879E  9A 1481:3128				call	far ptr $-5676h
020A:87A3  9A 1481:0800				call	far ptr $-7FA3h
020A:87A8  90					nop
020A:87A9  58					pop	ax
020A:87AA  8A 44 05				mov	al,[si+5]
020A:87AD  24 0C				and	al,0Ch
020A:87AF  3C 08				cmp	al,8
020A:87B1  74 59				je	$+5Bh			; Jump if equal
020A:87B3  3C 04				cmp	al,4
020A:87B5  74 0A				je	$+0Ch			; Jump if equal
020A:87B7  3C 00				cmp	al,0
020A:87B9  74 15				je	$+17h			; Jump if equal
020A:87BB  BB 0001				mov	bx,1
020A:87BE  E9 E9DD				jmp	$-1620h
							                        ;* No entry point to code
020A:87C1  E8 F610				call	$-9EDh
020A:87C4  83 06 1D42 01			add	word ptr ds:[1D42h],1	; (020A:1D42=0)
020A:87C9  83 16 1D44 00			adc	word ptr ds:[1D44h],0	; (020A:1D44=0)
020A:87CE  EB 4B				jmp	short $+4Dh
							                        ;* No entry point to code
020A:87D0  80 7C 04 5F				cmp	byte ptr [si+4],5Fh	; '_'
020A:87D4  75 27				jne	$+29h			; Jump if not equal
020A:87D6  80 7C 05 00				cmp	byte ptr [si+5],0
020A:87DA  74 12				je	$+14h			; Jump if equal
020A:87DC  80 7C 09 8D				cmp	byte ptr [si+9],8Dh
020A:87E0  74 0C				je	$+0Eh			; Jump if equal
020A:87E2  80 7C 09 14				cmp	byte ptr [si+9],14h
020A:87E6  74 06				je	$+8			; Jump if equal
020A:87E8  80 7C 09 15				cmp	byte ptr [si+9],15h
020A:87EC  75 0F				jne	$+11h			; Jump if not equal
020A:87EE  E8 F0D9				call	$-0F24h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 241

020A:87F1  83 06 1D56 01			add	word ptr ds:[1D56h],1	; (020A:1D56=0)
020A:87F6  83 16 1D58 00			adc	word ptr ds:[1D58h],0	; (020A:1D58=0)
020A:87FB  EB 1E				jmp	short $+20h
							                        ;* No entry point to code
020A:87FD  E8 F640				call	$-9BDh
020A:8800  83 06 1D4A 01			add	word ptr ds:[1D4Ah],1	; (020A:1D4A=0)
020A:8805  83 16 1D4C 00			adc	word ptr ds:[1D4Ch],0	; (020A:1D4C=0)
020A:880A  EB 0F				jmp	short $+11h
							                        ;* No entry point to code
020A:880C  E8 F69D				call	$-960h
020A:880F  83 06 1D46 01			add	word ptr ds:[1D46h],1	; (020A:1D46=0)
020A:8814  83 16 1D48 00			adc	word ptr ds:[1D48h],0	; (020A:1D48=0)
020A:8819  EB 00				jmp	short $+2		; delay for I/O
020A:881B  26: A1 0000				mov	ax,word ptr es:[0]	; (020A:0000=1828h)
020A:881F  2E: A1 3FB4				mov	ax,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8823  9A 1481:0BB0				call	far ptr $-7C73h
020A:8828  BF 0008				mov	di,8
020A:882B  8B 1C				mov	bx,[si]
020A:882D  8B 44 02				mov	ax,[si+2]
020A:8830  26: 8B 0E 0002			mov	cx,word ptr es:[2]	; (020A:0002=10h)
020A:8835  3B CB				cmp	cx,bx
020A:8837  77 10				ja	$+12h			; Jump if above
020A:8839  72 09				jc	$+0Bh			; Jump if carry Set
020A:883B  26: 8B 0E 0004			mov	cx,word ptr es:[4]	; (020A:0004=808h)
020A:8840  3B C8				cmp	cx,ax
020A:8842  77 05				ja	$+7			; Jump if above
020A:8844  26: 8B 3E 0006			mov	di,word ptr es:data_5+1	; (020A:0006=3)
020A:8849  8B 1C				mov	bx,[si]
020A:884B  8B 44 02				mov	ax,[si+2]
020A:884E  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (020A:0000=1828h)
020A:8853  72 02				jb	$+4			; Jump if below
020A:8855  EB 6E				jmp	short $+70h
							                        ;* No entry point to code
020A:8857  26: 39 1D				cmp	es:[di],bx
020A:885A  73 19				jae	$+1Bh			; Jump if above or =
020A:885C  BB 2F9C				mov	bx,2F9Ch
020A:885F  26: 8A 45 05				mov	al,es:[di+5]
020A:8863  25 000F				and	ax,0Fh
020A:8866  D7					xlat				; al=[al+[bx]] table
020A:8867  0A C0				or	al,al			; Zero ?
020A:8869  75 04				jnz	$+6			; Jump if not zero
020A:886B  26: 8A 45 06				mov	al,es:[di+6]
020A:886F  8B C8				mov	cx,ax
020A:8871  03 F9				add	di,cx
020A:8873  EB D4				jmp	short $-2Ah
							                        ;* No entry point to code
020A:8875  74 02				jz	$+4			; Jump if zero
020A:8877  EB 4C				jmp	short $+4Eh
							                        ;* No entry point to code
020A:8879  26: 39 45 02				cmp	es:[di+2],ax
020A:887D  72 2D				jb	$+2Fh			; Jump if below
020A:887F  77 44				ja	$+46h			; Jump if above
020A:8881  8A 44 05				mov	al,[si+5]
020A:8884  24 0C				and	al,0Ch
020A:8886  3C 04				cmp	al,4
020A:8888  75 08				jne	$+0Ah			; Jump if not equal
020A:888A  F6 44 05 10				test	byte ptr [si+5],10h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 242

020A:888E  74 19				jz	$+1Bh			; Jump if zero
020A:8890  EB 33				jmp	short $+35h
							                        ;* No entry point to code
020A:8892  3C 00				cmp	al,0
020A:8894  75 13				jne	$+15h			; Jump if not equal
020A:8896  8A 44 04				mov	al,[si+4]
020A:8899  24 1F				and	al,1Fh
020A:889B  3C 1F				cmp	al,1Fh
020A:889D  74 26				je	$+28h			; Jump if equal
020A:889F  26: 8A 45 04				mov	al,es:[di+4]
020A:88A3  24 1F				and	al,1Fh
020A:88A5  3C 1F				cmp	al,1Fh
020A:88A7  74 1C				je	$+1Eh			; Jump if equal
020A:88A9  E9 00C1				jmp	$+0C4h
							                        ;* No entry point to code
020A:88AC  BB 2F9C				mov	bx,2F9Ch
020A:88AF  26: 8A 45 05				mov	al,es:[di+5]
020A:88B3  25 000F				and	ax,0Fh
020A:88B6  D7					xlat				; al=[al+[bx]] table
020A:88B7  0A C0				or	al,al			; Zero ?
020A:88B9  75 04				jnz	$+6			; Jump if not zero
020A:88BB  26: 8A 45 06				mov	al,es:[di+6]
020A:88BF  8B C8				mov	cx,ax
020A:88C1  03 F9				add	di,cx
020A:88C3  EB 84				jmp	short $-7Ah
							                        ;* No entry point to code
020A:88C5  BB 2F9C				mov	bx,2F9Ch
020A:88C8  8A 44 05				mov	al,[si+5]
020A:88CB  25 000F				and	ax,0Fh
020A:88CE  D7					xlat				; al=[al+[bx]] table
020A:88CF  0A C0				or	al,al			; Zero ?
020A:88D1  75 03				jnz	$+5			; Jump if not zero
020A:88D3  8A 44 06				mov	al,[si+6]
020A:88D6  8B C8				mov	cx,ax
020A:88D8  26: A1 0000				mov	ax,word ptr es:[0]	; (020A:0000=1828h)
020A:88DC  03 C1				add	ax,cx
020A:88DE  73 03				jnc	$+5			; Jump if carry=0
020A:88E0  E9 E7B7				jmp	$-1846h
							                        ;* No entry point to code
020A:88E3  BE 41A1				mov	si,41A1h
020A:88E6  8B 04				mov	ax,[si]
020A:88E8  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:88EC  75 41				jne	$+43h			; Jump if not equal
020A:88EE  8B 44 02				mov	ax,[si+2]
020A:88F1  3B 06 216E				cmp	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:88F5  76 38				jbe	$+3Ah			; Jump if below or =
020A:88F7  8A 5C 05				mov	bl,[si+5]
020A:88FA  80 E3 0C				and	bl,0Ch
020A:88FD  80 FB 08				cmp	bl,8
020A:8900  74 0C				je	$+0Eh			; Jump if equal
020A:8902  80 FB 04				cmp	bl,4
020A:8905  74 12				je	$+14h			; Jump if equal
020A:8907  80 FB 00				cmp	bl,0
020A:890A  74 18				je	$+1Ah			; Jump if equal
020A:890C  21EB					dw	21EBh			; Data table (indexed access)
020A:890E  3B 06 3DAD				cmp	ax,word ptr ds:[3DADh]	; (020A:3DAD=8B3Eh)
020A:8912  73 1B				jae	$+1Dh			; Jump if above or =
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 243

020A:8914  A3 3DAD				mov	word ptr ds:[3DADh],ax	; (020A:3DAD=8B3Eh)
020A:8917  EB 16				jmp	short $+18h
							                        ;* No entry point to code
020A:8919  3B 06 3DA9				cmp	ax,word ptr ds:[3DA9h]	; (020A:3DA9=87C3h)
020A:891D  73 10				jae	$+12h			; Jump if above or =
020A:891F  A3 3DA9				mov	word ptr ds:[3DA9h],ax	; (020A:3DA9=87C3h)
020A:8922  EB 0B				jmp	short $+0Dh
							                        ;* No entry point to code
020A:8924  3B 06 3DAB				cmp	ax,word ptr ds:[3DABh]	; (020A:3DAB=80DBh)
020A:8928  73 05				jae	$+7			; Jump if above or =
020A:892A  A3 3DAB				mov	word ptr ds:[3DABh],ax	; (020A:3DAB=80DBh)
020A:892D  EB 00				jmp	short $+2		; delay for I/O
020A:892F  57					push	di
020A:8930  51					push	cx
020A:8931  1E					push	ds
020A:8932  06					push	es
020A:8933  1F					pop	ds
020A:8934  26: 8B 36 0000			mov	si,word ptr es:[0]	; (020A:0000=1828h)
020A:8939  4E					dec	si
020A:893A  8B C6				mov	ax,si
020A:893C  2B C7				sub	ax,di
020A:893E  40					inc	ax
020A:893F  26: 01 0E 0000			add	word ptr es:[0],cx	; (020A:0000=1828h)
020A:8944  73 03				jnc	$+5			; Jump if carry=0
020A:8946  E9 E751				jmp	$-18ACh
							                        ;* No entry point to code
020A:8949  8B FE				mov	di,si
020A:894B  03 F9				add	di,cx
020A:894D  8B C8				mov	cx,ax
020A:894F  FD					std				; Set direction flag
020A:8950  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:8952  1F					pop	ds
020A:8953  59					pop	cx
020A:8954  5F					pop	di
020A:8955  BE 41A1				mov	si,41A1h
020A:8958  8B 04				mov	ax,[si]
020A:895A  26: A3 0002				mov	word ptr es:[2],ax	; (020A:0002=10h)
020A:895E  8B 44 02				mov	ax,[si+2]
020A:8961  26: A3 0004				mov	word ptr es:[4],ax	; (020A:0004=808h)
020A:8965  26: 89 3E 0006			mov	word ptr es:data_5+1,di	; (020A:0006=3)
020A:896A  FC					cld				; Clear direction
020A:896B  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:896D  B9 0050				mov	cx,50h
020A:8970  33 C0				xor	ax,ax			; Zero register
020A:8972  BF 41A1				mov	di,41A1h
020A:8975  06					push	es
020A:8976  1E					push	ds
020A:8977  07					pop	es
020A:8978  F3/ AB				rep	stosw			; Rep when cx >0 Store ax to es:[di]
020A:897A  07					pop	es
020A:897B  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:8980  9C					pushf				; Push flags
020A:8981  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8986  5A					pop	dx
020A:8987  8E DA				mov	ds,dx
020A:8989  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:898E  5A					pop	dx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 244

020A:898F  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8991  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8996  74 03				je	$+5			; Jump if equal
020A:8998  E8 F3E5				call	$-0C18h
020A:899B  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:89A0  9D					popf				; Pop flags
020A:89A1  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:89A6  5D					pop	bp
020A:89A7  5F					pop	di
020A:89A8  5E					pop	si
020A:89A9  5A					pop	dx
020A:89AA  59					pop	cx
020A:89AB  5B					pop	bx
020A:89AC  58					pop	ax
020A:89AD  C3					retn
							                        ;* No entry point to code
020A:89AE  87 DB				xchg	bx,bx
020A:89B0  E8 CACD				call	$-3530h
020A:89B3  50					push	ax
020A:89B4  53					push	bx
020A:89B5  51					push	cx
020A:89B6  52					push	dx
020A:89B7  56					push	si
020A:89B8  57					push	di
020A:89B9  55					push	bp
020A:89BA  26: 8A 44 05				mov	al,es:[si+5]
020A:89BE  24 0C				and	al,0Ch
020A:89C0  3C 08				cmp	al,8
020A:89C2  74 26				je	$+28h			; Jump if equal
020A:89C4  3C 04				cmp	al,4
020A:89C6  74 0A				je	$+0Ch			; Jump if equal
020A:89C8  3C 00				cmp	al,0
020A:89CA  74 12				je	$+14h			; Jump if equal
020A:89CC  BB 0002				mov	bx,2
020A:89CF  E9 E7CC				jmp	$-1831h
							                        ;* No entry point to code
020A:89D2  83 2E 1D42 01			sub	word ptr ds:[1D42h],1	; (020A:1D42=0)
020A:89D7  83 1E 1D44 00			sbb	word ptr ds:[1D44h],0	; (020A:1D44=0)
020A:89DC  EB 18				jmp	short $+1Ah
							                        ;* No entry point to code
020A:89DE  83 2E 1D4A 01			sub	word ptr ds:[1D4Ah],1	; (020A:1D4A=0)
020A:89E3  83 1E 1D4C 00			sbb	word ptr ds:[1D4Ch],0	; (020A:1D4C=0)
020A:89E8  EB 0C				jmp	short $+0Eh
							                        ;* No entry point to code
020A:89EA  83 2E 1D46 01			sub	word ptr ds:[1D46h],1	; (020A:1D46=0)
020A:89EF  83 1E 1D48 00			sbb	word ptr ds:[1D48h],0	; (020A:1D48=0)
020A:89F4  EB 00				jmp	short $+2		; delay for I/O
020A:89F6  BB 2F9C				mov	bx,2F9Ch
020A:89F9  26: 8A 44 05				mov	al,es:[si+5]
020A:89FD  25 000F				and	ax,0Fh
020A:8A00  D7					xlat				; al=[al+[bx]] table
020A:8A01  0A C0				or	al,al			; Zero ?
020A:8A03  75 04				jnz	$+6			; Jump if not zero
020A:8A05  26: 8A 44 06				mov	al,es:[si+6]
020A:8A09  8B C8				mov	cx,ax
020A:8A0B  26: 8B 04				mov	ax,es:[si]
020A:8A0E  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 245

020A:8A12  75 71				jne	$+73h			; Jump if not equal
020A:8A14  26: 8B 44 02				mov	ax,es:[si+2]
020A:8A18  26: 8A 5C 05				mov	bl,es:[si+5]
020A:8A1C  80 E3 0C				and	bl,0Ch
020A:8A1F  80 FB 08				cmp	bl,8
020A:8A22  74 0C				je	$+0Eh			; Jump if equal
020A:8A24  80 FB 04				cmp	bl,4
020A:8A27  74 24				je	$+26h			; Jump if equal
020A:8A29  80 FB 00				cmp	bl,0
020A:8A2C  74 3C				je	$+3Eh			; Jump if equal
020A:8A2E  EB 55				jmp	short $+57h
							                        ;* No entry point to code
020A:8A30  3B 06 3DAD				cmp	ax,word ptr ds:[3DADh]	; (020A:3DAD=8B3Eh)
020A:8A34  75 4F				jne	$+51h			; Jump if not equal
020A:8A36  8B D9				mov	bx,cx
020A:8A38  26: 8B 00				mov	ax,es:[bx+si]
020A:8A3B  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:8A3F  26: 8B 40 02				mov	ax,es:[bx+si+2]
020A:8A43  75 03				jnz	$+5			; Jump if not zero
020A:8A45  B8 FFFF				mov	ax,0FFFFh
020A:8A48  A3 3DAD				mov	word ptr ds:[3DADh],ax	; (020A:3DAD=8B3Eh)
020A:8A4B  EB 38				jmp	short $+3Ah
							                        ;* No entry point to code
020A:8A4D  3B 06 3DA9				cmp	ax,word ptr ds:[3DA9h]	; (020A:3DA9=87C3h)
020A:8A51  75 32				jne	$+34h			; Jump if not equal
020A:8A53  8B D9				mov	bx,cx
020A:8A55  26: 8B 00				mov	ax,es:[bx+si]
020A:8A58  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:8A5C  26: 8B 40 02				mov	ax,es:[bx+si+2]
020A:8A60  75 03				jnz	$+5			; Jump if not zero
020A:8A62  B8 FFFF				mov	ax,0FFFFh
020A:8A65  A3 3DA9				mov	word ptr ds:[3DA9h],ax	; (020A:3DA9=87C3h)
020A:8A68  EB 1B				jmp	short $+1Dh
							                        ;* No entry point to code
020A:8A6A  3B 06 3DAB				cmp	ax,word ptr ds:[3DABh]	; (020A:3DAB=80DBh)
020A:8A6E  75 15				jne	$+17h			; Jump if not equal
020A:8A70  8B D9				mov	bx,cx
020A:8A72  26: 8B 00				mov	ax,es:[bx+si]
020A:8A75  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:8A79  26: 8B 40 02				mov	ax,es:[bx+si+2]
020A:8A7D  75 03				jnz	$+5			; Jump if not zero
020A:8A7F  B8 FFFF				mov	ax,0FFFFh
020A:8A82  A3 3DAB				mov	word ptr ds:[3DABh],ax	; (020A:3DAB=80DBh)
020A:8A85  8B FE				mov	di,si
020A:8A87  03 F1				add	si,cx
020A:8A89  26: 8B 04				mov	ax,es:[si]
020A:8A8C  26: A3 0002				mov	word ptr es:[2],ax	; (020A:0002=10h)
020A:8A90  26: 8B 44 02				mov	ax,es:[si+2]
020A:8A94  26: A3 0004				mov	word ptr es:[4],ax	; (020A:0004=808h)
020A:8A98  26: 89 3E 0006			mov	word ptr es:data_5+1,di	; (020A:0006=3)
020A:8A9D  8B C1				mov	ax,cx
020A:8A9F  26: 8B 0E 0000			mov	cx,word ptr es:[0]	; (020A:0000=1828h)
020A:8AA4  2B CE				sub	cx,si
020A:8AA6  1E					push	ds
020A:8AA7  06					push	es
020A:8AA8  1F					pop	ds
020A:8AA9  FC					cld				; Clear direction
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 246

020A:8AAA  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:8AAC  1F					pop	ds
020A:8AAD  26: 29 06 0000			sub	word ptr es:[0],ax	; (020A:0000=1828h)
020A:8AB2  73 06				jnc	$+8			; Jump if carry=0
020A:8AB4  BB 0002				mov	bx,2
020A:8AB7  E9 E6E4				jmp	$-1919h
							                        ;* No entry point to code
020A:8ABA  5D					pop	bp
020A:8ABB  5F					pop	di
020A:8ABC  5E					pop	si
020A:8ABD  5A					pop	dx
020A:8ABE  59					pop	cx
020A:8ABF  5B					pop	bx
020A:8AC0  58					pop	ax
020A:8AC1  C3					retn
							                        ;* No entry point to code
020A:8AC2  87 DB				xchg	bx,bx
020A:8AC4  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8AC9  06					push	es
020A:8ACA  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8ACF  1E					push	ds
020A:8AD0  56					push	si
020A:8AD1  57					push	di
020A:8AD2  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:8AD8  75 24				jne	$+26h			; Jump if not equal
020A:8ADA  E8 EDC3				call	$-123Ah
020A:8ADD  A9 0002				test	ax,2
020A:8AE0  74 05				jz	$+7			; Jump if zero
020A:8AE2  E8 F2EF				call	$-0D0Eh
020A:8AE5  EB 1F				jmp	short $+21h
							                        ;* No entry point to code
020A:8AE7  A9 0001				test	ax,1
020A:8AEA  74 05				jz	$+7			; Jump if zero
020A:8AEC  E8 F351				call	$-0CACh
020A:8AEF  EB 15				jmp	short $+17h
							                        ;* No entry point to code
020A:8AF1  A9 0004				test	ax,4
020A:8AF4  74 05				jz	$+7			; Jump if zero
020A:8AF6  E8 F3B3				call	$-0C4Ah
020A:8AF9  EB 0B				jmp	short $+0Dh
020A:8AFB  E9 00BD				jmp	$+0C0h
							                        ;* No entry point to code
020A:8AFE  E8 F27F				call	$-0D7Eh
020A:8B01  2E: 8E 06 3FB2			mov	es,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:8B06  BF 0008				mov	di,8
020A:8B09  26: C7 05 FFFF			mov	word ptr es:[di],0FFFFh
020A:8B0E  26: C7 45 02 FFFF			mov	word ptr es:[di+2],0FFFFh
020A:8B14  26: C6 45 04 00			mov	byte ptr es:[di+4],0
020A:8B19  26: C6 45 06 00			mov	byte ptr es:[di+6],0
020A:8B1E  A9 0002				test	ax,2
020A:8B21  75 0D				jnz	$+0Fh			; Jump if not zero
020A:8B23  A9 0001				test	ax,1
020A:8B26  75 2A				jnz	$+2Ch			; Jump if not zero
020A:8B28  A9 0004				test	ax,4
020A:8B2B  75 55				jnz	$+57h			; Jump if not zero
020A:8B2D  E9 008B				jmp	$+8Eh
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 247

020A:8B30  26: C6 45 05 04			mov	byte ptr es:[di+5],4
020A:8B35  26: C7 06 0000 0012			mov	word ptr es:[0],12h	; (0575:0000=1C19h)
020A:8B3C  BE 6A6B				mov	si,6A6Bh
020A:8B3F  57					push	di
020A:8B40  BF FFF0				mov	di,0FFF0h
020A:8B43  26: 80 3D FF				cmp	byte ptr es:[di],0FFh
020A:8B47  75 06				jne	$+8			; Jump if not equal
020A:8B49  B9 000C				mov	cx,0Ch
020A:8B4C  FC					cld				; Clear direction
020A:8B4D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:8B4F  5F					pop	di
020A:8B50  EB 69				jmp	short $+6Bh
020A:8B52  26: C6 45 05 00			mov	byte ptr es:[di+5],0
020A:8B57  26: C7 06 0000 000F			mov	word ptr es:[0],0Fh	; (0575:0000=1C19h)
020A:8B5E  1E					push	ds
020A:8B5F  E8 ED3E				call	$-12BFh
020A:8B62  8B 36 17AF				mov	si,word ptr ds:[17AFh]	; (020A:17AF=5C3Ah)
020A:8B66  1F					pop	ds
020A:8B67  26: 01 36 0000			add	word ptr es:[0],si	; (0575:0000=1C19h)
020A:8B6C  BE 6A8B				mov	si,6A8Bh
020A:8B6F  57					push	di
020A:8B70  BF FFF0				mov	di,0FFF0h
020A:8B73  26: 80 3D FF				cmp	byte ptr es:[di],0FFh
020A:8B77  75 06				jne	$+8			; Jump if not equal
020A:8B79  B9 000C				mov	cx,0Ch
020A:8B7C  FC					cld				; Clear direction
020A:8B7D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:8B7F  5F					pop	di
020A:8B80  EB 39				jmp	short $+3Bh
020A:8B82  26: C6 45 05 08			mov	byte ptr es:[di+5],8
020A:8B87  51					push	cx
020A:8B88  B9 0029				mov	cx,29h
020A:8B8B  33 C0				xor	ax,ax			; Zero register
020A:8B8D  BF 0011				mov	di,11h
020A:8B90  FC					cld				; Clear direction
020A:8B91  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:8B93  59					pop	cx
020A:8B94  26: C7 06 0000 0045			mov	word ptr es:[0],45h	; (0575:0000=1C19h)
020A:8B9B  1E					push	ds
020A:8B9C  E8 ED01				call	$-12FCh
020A:8B9F  8B 36 17AF				mov	si,word ptr ds:[17AFh]	; (020A:17AF=5C3Ah)
020A:8BA3  1F					pop	ds
020A:8BA4  26: 01 36 0000			add	word ptr es:[0],si	; (0575:0000=1C19h)
020A:8BA9  BE 6A7B				mov	si,6A7Bh
020A:8BAC  BF FFF0				mov	di,0FFF0h
020A:8BAF  26: 80 3D FF				cmp	byte ptr es:[di],0FFh
020A:8BB3  75 06				jne	$+8			; Jump if not equal
020A:8BB5  B9 000C				mov	cx,0Ch
020A:8BB8  FC					cld				; Clear direction
020A:8BB9  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:8BBB  26: C7 06 0002 FFFF			mov	word ptr es:[2],0FFFFh	; (0575:0002=3BEBh)
020A:8BC2  26: C7 06 0004 FFFF			mov	word ptr es:[4],0FFFFh	; (0575:0004=3F3Ch)
020A:8BC9  26: C7 06 0006 0008			mov	word ptr es:[6],8	; (0575:0006=375h)
020A:8BD0  5F					pop	di
020A:8BD1  5E					pop	si
020A:8BD2  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:8BD7  9C					pushf				; Push flags
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 248

020A:8BD8  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8BDD  5A					pop	dx
020A:8BDE  8E DA				mov	ds,dx
020A:8BE0  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:8BE5  5A					pop	dx
020A:8BE6  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8BE8  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8BED  74 03				je	$+5			; Jump if equal
020A:8BEF  E8 F18E				call	$-0E6Fh
020A:8BF2  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8BF7  9D					popf				; Pop flags
020A:8BF8  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:8BFD  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:8C02  9C					pushf				; Push flags
020A:8C03  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8C08  5A					pop	dx
020A:8C09  8E C2				mov	es,dx
020A:8C0B  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:8C10  5A					pop	dx
020A:8C11  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8C13  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8C18  74 03				je	$+5			; Jump if equal
020A:8C1A  E8 F163				call	$-0E9Ah
020A:8C1D  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:8C22  9D					popf				; Pop flags
020A:8C23  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:8C28  C3					retn
020A:8C29  00					db	0
020A:8C2A  00					db	0
020A:8C2B  00					db	0
020A:8C2C  00					db	0
020A:8C2D  00 00				add	[bx+si],al
020A:8C2F  00 53 52				add	[bp+di+52h],dl
020A:8C32  56					push	si
020A:8C33  57					push	di
020A:8C34  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:8C39  06					push	es
020A:8C3A  C6 06 3D24 00			mov	byte ptr ds:[3D24h],0	; (020A:3D24=0CBh)
020A:8C3F  F6 C7 20				test	bh,20h			; ' '
020A:8C42  74 3C				jz	$+3Eh			; Jump if zero
020A:8C44  F6 06 2320 02			test	byte ptr ds:[2320h],2	; (020A:2320=0)
020A:8C49  75 35				jnz	$+37h			; Jump if not zero
020A:8C4B  0A DB				or	bl,bl			; Zero ?
020A:8C4D  74 0A				jz	$+0Ch			; Jump if zero
020A:8C4F  8A CB				mov	cl,bl
020A:8C51  80 E1 C7				and	cl,0C7h
020A:8C54  80 F9 06				cmp	cl,6
020A:8C57  75 27				jne	$+29h			; Jump if not equal
020A:8C59  3D FFFD				cmp	ax,0FFFDh
020A:8C5C  72 07				jb	$+9			; Jump if below
020A:8C5E  C6 06 2360 00			mov	byte ptr ds:[2360h],0	; (020A:2360=0)
020A:8C63  EB 1B				jmp	short $+1Dh
							                        ;* No entry point to code
020A:8C65  F7 06 3D3C 0008			test	word ptr ds:[3D3Ch],8	; (020A:3D3C=2477h)
020A:8C6B  75 13				jnz	$+15h			; Jump if not zero
020A:8C6D  80 3E 3D30 01			cmp	byte ptr ds:[3D30h],1	; (020A:3D30=0F7h)
020A:8C72  75 0C				jne	$+0Eh			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 249

020A:8C74  80 3E 2360 0F			cmp	byte ptr ds:[2360h],0Fh	; (020A:2360=0)
020A:8C79  77 05				ja	$+7			; Jump if above
020A:8C7B  80 0E 3D30 80			or	byte ptr ds:[3D30h],80h	; (020A:3D30=0F7h)
020A:8C80  8A 0E 235D				mov	cl,byte ptr ds:[235Dh]	; (020A:235D=0)
020A:8C84  C6 06 2367 00			mov	byte ptr ds:[2367h],0	; (020A:2367=8Bh)
020A:8C89  9A 1481:67A4				call	far ptr $-24E5h
020A:8C8E  73 14				jnc	$+16h			; Jump if carry=0
020A:8C90  8B 16 2352				mov	dx,word ptr ds:[2352h]	; (020A:2352=0)
020A:8C94  89 16 2FC6				mov	word ptr ds:[2FC6h],dx	; (020A:2FC6=4F4Dh)
020A:8C98  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:8C9D  75 05				jnz	$+7			; Jump if not zero
020A:8C9F  C6 06 2367 01			mov	byte ptr ds:[2367h],1	; (020A:2367=8Bh)
020A:8CA4  80 F9 90				cmp	cl,90h
020A:8CA7  75 19				jne	$+1Bh			; Jump if not equal
020A:8CA9  8B 16 2FC6				mov	dx,word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:8CAD  3B 16 234C				cmp	dx,word ptr ds:[234Ch]	; (020A:234C=0)
020A:8CB1  75 0D				jne	$+0Fh			; Jump if not equal
020A:8CB3  9A 1481:5238				call	far ptr $-3A7Bh
020A:8CB8  89 16 234C				mov	word ptr ds:[234Ch],dx	; (020A:234C=0)
020A:8CBC  89 16 2FC6				mov	word ptr ds:[2FC6h],dx	; (020A:2FC6=4F4Dh)
020A:8CC0  EB 71				jmp	short $+73h
							                        ;* No entry point to code
020A:8CC2  80 F9 26				cmp	cl,26h			; '&'
020A:8CC5  75 0F				jne	$+11h			; Jump if not equal
020A:8CC7  8B 16 234A				mov	dx,word ptr ds:[234Ah]	; (020A:234A=0)
020A:8CCB  9A 1481:5238				call	far ptr $-3A93h
020A:8CD0  89 16 234A				mov	word ptr ds:[234Ah],dx	; (020A:234A=0)
020A:8CD4  EB 59				jmp	short $+5Bh
							                        ;* No entry point to code
020A:8CD6  80 F9 2E				cmp	cl,2Eh			; '.'
020A:8CD9  75 0F				jne	$+11h			; Jump if not equal
020A:8CDB  8B 16 1D0A				mov	dx,word ptr ds:[1D0Ah]	; (020A:1D0A=0)
020A:8CDF  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:8CE4  75 49				jne	$+4Bh			; Jump if not equal
020A:8CE6  33 D2				xor	dx,dx			; Zero register
020A:8CE8  EB 45				jmp	short $+47h
							                        ;* No entry point to code
020A:8CEA  80 F9 36				cmp	cl,36h			; '6'
020A:8CED  75 06				jne	$+8			; Jump if not equal
020A:8CEF  8B 16 2352				mov	dx,word ptr ds:[2352h]	; (020A:2352=0)
020A:8CF3  EB 3A				jmp	short $+3Ch
							                        ;* No entry point to code
020A:8CF5  80 F9 64				cmp	cl,64h			; 'd'
020A:8CF8  75 0F				jne	$+11h			; Jump if not equal
020A:8CFA  8B 16 234E				mov	dx,word ptr ds:[234Eh]	; (020A:234E=0)
020A:8CFE  9A 1481:5238				call	far ptr $-3AC6h
020A:8D03  89 16 234E				mov	word ptr ds:[234Eh],dx	; (020A:234E=0)
020A:8D07  EB 26				jmp	short $+28h
							                        ;* No entry point to code
020A:8D09  80 F9 65				cmp	cl,65h			; 'e'
020A:8D0C  75 0F				jne	$+11h			; Jump if not equal
020A:8D0E  8B 16 2350				mov	dx,word ptr ds:[2350h]	; (020A:2350=0)
020A:8D12  9A 1481:5238				call	far ptr $-3ADAh
020A:8D17  89 16 2350				mov	word ptr ds:[2350h],dx	; (020A:2350=0)
020A:8D1B  EB 12				jmp	short $+14h
							                        ;* No entry point to code
020A:8D1D  80 F9 3E				cmp	cl,3Eh			; '>'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 250

020A:8D20  75 11				jne	$+13h			; Jump if not equal
020A:8D22  8B 16 234C				mov	dx,word ptr ds:[234Ch]	; (020A:234C=0)
020A:8D26  9A 1481:5238				call	far ptr $-3AEEh
020A:8D2B  89 16 234C				mov	word ptr ds:[234Ch],dx	; (020A:234C=0)
020A:8D2F  89 16 2FC6				mov	word ptr ds:[2FC6h],dx	; (020A:2FC6=4F4Dh)
020A:8D33  83 3E 217A FF			cmp	word ptr ds:[217Ah],0FFFFh	; (020A:217A=0FB01h)
020A:8D38  74 11				je	$+13h			; Jump if equal
020A:8D3A  8B 16 217A				mov	dx,word ptr ds:[217Ah]	; (020A:217A=0FB01h)
020A:8D3E  83 3E 2178 FF			cmp	word ptr ds:[2178h],0FFFFh	; (020A:2178=82Eh)
020A:8D43  74 1F				je	$+21h			; Jump if equal
020A:8D45  03 16 2178				add	dx,word ptr ds:[2178h]	; (020A:2178=82Eh)
020A:8D49  EB 19				jmp	short $+1Bh
							                        ;* No entry point to code
020A:8D4B  83 3E 2178 FF			cmp	word ptr ds:[2178h],0FFFFh	; (020A:2178=82Eh)
020A:8D50  74 16				je	$+18h			; Jump if equal
020A:8D52  8B 16 2178				mov	dx,word ptr ds:[2178h]	; (020A:2178=82Eh)
020A:8D56  F7 06 1F86 8000			test	word ptr ds:[1F86h],8000h	; (020A:1F86=0)
020A:8D5C  74 02				jz	$+4			; Jump if zero
020A:8D5E  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:8D60  03 16 2FC6				add	dx,word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:8D64  89 16 2FC6				mov	word ptr ds:[2FC6h],dx	; (020A:2FC6=4F4Dh)
020A:8D68  A3 2FD4				mov	word ptr ds:[2FD4h],ax	; (020A:2FD4=3D53h)
020A:8D6B  0B C0				or	ax,ax			; Zero ?
020A:8D6D  75 3B				jnz	$+3Dh			; Jump if not zero
020A:8D6F  8A D3				mov	dl,bl
020A:8D71  80 E2 C7				and	dl,0C7h
020A:8D74  80 FA 46				cmp	dl,46h			; 'F'
020A:8D77  75 31				jne	$+33h			; Jump if not equal
020A:8D79  C6 06 1D2B 02			mov	byte ptr ds:[1D2Bh],2	; (020A:1D2B=0)
020A:8D7E  F6 06 2186 80			test	byte ptr ds:[2186h],80h	; (020A:2186=0FBh)
020A:8D83  75 0A				jnz	$+0Ch			; Jump if not zero
020A:8D85  F6 C7 C0				test	bh,0C0h
020A:8D88  74 05				jz	$+7			; Jump if zero
020A:8D8A  9A 1481:09C4				call	far ptr $+7C3Ah
020A:8D8F  80 3E 1CEF 01			cmp	byte ptr ds:[1CEFh],1	; (020A:1CEF=0)
020A:8D94  75 0C				jne	$+0Eh			; Jump if not equal
020A:8D96  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:8D9B  74 05				jz	$+7			; Jump if zero
020A:8D9D  9A 1481:6828				call	far ptr $-2575h
020A:8DA2  80 26 3D2A FB			and	byte ptr ds:[3D2Ah],0FBh	; (020A:3D2A=0D3h)
020A:8DA7  E9 059A				jmp	$+59Dh
							                        ;* No entry point to code
020A:8DAA  C6 06 3D21 00			mov	byte ptr ds:[3D21h],0	; (020A:3D21=8Ah)
020A:8DAF  F6 C3 38				test	bl,38h			; '8'
020A:8DB2  74 2B				jz	$+2Dh			; Jump if zero
020A:8DB4  F6 06 2320 02			test	byte ptr ds:[2320h],2	; (020A:2320=0)
020A:8DB9  75 24				jnz	$+26h			; Jump if not zero
020A:8DBB  8A D3				mov	dl,bl
020A:8DBD  80 E2 C7				and	dl,0C7h
020A:8DC0  80 FA 06				cmp	dl,6
020A:8DC3  74 1A				je	$+1Ch			; Jump if equal
020A:8DC5  80 3E 155F 00			cmp	byte ptr ds:[155Fh],0	; (020A:155F=0)
020A:8DCA  75 07				jne	$+9			; Jump if not equal
020A:8DCC  80 3E 2367 01			cmp	byte ptr ds:[2367h],1	; (020A:2367=8Bh)
020A:8DD1  74 07				je	$+9			; Jump if equal
020A:8DD3  F6 06 3D29 02			test	byte ptr ds:[3D29h],2	; (020A:3D29=0Bh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 251

020A:8DD8  74 05				jz	$+7			; Jump if zero
020A:8DDA  C6 06 3D21 01			mov	byte ptr ds:[3D21h],1	; (020A:3D21=8Ah)
020A:8DDF  53					push	bx
020A:8DE0  8B 1E 2FC6				mov	bx,word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:8DE4  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:8DE9  74 08				je	$+0Ah			; Jump if equal
020A:8DEB  F7 06 3D3C 0008			test	word ptr ds:[3D3Ch],8	; (020A:3D3C=2477h)
020A:8DF1  74 03				jz	$+5			; Jump if zero
020A:8DF3  E9 009A				jmp	$+9Dh
							                        ;* No entry point to code
020A:8DF6  50					push	ax
020A:8DF7  A1 1CE8				mov	ax,word ptr ds:[1CE8h]	; (020A:1CE8=0)
020A:8DFA  3D 0000				cmp	ax,0
020A:8DFD  75 03				jne	$+5			; Jump if not equal
020A:8DFF  E8 EAE3				call	$-151Ah
020A:8E02  8B 3E 2FD4				mov	di,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:8E06  8E C3				mov	es,bx
020A:8E08  9A 1481:8950				call	far ptr $-4B8h
020A:8E0D  72 7C				jc	$+7Eh			; Jump if carry Set
020A:8E0F  9A 1481:8834				call	far ptr $-5DBh
020A:8E14  8C C3				mov	bx,es
020A:8E16  3B D8				cmp	bx,ax
020A:8E18  72 71				jb	$+73h			; Jump if below
020A:8E1A  8C C8				mov	ax,cs
020A:8E1C  03 06 17A9				add	ax,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:8E20  8B D7				mov	dx,di
020A:8E22  D1 EA				shr	dx,1			; Shift w/zeros fill
020A:8E24  D1 EA				shr	dx,1			; Shift w/zeros fill
020A:8E26  D1 EA				shr	dx,1			; Shift w/zeros fill
020A:8E28  D1 EA				shr	dx,1			; Shift w/zeros fill
020A:8E2A  03 D3				add	dx,bx
020A:8E2C  72 5D				jc	$+5Fh			; Jump if carry Set
020A:8E2E  3B D0				cmp	dx,ax
020A:8E30  77 59				ja	$+5Bh			; Jump if above
020A:8E32  F6 06 3D30 80			test	byte ptr ds:[3D30h],80h	; (020A:3D30=0F7h)
020A:8E37  74 52				jz	$+54h			; Jump if zero
020A:8E39  5E					pop	si
020A:8E3A  56					push	si
020A:8E3B  8E C3				mov	es,bx
020A:8E3D  B1 19				mov	cl,19h
020A:8E3F  26: 83 3C 00				cmp	word ptr es:[si],0
020A:8E43  74 08				je	$+0Ah			; Jump if equal
020A:8E45  FE C1				inc	cl
020A:8E47  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:8E4B  75 3E				jne	$+40h			; Jump if not equal
020A:8E4D  C6 06 2360 01			mov	byte ptr ds:[2360h],1	; (020A:2360=0)
020A:8E52  57					push	di
020A:8E53  51					push	cx
020A:8E54  8C C0				mov	ax,es
020A:8E56  8B DE				mov	bx,si
020A:8E58  BA 0001				mov	dx,1
020A:8E5B  C6 06 3C2B 01			mov	byte ptr ds:[3C2Bh],1	; (020A:3C2B=3)
020A:8E60  E8 D57D				call	$-2A80h
020A:8E63  C6 06 3C2B 00			mov	byte ptr ds:[3C2Bh],0	; (020A:3C2B=3)
020A:8E68  59					pop	cx
020A:8E69  72 1F				jc	$+21h			; Jump if carry Set
020A:8E6B  BF 41A1				mov	di,41A1h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 252

020A:8E6E  89 05				mov	[di],ax
020A:8E70  89 5D 02				mov	[di+2],bx
020A:8E73  C6 45 04 5F				mov	byte ptr [di+4],5Fh	; '_'
020A:8E77  C6 45 05 02				mov	byte ptr [di+5],2
020A:8E7B  C6 45 06 00				mov	byte ptr [di+6],0
020A:8E7F  88 4D 09				mov	[di+9],cl
020A:8E82  C7 45 07 203F			mov	word ptr [di+7],203Fh
020A:8E87  E8 F8D6				call	$-727h
020A:8E8A  5F					pop	di
020A:8E8B  58					pop	ax
020A:8E8C  8B 1E 2FC6				mov	bx,word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:8E90  C6 06 3D30 00			mov	byte ptr ds:[3D30h],0	; (020A:3D30=0F7h)
020A:8E95  F6 06 455D 02			test	byte ptr ds:[455Dh],2	; (020A:455D=1)
020A:8E9A  74 4E				jz	$+50h			; Jump if zero
020A:8E9C  5B					pop	bx
020A:8E9D  80 26 455D FD			and	byte ptr ds:[455Dh],0FDh	; (020A:455D=1)
020A:8EA2  C7 06 1D8B 0000			mov	word ptr ds:[1D8Bh],0	; (020A:1D8B=0)
020A:8EA8  C6 06 3D21 00			mov	byte ptr ds:[3D21h],0	; (020A:3D21=8Ah)
020A:8EAD  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:8EB2  75 33				jne	$+35h			; Jump if not equal
020A:8EB4  9A 1481:09C4				call	far ptr $+7B10h
020A:8EB9  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:8EBE  74 05				jz	$+7			; Jump if zero
020A:8EC0  9A 1481:6828				call	far ptr $-2698h
020A:8EC5  BE 455E				mov	si,455Eh
020A:8EC8  F6 06 3D29 08			test	byte ptr ds:[3D29h],8	; (020A:3D29=0Bh)
020A:8ECD  74 13				jz	$+15h			; Jump if zero
020A:8ECF  3E: C6 46 00 5B			mov	byte ptr ds:[bp],5Bh	; '['
020A:8ED4  45					inc	bp
020A:8ED5  9A 1481:6800				call	far ptr $-26D5h
020A:8EDA  3E: C6 46 00 5D			mov	byte ptr ds:[bp],5Dh	; ']'
020A:8EDF  45					inc	bp
020A:8EE0  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:8EE2  9A 1481:6800				call	far ptr $-26E2h
020A:8EE7  E9 045A				jmp	$+45Dh
							                        ;* No entry point to code
020A:8EEA  BA 0002				mov	dx,2
020A:8EED  E8 D4F0				call	$-2B0Dh
020A:8EF0  9C					pushf				; Push flags
020A:8EF1  80 3E 3D21 00			cmp	byte ptr ds:[3D21h],0	; (020A:3D21=8Ah)
020A:8EF6  74 3B				je	$+3Dh			; Jump if equal
020A:8EF8  9D					popf				; Pop flags
020A:8EF9  9C					pushf				; Push flags
020A:8EFA  73 0E				jnc	$+10h			; Jump if carry=0
020A:8EFC  26: F6 45 07 20			test	byte ptr es:[di+7],20h	; ' '
020A:8F01  74 07				jz	$+9			; Jump if zero
020A:8F03  C6 06 3D21 00			mov	byte ptr ds:[3D21h],0	; (020A:3D21=8Ah)
020A:8F08  EB 29				jmp	short $+2Bh
							                        ;* No entry point to code
020A:8F0A  9D					popf				; Pop flags
020A:8F0B  5B					pop	bx
020A:8F0C  F6 06 2186 80			test	byte ptr ds:[2186h],80h	; (020A:2186=0FBh)
020A:8F11  75 05				jnz	$+7			; Jump if not zero
020A:8F13  9A 1481:09C4				call	far ptr $+7AB1h
020A:8F18  80 3E 1CEF 01			cmp	byte ptr ds:[1CEFh],1	; (020A:1CEF=0)
020A:8F1D  75 0C				jne	$+0Eh			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 253

020A:8F1F  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:8F24  74 05				jz	$+7			; Jump if zero
020A:8F26  9A 1481:6828				call	far ptr $-26FEh
020A:8F2B  80 26 3D2A FB			and	byte ptr ds:[3D2Ah],0FBh	; (020A:3D2A=0D3h)
020A:8F30  E9 0411				jmp	$+414h
							                        ;* No entry point to code
020A:8F33  80 3E 17A3 02			cmp	byte ptr ds:[17A3h],2	; (020A:17A3=0)
020A:8F38  75 1C				jne	$+1Eh			; Jump if not equal
020A:8F3A  80 3E 3D9C 00			cmp	byte ptr ds:[3D9Ch],0	; (020A:3D9C=3Ch)
020A:8F3F  75 08				jne	$+0Ah			; Jump if not equal
020A:8F41  F7 06 3D41 0040			test	word ptr ds:[3D41h],40h	; (020A:3D41=23h)
020A:8F47  75 07				jnz	$+9			; Jump if not zero
020A:8F49  F6 06 3D9C 04			test	byte ptr ds:[3D9Ch],4	; (020A:3D9C=3Ch)
020A:8F4E  74 06				jz	$+8			; Jump if zero
020A:8F50  BA 0002				mov	dx,2
020A:8F53  E8 184E				call	$+1851h
020A:8F56  9D					popf				; Pop flags
020A:8F57  5B					pop	bx
020A:8F58  72 03				jc	$+5			; Jump if carry Set
020A:8F5A  E9 0130				jmp	$+133h
							                        ;* No entry point to code
020A:8F5D  26: F6 45 07 40			test	byte ptr es:[di+7],40h	; '@'
020A:8F62  75 09				jnz	$+0Bh			; Jump if not zero
020A:8F64  80 3E 2193 04			cmp	byte ptr ds:[2193h],4	; (020A:2193=0)
020A:8F69  74 07				je	$+9			; Jump if equal
020A:8F6B  EB 0A				jmp	short $+0Ch
							                        ;* No entry point to code
020A:8F6D  C6 06 3D24 01			mov	byte ptr ds:[3D24h],1	; (020A:3D24=0CBh)
020A:8F72  C6 06 1D2B 02			mov	byte ptr ds:[1D2Bh],2	; (020A:1D2B=0)
020A:8F77  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:8F7C  75 2D				jne	$+2Fh			; Jump if not equal
020A:8F7E  80 3E 3C2E 01			cmp	byte ptr ds:[3C2Eh],1	; (020A:3C2E=1)
020A:8F83  74 23				je	$+25h			; Jump if equal
020A:8F85  26: F6 45 07 80			test	byte ptr es:[di+7],80h
020A:8F8A  75 1F				jnz	$+21h			; Jump if not zero
020A:8F8C  26: F6 45 04 40			test	byte ptr es:[di+4],40h	; '@'
020A:8F91  74 15				jz	$+17h			; Jump if zero
020A:8F93  26: F6 45 07 40			test	byte ptr es:[di+7],40h	; '@'
020A:8F98  75 11				jnz	$+13h			; Jump if not zero
020A:8F9A  80 3E 17A7 04			cmp	byte ptr ds:[17A7h],4	; (020A:17A7=0)
020A:8F9F  76 0A				jbe	$+0Ch			; Jump if below or =
020A:8FA1  26: F6 45 05 20			test	byte ptr es:[di+5],20h	; ' '
020A:8FA6  75 03				jnz	$+5			; Jump if not zero
020A:8FA8  E9 0176				jmp	$+179h
							                        ;* No entry point to code
020A:8FAB  26: F6 45 07 40			test	byte ptr es:[di+7],40h	; '@'
020A:8FB0  75 34				jnz	$+36h			; Jump if not zero
020A:8FB2  80 3E 2193 02			cmp	byte ptr ds:[2193h],2	; (020A:2193=0)
020A:8FB7  72 2D				jb	$+2Fh			; Jump if below
020A:8FB9  80 3E 2193 03			cmp	byte ptr ds:[2193h],3	; (020A:2193=0)
020A:8FBE  77 19				ja	$+1Bh			; Jump if above
020A:8FC0  BE 25A6				mov	si,25A6h
020A:8FC3  80 3E 4728 00			cmp	byte ptr ds:[4728h],0	; (020A:4728=7Ch)
020A:8FC8  74 03				je	$+5			; Jump if equal
020A:8FCA  BE 25AE				mov	si,25AEh
020A:8FCD  9A 1481:6800				call	far ptr $-27CDh
020A:8FD2  C6 06 3D2B 00			mov	byte ptr ds:[3D2Bh],0	; (020A:3D2B=0F6h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 254

020A:8FD7  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:8FD9  BE 25B8				mov	si,25B8h
020A:8FDC  9A 1481:6800				call	far ptr $-27DCh
020A:8FE1  C6 06 4718 01			mov	byte ptr ds:[4718h],1	; (020A:4718=5Ch)
020A:8FE6  26: F6 45 07 10			test	byte ptr es:[di+7],10h
020A:8FEB  74 6F				jz	$+71h			; Jump if zero
020A:8FED  26: 8A 65 04				mov	ah,es:[di+4]
020A:8FF1  80 E4 3F				and	ah,3Fh			; '?'
020A:8FF4  8A C7				mov	al,bh
020A:8FF6  24 F0				and	al,0F0h
020A:8FF8  A8 20				test	al,20h			; ' '
020A:8FFA  74 4E				jz	$+50h			; Jump if zero
020A:8FFC  F6 C4 10				test	ah,10h
020A:8FFF  75 58				jnz	$+5Ah			; Jump if not zero
020A:9001  26: 8B 4D 08				mov	cx,es:[di+8]
020A:9005  83 F9 0A				cmp	cx,0Ah
020A:9008  73 4F				jae	$+51h			; Jump if above or =
020A:900A  3C F0				cmp	al,0F0h
020A:900C  75 08				jne	$+0Ah			; Jump if not equal
020A:900E  26: C7 45 08 0008			mov	word ptr es:[di+8],8
020A:9014  EB 28				jmp	short $+2Ah
							                        ;* No entry point to code
020A:9016  83 F9 08				cmp	cx,8
020A:9019  73 3E				jae	$+40h			; Jump if above or =
020A:901B  3C E0				cmp	al,0E0h
020A:901D  75 08				jne	$+0Ah			; Jump if not equal
020A:901F  26: C7 45 08 0006			mov	word ptr es:[di+8],6
020A:9025  EB 17				jmp	short $+19h
							                        ;* No entry point to code
020A:9027  83 F9 04				cmp	cx,4
020A:902A  73 2D				jae	$+2Fh			; Jump if above or =
020A:902C  3C B0				cmp	al,0B0h
020A:902E  75 08				jne	$+0Ah			; Jump if not equal
020A:9030  26: C7 45 08 0004			mov	word ptr es:[di+8],4
020A:9036  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:9038  26: C7 45 08 0002			mov	word ptr es:[di+8],2
020A:903E  26: 80 65 04 C0			and	byte ptr es:[di+4],0C0h
020A:9043  26: 80 4D 04 02			or	byte ptr es:[di+4],2
020A:9048  EB 0F				jmp	short $+11h
							                        ;* No entry point to code
020A:904A  80 FC 01				cmp	ah,1
020A:904D  75 0A				jne	$+0Ch			; Jump if not equal
020A:904F  3C 50				cmp	al,50h			; 'P'
020A:9051  75 06				jne	$+8			; Jump if not equal
020A:9053  26: C7 45 08 000A			mov	word ptr es:[di+8],0Ah
020A:9059  E9 014E				jmp	$+151h
							                        ;* No entry point to code
020A:905C  F6 C7 20				test	bh,20h			; ' '
020A:905F  75 F8				jnz	$-6			; Jump if not zero
020A:9061  26: 8A 4D 04				mov	cl,es:[di+4]
020A:9065  80 E1 3F				and	cl,3Fh			; '?'
020A:9068  80 F9 21				cmp	cl,21h			; '!'
020A:906B  75 1D				jne	$+1Fh			; Jump if not equal
020A:906D  9A 1481:7CE0				call	far ptr $-138Dh
020A:9072  72 16				jc	$+18h			; Jump if carry Set
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 255

020A:9074  26: 83 7D 08 02			cmp	word ptr es:[di+8],2
020A:9079  72 0F				jb	$+11h			; Jump if below
020A:907B  26: 83 65 08 FE			and	word ptr es:[di+8],0FFFEh
020A:9080  26: 80 65 04 C0			and	byte ptr es:[di+4],0C0h
020A:9085  26: 80 4D 04 22			or	byte ptr es:[di+4],22h	; '"'
020A:908A  E9 011D				jmp	$+120h
							                        ;* No entry point to code
020A:908D  BF 41A1				mov	di,41A1h
020A:9090  A1 2FC6				mov	ax,word ptr ds:[2FC6h]	; (020A:2FC6=4F4Dh)
020A:9093  89 05				mov	[di],ax
020A:9095  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:9098  89 45 02				mov	[di+2],ax
020A:909B  C6 45 04 01				mov	byte ptr [di+4],1
020A:909F  C6 45 05 04				mov	byte ptr [di+5],4
020A:90A3  80 3E 1657 01			cmp	byte ptr ds:[1657h],1	; (020A:1657=0)
020A:90A8  77 04				ja	$+6			; Jump if above
020A:90AA  80 4D 05 01				or	byte ptr [di+5],1
020A:90AE  C7 45 08 0001			mov	word ptr [di+8],1
020A:90B3  C7 45 06 0000			mov	word ptr [di+6],0
020A:90B8  80 4D 07 10				or	byte ptr [di+7],10h
020A:90BC  F6 C7 20				test	bh,20h			; ' '
020A:90BF  74 3D				jz	$+3Fh			; Jump if zero
020A:90C1  C7 45 08 0002			mov	word ptr [di+8],2
020A:90C6  C6 45 04 02				mov	byte ptr [di+4],2
020A:90CA  F6 06 2320 01			test	byte ptr ds:[2320h],1	; (020A:2320=0)
020A:90CF  75 24				jnz	$+26h			; Jump if not zero
020A:90D1  F6 C7 10				test	bh,10h
020A:90D4  74 28				jz	$+2Ah			; Jump if zero
020A:90D6  06					push	es
020A:90D7  8E 06 2FD2				mov	es,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:90DB  8B					db	8Bh			; Data table (indexed access)
020A:90DC  36					db	36h
020A:90DD  D4 2F		;*		aam	2Fh			; '/' undocumented inst
020A:90DD  D4 2F				db	0D4h, 2Fh
020A:90DF  83 FE FC				cmp	si,0FFFCh
020A:90E2  77 0D				ja	$+0Fh			; Jump if above
020A:90E4  26: 83 3C 00				cmp	word ptr es:[si],0
020A:90E8  75 07				jne	$+9			; Jump if not equal
020A:90EA  26: 83 7C 02 00			cmp	word ptr es:[si+2],0
020A:90EF  74 03				je	$+5			; Jump if equal
020A:90F1  07					pop	es
020A:90F2  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:90F4  07					pop	es
020A:90F5  C6 45 04 04				mov	byte ptr [di+4],4
020A:90F9  C7 45 08 0004			mov	word ptr [di+8],4
020A:90FE  A0 2FC5				mov	al,byte ptr ds:[2FC5h]	; (020A:2FC5=4Dh)
020A:9101  003C			data_177	dw	3Ch			; Data table (indexed access)
020A:9103  74 07				jz	$+9			; Jump if zero
020A:9105  80 65 04 C0				and	byte ptr [di+4],0C0h
020A:9109  08 45 04				or	[di+4],al
020A:910C  E8 F651				call	$-9ACh
020A:910F  26: 8B 3E 0006			mov	di,word ptr es:[6]	; (0000:0006=70h)
020A:9114  E8 CAB5				call	$-3548h
020A:9117  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:911C  74 03				je	$+5			; Jump if equal
020A:911E  E9 01DC				jmp	$+1DFh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 256

							                        ;* No entry point to code
020A:9121  C6 06 3D24 01			mov	byte ptr ds:[3D24h],1	; (020A:3D24=0CBh)
020A:9126  C6 06 1D2B 02			mov	byte ptr ds:[1D2Bh],2	; (020A:1D2B=0)
020A:912B  80 0E 3D2A 10			or	byte ptr ds:[3D2Ah],10h	; (020A:3D2A=0D3h)
020A:9130  80 26 3D2A BF			and	byte ptr ds:[3D2Ah],0BFh	; (020A:3D2A=0D3h)
020A:9135  26: 80 65 07 EF			and	byte ptr es:[di+7],0EFh
020A:913A  80 3E 2193 02			cmp	byte ptr ds:[2193h],2	; (020A:2193=0)
020A:913F  74 07				je	$+9			; Jump if equal
020A:9141  80 3E 2193 04			cmp	byte ptr ds:[2193h],4	; (020A:2193=0)
020A:9146  75 11				jne	$+13h			; Jump if not equal
020A:9148  53					push	bx
020A:9149  A1 2FDA				mov	ax,word ptr ds:[2FDAh]	; (020A:2FDA=4F52h)
020A:914C  26: 8B 5D 02				mov	bx,es:[di+2]
020A:9150  9A 1481:0414				call	far ptr $+72C4h
020A:9155  5B					pop	bx
020A:9156  E9 01A1				jmp	$+1A4h
							                        ;* No entry point to code
020A:9159  9A 1481:09C4				call	far ptr $+786Bh
020A:915E  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:9163  74 07				jz	$+9			; Jump if zero
020A:9165  9A 1481:6828				call	far ptr $-293Dh
020A:916A  EB 21				jmp	short $+23h
							                        ;* No entry point to code
020A:916C  B0 53				mov	al,53h			; 'S'
020A:916E  9A 1481:67A4				call	far ptr $-29CAh
020A:9173  72 02				jc	$+4			; Jump if carry Set
020A:9175  B0 44				mov	al,44h			; 'D'
020A:9177  0A 06 230E				or	al,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:917B  3E: 88 46 00				mov	ds:[bp],al
020A:917F  45					inc	bp
020A:9180  B8 3A53				mov	ax,3A53h
020A:9183  0A 06 230E				or	al,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:9187  3E: 89 46 00				mov	ds:[bp],ax
020A:918B  45					inc	bp
020A:918C  45					inc	bp
020A:918D  3E: C6 46 00 5B			mov	byte ptr ds:[bp],5Bh	; '['
020A:9192  45					inc	bp
020A:9193  53					push	bx
020A:9194  A1 2FDA				mov	ax,word ptr ds:[2FDAh]	; (020A:2FDA=4F52h)
020A:9197  26: 8B 5D 02				mov	bx,es:[di+2]
020A:919B  9A 1481:0414				call	far ptr $+7279h
020A:91A0  5B					pop	bx
020A:91A1  3E: C6 46 00 5D			mov	byte ptr ds:[bp],5Dh	; ']'
020A:91A6  45					inc	bp
020A:91A7  E9 0150				jmp	$+153h
							                        ;* No entry point to code
020A:91AA  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:91AF  75 32				jne	$+34h			; Jump if not equal
020A:91B1  26: F6 45 05 80			test	byte ptr es:[di+5],80h
020A:91B6  75 2B				jnz	$+2Dh			; Jump if not zero
020A:91B8  26: F6 45 05 40			test	byte ptr es:[di+5],40h	; '@'
020A:91BD  75 24				jnz	$+26h			; Jump if not zero
020A:91BF  26: F6 45 07 80			test	byte ptr es:[di+7],80h
020A:91C4  75 1D				jnz	$+1Fh			; Jump if not zero
020A:91C6  26: 8B 05				mov	ax,es:[di]
020A:91C9  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:91CD  72 11				jb	$+13h			; Jump if below
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 257

020A:91CF  77 0A				ja	$+0Ch			; Jump if above
020A:91D1  26: 8B 45 02				mov	ax,es:[di+2]
020A:91D5  3B 06 216E				cmp	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:91D9  72 05				jb	$+7			; Jump if below
020A:91DB  E8 1ADE				call	$+1AE1h
020A:91DE  72 03				jc	$+5			; Jump if carry Set
020A:91E0  E9 FF3E				jmp	$-0BFh
							                        ;* No entry point to code
020A:91E3  26: F6 45 05 80			test	byte ptr es:[di+5],80h
020A:91E8  75 5E				jnz	$+60h			; Jump if not zero
020A:91EA  F6 06 2186 40			test	byte ptr ds:[2186h],40h	; (020A:2186=0FBh) '@'
020A:91EF  74 07				jz	$+9			; Jump if zero
020A:91F1  26: F6 45 05 40			test	byte ptr es:[di+5],40h	; '@'
020A:91F6  74 50				jz	$+52h			; Jump if zero
020A:91F8  26: F6 45 07 40			test	byte ptr es:[di+7],40h	; '@'
020A:91FD  74 0B				jz	$+0Dh			; Jump if zero
020A:91FF  F6 06 2186 80			test	byte ptr ds:[2186h],80h	; (020A:2186=0FBh)
020A:9204  75 02				jnz	$+4			; Jump if not zero
020A:9206  EB 40				jmp	short $+42h
020A:9208  EB 43				jmp	short $+45h
							                        ;* No entry point to code
020A:920A  F6 C7 C0				test	bh,0C0h
020A:920D  74 3E				jz	$+40h			; Jump if zero
020A:920F  26: 8A 45 04				mov	al,es:[di+4]
020A:9213  24 3F				and	al,3Fh			; '?'
020A:9215  8A E7				mov	ah,bh
020A:9217  80 E4 F0				and	ah,0F0h
020A:921A  80 FC 40				cmp	ah,40h			; '@'
020A:921D  75 0A				jne	$+0Ch			; Jump if not equal
020A:921F  3C 01				cmp	al,1
020A:9221  74 2A				je	$+2Ch			; Jump if equal
020A:9223  3C 21				cmp	al,21h			; '!'
020A:9225  74 26				je	$+28h			; Jump if equal
020A:9227  EB 1F				jmp	short $+21h
							                        ;* No entry point to code
020A:9229  80 FC A0				cmp	ah,0A0h
020A:922C  75 11				jne	$+13h			; Jump if not equal
020A:922E  F6 06 2320 01			test	byte ptr ds:[2320h],1	; (020A:2320=0)
020A:9233  75 0F				jnz	$+11h			; Jump if not zero
020A:9235  3C 02				cmp	al,2
020A:9237  74 14				je	$+16h			; Jump if equal
020A:9239  3C 22				cmp	al,22h			; '"'
020A:923B  74 10				je	$+12h			; Jump if equal
020A:923D  EB 09				jmp	short $+0Bh
							                        ;* No entry point to code
020A:923F  80 FC B0				cmp	ah,0B0h
020A:9242  75 04				jne	$+6			; Jump if not equal
020A:9244  3C 04				cmp	al,4
020A:9246  74 05				je	$+7			; Jump if equal
020A:9248  9A 1481:09C4				call	far ptr $+777Ch
020A:924D  80 3E 1CEF 01			cmp	byte ptr ds:[1CEFh],1	; (020A:1CEF=0)
020A:9252  75 3B				jne	$+3Dh			; Jump if not equal
020A:9254  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:9259  74 07				jz	$+9			; Jump if zero
020A:925B  9A 1481:6828				call	far ptr $-2A33h
020A:9260  EB 2D				jmp	short $+2Fh
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 258

020A:9262  80 3E 1CEC 01			cmp	byte ptr ds:[1CECh],1	; (020A:1CEC=0)
020A:9267  74 26				je	$+28h			; Jump if equal
020A:9269  80 3E 2193 00			cmp	byte ptr ds:[2193h],0	; (020A:2193=0)
020A:926E  75 5C				jne	$+5Eh			; Jump if not equal
020A:9270  9A 1481:67A4				call	far ptr $-2ACCh
020A:9275  73 18				jnc	$+1Ah			; Jump if carry=0
020A:9277  B0 53				mov	al,53h			; 'S'
020A:9279  0A 06 230E				or	al,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:927D  3E: 88 46 00				mov	ds:[bp],al
020A:9281  45					inc	bp
020A:9282  3E: 88 46 00				mov	ds:[bp],al
020A:9286  45					inc	bp
020A:9287  3E: C6 46 00 3A			mov	byte ptr ds:[bp],3Ah	; ':'
020A:928C  45					inc	bp
020A:928D  EB 3D				jmp	short $+3Fh
							                        ;* No entry point to code
020A:928F  80 3E 2193 00			cmp	byte ptr ds:[2193h],0	; (020A:2193=0)
020A:9294  75 36				jne	$+38h			; Jump if not equal
020A:9296  26: F6 45 07 40			test	byte ptr es:[di+7],40h	; '@'
020A:929B  74 2F				jz	$+31h			; Jump if zero
020A:929D  80 3E 235D 90			cmp	byte ptr ds:[235Dh],90h	; (020A:235D=0)
020A:92A2  75 28				jne	$+2Ah			; Jump if not equal
020A:92A4  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:92A9  75 21				jne	$+23h			; Jump if not equal
020A:92AB  B0 53				mov	al,53h			; 'S'
020A:92AD  9A 1481:67A4				call	far ptr $-2B09h
020A:92B2  72 02				jc	$+4			; Jump if carry Set
020A:92B4  B0 44				mov	al,44h			; 'D'
020A:92B6  0A 06 230E				or	al,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:92BA  3E: 88 46 00				mov	ds:[bp],al
020A:92BE  45					inc	bp
020A:92BF  B8 3A53				mov	ax,3A53h
020A:92C2  0A 06 230E				or	al,byte ptr ds:[230Eh]	; (020A:230E=0)
020A:92C6  3E: 89 46 00				mov	ds:[bp],ax
020A:92CA  45					inc	bp
020A:92CB  45					inc	bp
020A:92CC  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:92D1  75 2A				jne	$+2Ch			; Jump if not equal
020A:92D3  B9 000A				mov	cx,0Ah
020A:92D6  F6 06 3D29 08			test	byte ptr ds:[3D29h],8	; (020A:3D29=0Bh)
020A:92DB  74 13				jz	$+15h			; Jump if zero
020A:92DD  3E: C6 46 00 5B			mov	byte ptr ds:[bp],5Bh	; '['
020A:92E2  45					inc	bp
020A:92E3  9A 1481:34E0				call	far ptr $-5E03h
020A:92E8  3E: C6 46 00 5D			mov	byte ptr ds:[bp],5Dh	; ']'
020A:92ED  45					inc	bp
020A:92EE  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:92F0  9A 1481:34E0				call	far ptr $-5E10h
020A:92F5  80 26 3D2A BF			and	byte ptr ds:[3D2Ah],0BFh	; (020A:3D2A=0D3h)
020A:92FA  E8 D6D3				call	$-292Ah
020A:92FD  89 3E 1D8B				mov	word ptr ds:[1D8Bh],di	; (020A:1D8B=0)
020A:9301  83 06 1D8B 04			add	word ptr ds:[1D8Bh],4	; (020A:1D8B=0)
020A:9306  80 3E 17A7 06			cmp	byte ptr ds:[17A7h],6	; (020A:17A7=0)
020A:930B  72 07				jb	$+9			; Jump if below
020A:930D  80 3E 17A2 04			cmp	byte ptr ds:[17A2h],4	; (020A:17A2=0)
020A:9312  72 30				jb	$+32h			; Jump if below
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 259

020A:9314  A1 21A8				mov	ax,word ptr ds:[21A8h]	; (020A:21A8=0E1Eh)
020A:9317  A3 21AC				mov	word ptr ds:[21ACh],ax	; (020A:21AC=1C2Eh)
020A:931A  A1 21AA				mov	ax,word ptr ds:[21AAh]	; (020A:21AA=0FF2Eh)
020A:931D  A3 21AE				mov	word ptr ds:[21AEh],ax	; (020A:21AE=0E801h)
020A:9320  A1 21A4				mov	ax,word ptr ds:[21A4h]	; (020A:21A4=0E801h)
020A:9323  A3 21A8				mov	word ptr ds:[21A8h],ax	; (020A:21A8=0E1Eh)
020A:9326  A1 21A6				mov	ax,word ptr ds:[21A6h]	; (020A:21A6=25h)
020A:9329  A3 21AA				mov	word ptr ds:[21AAh],ax	; (020A:21AA=0FF2Eh)
020A:932C  A1 2FD2				mov	ax,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:932F  A3 21A4				mov	word ptr ds:[21A4h],ax	; (020A:21A4=0E801h)
020A:9332  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:9335  A3 21A6				mov	word ptr ds:[21A6h],ax	; (020A:21A6=25h)
020A:9338  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:933D  74 05				je	$+7			; Jump if equal
020A:933F  26: 80 4D 04 40			or	byte ptr es:[di+4],40h	; '@'
020A:9344  C6 06 4718 00			mov	byte ptr ds:[4718h],0	; (020A:4718=5Ch)
020A:9349  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:934E  9C					pushf				; Push flags
020A:934F  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:9354  5A					pop	dx
020A:9355  8E C2				mov	es,dx
020A:9357  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:935C  5A					pop	dx
020A:935D  75 0A				jnz	$+0Ch			; Jump if not zero
020A:935F  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:9364  74 03				je	$+5			; Jump if equal
020A:9366  E8 EA17				call	$-15E6h
020A:9369  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:936E  9D					popf				; Pop flags
020A:936F  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:9374  5F					pop	di
020A:9375  5E					pop	si
020A:9376  5A					pop	dx
020A:9377  5B					pop	bx
020A:9378  C3					retn
							                        ;* No entry point to code
020A:9379  87 DB				xchg	bx,bx
020A:937B  90					nop
020A:937C  50					push	ax
020A:937D  52					push	dx
020A:937E  56					push	si
020A:937F  57					push	di
020A:9380  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:9385  06					push	es
020A:9386  51					push	cx
020A:9387  C6 06 3D24 00			mov	byte ptr ds:[3D24h],0	; (020A:3D24=0CBh)
020A:938C  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:9391  74 05				je	$+7			; Jump if equal
020A:9393  BA 0001				mov	dx,1
020A:9396  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:9398  BA 0004				mov	dx,4
020A:939B  BF 0000				mov	di,0
020A:939E  80 3E 17A3 02			cmp	byte ptr ds:[17A3h],2	; (020A:17A3=0)
020A:93A3  75 46				jne	$+48h			; Jump if not equal
020A:93A5  80 3E 3D9C 00			cmp	byte ptr ds:[3D9Ch],0	; (020A:3D9C=3Ch)
020A:93AA  75 08				jne	$+0Ah			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 260

020A:93AC  F7 06 3D41 0040			test	word ptr ds:[3D41h],40h	; (020A:3D41=23h)
020A:93B2  75 34				jnz	$+36h			; Jump if not zero
020A:93B4  83 FA 04				cmp	dx,4
020A:93B7  74 28				je	$+2Ah			; Jump if equal
020A:93B9  F6 06 3D9C 02			test	byte ptr ds:[3D9Ch],2	; (020A:3D9C=3Ch)
020A:93BE  74 2B				jz	$+2Dh			; Jump if zero
020A:93C0  F6 06 3D9C 80			test	byte ptr ds:[3D9Ch],80h	; (020A:3D9C=3Ch)
020A:93C5  74 21				jz	$+23h			; Jump if zero
020A:93C7  3B 1E 216C				cmp	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:93CB  75 1B				jne	$+1Dh			; Jump if not equal
020A:93CD  52					push	dx
020A:93CE  8B 16 216E				mov	dx,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:93D2  2B D0				sub	dx,ax
020A:93D4  73 02				jnc	$+4			; Jump if carry=0
020A:93D6  F7 D2				not	dx
020A:93D8  81 FA 0080				cmp	dx,80h
020A:93DC  5A					pop	dx
020A:93DD  72 0C				jc	$+0Eh			; Jump if carry Set
020A:93DF  EB 07				jmp	short $+9
							                        ;* No entry point to code
020A:93E1  F6 06 3D9C 01			test	byte ptr ds:[3D9Ch],1	; (020A:3D9C=3Ch)
020A:93E6  74 03				jz	$+5			; Jump if zero
020A:93E8  E8 13B9				call	$+13BCh
020A:93EB  E8 CFF2				call	$-300Bh
020A:93EE  73 03				jnc	$+5			; Jump if carry=0
020A:93F0  E9 013D				jmp	$+140h
							                        ;* No entry point to code
020A:93F3  83 FB 01				cmp	bx,1
020A:93F6  75 08				jne	$+0Ah			; Jump if not equal
020A:93F8  3D 03FF				cmp	ax,3FFh
020A:93FB  77 03				ja	$+5			; Jump if above
020A:93FD  E9 0093				jmp	$+96h
							                        ;* No entry point to code
020A:9400  83 3E 1D80 00			cmp	word ptr ds:[1D80h],0	; (020A:1D80=0)
020A:9405  75 43				jne	$+45h			; Jump if not equal
020A:9407  57					push	di
020A:9408  50					push	ax
020A:9409  BF 1978				mov	di,1978h
020A:940C  80 3D EB				cmp	byte ptr [di],0EBh
020A:940F  74 0F				je	$+11h			; Jump if equal
020A:9411  80 3D E3				cmp	byte ptr [di],0E3h
020A:9414  74 0A				je	$+0Ch			; Jump if equal
020A:9416  80 3D 70				cmp	byte ptr [di],70h	; 'p'
020A:9419  72 2D				jb	$+2Fh			; Jump if below
020A:941B  80 3D 7F				cmp	byte ptr [di],7Fh
020A:941E  77 28				ja	$+2Ah			; Jump if above
020A:9420  F6 06 2320 02			test	byte ptr ds:[2320h],2	; (020A:2320=0)
020A:9425  75 21				jnz	$+23h			; Jump if not zero
020A:9427  2B 06 216E				sub	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:942B  3D 0003				cmp	ax,3
020A:942E  77 18				ja	$+1Ah			; Jump if above
020A:9430  3D 0002				cmp	ax,2
020A:9433  74 0A				je	$+0Ch			; Jump if equal
020A:9435  72 11				jc	$+13h			; Jump if carry Set
020A:9437  80 7D 02 90				cmp	byte ptr [di+2],90h
020A:943B  74 02				je	$+4			; Jump if equal
020A:943D  EB 09				jmp	short $+0Bh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 261

							                        ;* No entry point to code
020A:943F  C6 06 1D5C F5			mov	byte ptr ds:[1D5Ch],0F5h	; (020A:1D5C=0)
020A:9444  58					pop	ax
020A:9445  5F					pop	di
020A:9446  EB 4B				jmp	short $+4Dh
							                        ;* No entry point to code
020A:9448  58					pop	ax
020A:9449  5F					pop	di
020A:944A  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:944F  74 42				je	$+44h			; Jump if equal
020A:9451  BF 41A1				mov	di,41A1h
020A:9454  A1 2FD2				mov	ax,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:9457  89 05				mov	[di],ax
020A:9459  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:945C  89 45 02				mov	[di+2],ax
020A:945F  32 C9				xor	cl,cl			; Zero register
020A:9461  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:9466  74 03				je	$+5			; Jump if equal
020A:9468  E9 009C				jmp	$+9Fh
							                        ;* No entry point to code
020A:946B  C6 45 04 00				mov	byte ptr [di+4],0
020A:946F  C6 45 05 08				mov	byte ptr [di+5],8
020A:9473  80 3E 1657 01			cmp	byte ptr ds:[1657h],1	; (020A:1657=0)
020A:9478  77 04				ja	$+6			; Jump if above
020A:947A  C6 45 05 09				mov	byte ptr [di+5],9
020A:947E  C6 45 06 00				mov	byte ptr [di+6],0
020A:9482  C6 45 32 00				mov	byte ptr [di+32h],0
020A:9486  C7 45 07 0000			mov	word ptr [di+7],0
020A:948B  C7 45 3B 0000			mov	word ptr [di+3Bh],0
020A:9490  E9 008B				jmp	$+8Eh
							                        ;* No entry point to code
020A:9493  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:9496  2B 06 216E				sub	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:949A  A3 2326				mov	word ptr ds:[2326h],ax	; (020A:2326=0)
020A:949D  C7 06 2328 0000			mov	word ptr ds:[2328h],0	; (020A:2328=0)
020A:94A3  3E: C6 46 00 24			mov	byte ptr ds:[bp],24h	; '$'
020A:94A8  45					inc	bp
020A:94A9  9A 1481:8030				call	far ptr $-1479h
020A:94AE  C6 06 3D24 01			mov	byte ptr ds:[3D24h],1	; (020A:3D24=0CBh)
020A:94B3  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:94B6  2B 06 1D10				sub	ax,word ptr ds:[1D10h]	; (020A:1D10=0)
020A:94BA  3D 000F				cmp	ax,0Fh
020A:94BD  77 02				ja	$+4			; Jump if above
020A:94BF  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:94C1  59					pop	cx
020A:94C2  E9 02B2				jmp	$+2B5h
							                        ;* No entry point to code
020A:94C5  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:94CA  74 37				je	$+39h			; Jump if equal
020A:94CC  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:94CF  3B 06 2FD2				cmp	ax,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:94D3  75 2E				jne	$+30h			; Jump if not equal
020A:94D5  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:94D8  3D 0010				cmp	ax,10h
020A:94DB  76 03				jbe	$+5			; Jump if below or =
020A:94DD  2D 0010				sub	ax,10h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 262

020A:94E0  3B 06 1D10				cmp	ax,word ptr ds:[1D10h]	; (020A:1D10=0)
020A:94E4  73 1D				jae	$+1Fh			; Jump if above or =
020A:94E6  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:94E9  3B 06 22D0				cmp	ax,word ptr ds:[22D0h]	; (020A:22D0=300h)
020A:94ED  76 14				jbe	$+16h			; Jump if below or =
020A:94EF  3D 0300				cmp	ax,300h
020A:94F2  76 0C				jbe	$+0Eh			; Jump if below or =
020A:94F4  2D 0300				sub	ax,300h
020A:94F7  3B 06 216E				cmp	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:94FB  77 06				ja	$+8			; Jump if above
020A:94FD  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:9500  A3 22D0				mov	word ptr ds:[22D0h],ax	; (020A:22D0=300h)
020A:9503  59					pop	cx
020A:9504  E9 0270				jmp	$+273h
							                        ;* No entry point to code
020A:9507  C6 45 04 00				mov	byte ptr [di+4],0
020A:950B  C6 45 05 00				mov	byte ptr [di+5],0
020A:950F  80 3E 1657 01			cmp	byte ptr ds:[1657h],1	; (020A:1657=0)
020A:9514  77 04				ja	$+6			; Jump if above
020A:9516  C6 45 05 01				mov	byte ptr [di+5],1
020A:951A  C6 45 06 00				mov	byte ptr [di+6],0
020A:951E  E8 F23F				call	$-0DBEh
020A:9521  26: 8B 3E 0006			mov	di,word ptr es:data_5+1	; (020A:0006=3)
020A:9526  89 3E 3D27				mov	word ptr ds:[3D27h],di	; (020A:3D27=3D3Ch)
020A:952A  E8 C69F				call	$-395Eh
020A:952D  E9 00AA				jmp	$+0ADh
							                        ;* No entry point to code
020A:9530  89 3E 3D27				mov	word ptr ds:[3D27h],di	; (020A:3D27=3D3Ch)
020A:9534  26: F6 45 05 80			test	byte ptr es:[di+5],80h
020A:9539  75 21				jnz	$+23h			; Jump if not zero
020A:953B  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:9540  75 24				jne	$+26h			; Jump if not equal
020A:9542  26: F6 45 05 40			test	byte ptr es:[di+5],40h	; '@'
020A:9547  75 1D				jnz	$+1Fh			; Jump if not zero
020A:9549  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:954C  26: 3B 05				cmp	ax,es:[di]
020A:954F  77 0B				ja	$+0Dh			; Jump if above
020A:9551  72 13				jc	$+15h			; Jump if carry Set
020A:9553  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:9556  26: 3B 45 02				cmp	ax,es:[di+2]
020A:955A  76 0A				jbe	$+0Ch			; Jump if below or =
020A:955C  C6 06 230D 01			mov	byte ptr ds:[230Dh],1	; (020A:230D=0)
020A:9561  C6 06 3D22 01			mov	byte ptr ds:[3D22h],1	; (020A:3D22=0C8h)
020A:9566  B9 003D				mov	cx,3Dh
020A:9569  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:956E  74 3A				je	$+3Ch			; Jump if equal
020A:9570  B9 0007				mov	cx,7
020A:9573  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:9576  3B 06 2FD2				cmp	ax,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:957A  75 2E				jne	$+30h			; Jump if not equal
020A:957C  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:957F  3D 0010				cmp	ax,10h
020A:9582  76 03				jbe	$+5			; Jump if below or =
020A:9584  2D 0010				sub	ax,10h
020A:9587  3B 06 1D10				cmp	ax,word ptr ds:[1D10h]	; (020A:1D10=0)
020A:958B  73 1D				jae	$+1Fh			; Jump if above or =
020A:958D  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 263

020A:9590  3B 06 22D0				cmp	ax,word ptr ds:[22D0h]	; (020A:22D0=300h)
020A:9594  76 14				jbe	$+16h			; Jump if below or =
020A:9596  3D 0300				cmp	ax,300h
020A:9599  76 0C				jbe	$+0Eh			; Jump if below or =
020A:959B  2D 0300				sub	ax,300h
020A:959E  3B 06 216E				cmp	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:95A2  77 06				ja	$+8			; Jump if above
020A:95A4  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:95A7  A3 22D0				mov	word ptr ds:[22D0h],ax	; (020A:22D0=300h)
020A:95AA  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:95AF  75 29				jne	$+2Bh			; Jump if not equal
020A:95B1  9A 1481:34E0				call	far ptr $-60D1h
020A:95B6  81 FD 19CB				cmp	bp,19CBh
020A:95BA  72 1E				jb	$+20h			; Jump if below
020A:95BC  81 FD 1A84				cmp	bp,1A84h
020A:95C0  73 18				jae	$+1Ah			; Jump if above or =
020A:95C2  80 3E 1A5D 28			cmp	byte ptr ds:[1A5Dh],28h	; (020A:1A5D=0C5h) '('
020A:95C7  74 11				je	$+13h			; Jump if equal
020A:95C9  F6 06 1657 02			test	byte ptr ds:[1657h],2	; (020A:1657=0)
020A:95CE  74 07				jz	$+9			; Jump if zero
020A:95D0  9A 1481:7CE0				call	far ptr $-18F0h
020A:95D5  73 03				jnc	$+5			; Jump if carry=0
020A:95D7  E8 0FC6				call	$+0FC9h
020A:95DA  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:95DF  74 03				je	$+5			; Jump if equal
020A:95E1  E9 0102				jmp	$+105h
							                        ;* No entry point to code
020A:95E4  59					pop	cx
020A:95E5  51					push	cx
020A:95E6  F6 C1 02				test	cl,2
020A:95E9  74 0E				jz	$+10h			; Jump if zero
020A:95EB  26: 8A 45 04				mov	al,es:[di+4]
020A:95EF  24 07				and	al,7
020A:95F1  74 03				jz	$+5			; Jump if zero
020A:95F3  E9 00F0				jmp	$+0F3h
020A:95F6  E9 00A7				jmp	$+0AAh
							                        ;* No entry point to code
020A:95F9  26: F6 45 04 18			test	byte ptr es:[di+4],18h
020A:95FE  75 12				jnz	$+14h			; Jump if not zero
020A:9600  F7 06 3D3C 0400			test	word ptr ds:[3D3Ch],400h	; (020A:3D3C=2477h)
020A:9606  75 07				jnz	$+9			; Jump if not zero
020A:9608  80 3E 1F85 01			cmp	byte ptr ds:[1F85h],1	; (020A:1F85=0)
020A:960D  75 03				jne	$+5			; Jump if not equal
020A:960F  E9 008E				jmp	$+91h
							                        ;* No entry point to code
020A:9612  26: 8B 05				mov	ax,es:[di]
020A:9615  A3 2194				mov	word ptr ds:[2194h],ax	; (020A:2194=0E1Eh)
020A:9618  26: 8B 45 02				mov	ax,es:[di+2]
020A:961C  A3 2196				mov	word ptr ds:[2196h],ax	; (020A:2196=0FF2Eh)
020A:961F  80 0E 2187 02			or	byte ptr ds:[2187h],2	; (020A:2187=0E8h)
020A:9624  C7 06 21B2 FFFF			mov	word ptr ds:[21B2h],0FFFFh	; (020A:21B2=0E1Eh)
020A:962A  26: 8A 45 32				mov	al,es:[di+32h]
020A:962E  24 38				and	al,38h			; '8'
020A:9630  3C 38				cmp	al,38h			; '8'
020A:9632  75 6C				jne	$+6Eh			; Jump if not equal
020A:9634  26: F6 45 05 20			test	byte ptr es:[di+5],20h	; ' '
020A:9639  74 05				jz	$+7			; Jump if zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 264

020A:963B  C6 06 424A 01			mov	byte ptr ds:[424Ah],1	; (020A:424A=1Dh)
020A:9640  C6 06 2187 05			mov	byte ptr ds:[2187h],5	; (020A:2187=0E8h)
020A:9645  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:964A  75 54				jne	$+56h			; Jump if not equal
020A:964C  C6 06 45A4 86			mov	byte ptr ds:[45A4h],86h	; (020A:45A4=77h)
020A:9651  51					push	cx
020A:9652  57					push	di
020A:9653  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:9658  06					push	es
020A:9659  E8 E262				call	$-1D9Bh
020A:965C  55					push	bp
020A:965D  E8 D604				call	$-29F9h
020A:9660  8B FD				mov	di,bp
020A:9662  5D					pop	bp
020A:9663  BE 2F7D				mov	si,2F7Dh
020A:9666  B9 2F95				mov	cx,2F95h
020A:9669  81 E9 2F7B				sub	cx,2F7Bh
020A:966D  83 E9 02				sub	cx,2
020A:9670  FC					cld				; Clear direction
020A:9671  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:9673  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:9678  9C					pushf				; Push flags
020A:9679  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:967E  5A					pop	dx
020A:967F  8E C2				mov	es,dx
020A:9681  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:9686  5A					pop	dx
020A:9687  75 0A				jnz	$+0Ch			; Jump if not zero
020A:9689  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:968E  74 03				je	$+5			; Jump if equal
020A:9690  E8 E6ED				call	$-1910h
020A:9693  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:9698  9D					popf				; Pop flags
020A:9699  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:969E  5F					pop	di
020A:969F  59					pop	cx
020A:96A0  26: 8A 45 04				mov	al,es:[di+4]
020A:96A4  A8 01				test	al,1
020A:96A6  74 04				jz	$+6			; Jump if zero
020A:96A8  A8 02				test	al,2
020A:96AA  75 14				jnz	$+16h			; Jump if not zero
020A:96AC  0C 03				or	al,3
020A:96AE  26: 88 45 04				mov	es:[di+4],al
020A:96B2  57					push	di
020A:96B3  83 C7 09				add	di,9
020A:96B6  BE 232C				mov	si,232Ch
020A:96B9  B9 0029				mov	cx,29h
020A:96BC  FC					cld				; Clear direction
020A:96BD  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:96BF  5F					pop	di
020A:96C0  26: 8A 45 32				mov	al,es:[di+32h]
020A:96C4  A8 80				test	al,80h
020A:96C6  74 0D				jz	$+0Fh			; Jump if zero
020A:96C8  26: 8B 4D 33				mov	cx,es:[di+33h]
020A:96CC  C6 06 230C 01			mov	byte ptr ds:[230Ch],1	; (020A:230C=0)
020A:96D1  89 0E 234C				mov	word ptr ds:[234Ch],cx	; (020A:234C=0)
020A:96D5  A8 40				test	al,40h			; '@'
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 265

020A:96D7  74 0D				jz	$+0Fh			; Jump if zero
020A:96D9  26: 8B 4D 35				mov	cx,es:[di+35h]
020A:96DD  C6 06 230C 01			mov	byte ptr ds:[230Ch],1	; (020A:230C=0)
020A:96E2  89 0E 234A				mov	word ptr ds:[234Ah],cx	; (020A:234A=0)
020A:96E6  80 3E 17A7 06			cmp	byte ptr ds:[17A7h],6	; (020A:17A7=0)
020A:96EB  72 07				jb	$+9			; Jump if below
020A:96ED  80 3E 17A2 04			cmp	byte ptr ds:[17A2h],4	; (020A:17A2=0)
020A:96F2  72 13				jb	$+15h			; Jump if below
020A:96F4  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:96F9  74 07				je	$+9			; Jump if equal
020A:96FB  26: F6 45 04 20			test	byte ptr es:[di+4],20h	; ' '
020A:9700  75 05				jnz	$+7			; Jump if not zero
020A:9702  26: 80 4D 04 40			or	byte ptr es:[di+4],40h	; '@'
020A:9707  59					pop	cx
020A:9708  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:970D  75 2A				jne	$+2Ch			; Jump if not equal
020A:970F  F6 C1 01				test	cl,1
020A:9712  74 05				jz	$+7			; Jump if zero
020A:9714  26: 80 4D 04 80			or	byte ptr es:[di+4],80h
020A:9719  F6 06 4762 01			test	byte ptr ds:[4762h],1	; (020A:4762=5Ah)
020A:971E  74 17				jz	$+19h			; Jump if zero
020A:9720  80 3E 17A3 02			cmp	byte ptr ds:[17A3h],2	; (020A:17A3=0)
020A:9725  75 10				jne	$+12h			; Jump if not equal
020A:9727  9A 1481:4798				call	far ptr $-4F8Fh
020A:972C  C7 06 4741 FFFF			mov	word ptr ds:[4741h],0FFFFh	; (020A:4741=892Dh)
020A:9732  C6 06 4761 00			mov	byte ptr ds:[4761h],0	; (020A:4761=97h)
020A:9737  EB 3E				jmp	short $+40h
							                        ;* No entry point to code
020A:9739  F6 C1 04				test	cl,4
020A:973C  75 18				jnz	$+1Ah			; Jump if not zero
020A:973E  A1 219C				mov	ax,word ptr ds:[219Ch]	; (020A:219C=2Fh)
020A:9741  A3 21A0				mov	word ptr ds:[21A0h],ax	; (020A:21A0=0FF2Eh)
020A:9744  A1 219E				mov	ax,word ptr ds:[219Eh]	; (020A:219E=0E1Eh)
020A:9747  A3 21A2				mov	word ptr ds:[21A2h],ax	; (020A:21A2=182Eh)
020A:974A  A1 2198				mov	ax,word ptr ds:[2198h]	; (020A:2198=142Eh)
020A:974D  A3 219C				mov	word ptr ds:[219Ch],ax	; (020A:219C=2Fh)
020A:9750  A1 219A				mov	ax,word ptr ds:[219Ah]	; (020A:219A=0E801h)
020A:9753  A3 219E				mov	word ptr ds:[219Eh],ax	; (020A:219E=0E1Eh)
020A:9756  A1 2FD2				mov	ax,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:9759  A3 2198				mov	word ptr ds:[2198h],ax	; (020A:2198=142Eh)
020A:975C  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:975F  A3 219A				mov	word ptr ds:[219Ah],ax	; (020A:219A=0E801h)
020A:9762  89 3E 3D25				mov	word ptr ds:[3D25h],di	; (020A:3D25=168Bh)
020A:9766  F6 C1 08				test	cl,8
020A:9769  74 0C				jz	$+0Eh			; Jump if zero
020A:976B  9A 1481:7CE0				call	far ptr $-1A8Bh
020A:9770  72 05				jc	$+7			; Jump if carry Set
020A:9772  26: C6 45 06 FF			mov	byte ptr es:[di+6],0FFh
020A:9777  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:977C  9C					pushf				; Push flags
020A:977D  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:9782  5A					pop	dx
020A:9783  8E C2				mov	es,dx
020A:9785  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:978A  5A					pop	dx
020A:978B  75 0A				jnz	$+0Ch			; Jump if not zero
020A:978D  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 266

020A:9792  74 03				je	$+5			; Jump if equal
020A:9794  E8 E5E9				call	$-1A14h
020A:9797  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:979C  9D					popf				; Pop flags
020A:979D  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:97A2  5F					pop	di
020A:97A3  5E					pop	si
020A:97A4  5A					pop	dx
020A:97A5  58					pop	ax
020A:97A6  C3					retn
							                        ;* No entry point to code
020A:97A7  90					nop
020A:97A8  E8 F485				call	$-0B78h
020A:97AB  CB					retf
							                        ;* No entry point to code
020A:97AC  E8 FBCD				call	$-430h
020A:97AF  CB					retf				; Return far
020A:97B0  00					db	0
020A:97B1  00 00				add	[bx+si],al
020A:97B3  00 B4 9A04				add	byte ptr ds:[9A04h][si],dh	; (020A:9A04=18h)
020A:97B7  90					nop
020A:97B8  2F					das				; Decimal adjust
020A:97B9  81 14 00E8				adc	word ptr [si],0E8h
020A:97BD  E1 E8				loopz	$-16h			; Loop if zf=1, cx>0

020A:97BF  24 E1				and	al,0E1h
020A:97C1  A3 1CE8				mov	word ptr ds:[1CE8h],ax	; (020A:1CE8=0)
020A:97C4  E8 1565				call	$+1568h
020A:97C7  A1 1976				mov	ax,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:97CA  3D 0000				cmp	ax,0
020A:97CD  75 0D				jne	$+0Fh			; Jump if not equal
020A:97CF  83 3E 1974 00			cmp	word ptr ds:[1974h],0	; (020A:1974=10EBh)
020A:97D4  75 06				jne	$+8			; Jump if not equal
020A:97D6  B8 0002				mov	ax,2
020A:97D9  E9 0C4A				jmp	$+0C4Dh
							                        ;* No entry point to code
020A:97DC  83 3E 1858 00			cmp	word ptr ds:[1858h],0	; (020A:1858=0)
020A:97E1  75 07				jne	$+9			; Jump if not equal
020A:97E3  83 3E 185A 00			cmp	word ptr ds:[185Ah],0	; (020A:185A=3BFh)
020A:97E8  74 0E				je	$+10h			; Jump if equal
020A:97EA  A1 1858				mov	ax,word ptr ds:[1858h]	; (020A:1858=0)
020A:97ED  A3 1976				mov	word ptr ds:[1976h],ax	; (020A:1976=6B4h)
020A:97F0  A1 185A				mov	ax,word ptr ds:[185Ah]	; (020A:185A=3BFh)
020A:97F3  A3 1974				mov	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:97F6  EB 2F				jmp	short $+31h
							                        ;* No entry point to code
020A:97F8  83 3E 1854 00			cmp	word ptr ds:[1854h],0	; (020A:1854=48h)
020A:97FD  75 07				jne	$+9			; Jump if not equal
020A:97FF  83 3E 1856 00			cmp	word ptr ds:[1856h],0	; (020A:1856=80h)
020A:9804  74 21				je	$+23h			; Jump if equal
020A:9806  A1 1974				mov	ax,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:9809  2B 06 1856				sub	ax,word ptr ds:[1856h]	; (020A:1856=80h)
020A:980D  A3 1974				mov	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:9810  A1 1976				mov	ax,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:9813  73 01				jnc	$+3			; Jump if carry=0
020A:9815  48					dec	ax
020A:9816  2B 06 1854				sub	ax,word ptr ds:[1854h]	; (020A:1854=48h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 267

020A:981A  A3 1976				mov	word ptr ds:[1976h],ax	; (020A:1976=6B4h)
020A:981D  73 08				jnc	$+0Ah			; Jump if carry=0
020A:981F  C6 06 231F 43			mov	byte ptr ds:[231Fh],43h	; (020A:231F=0) 'C'
020A:9824  E9 015A				jmp	$+15Dh
							                        ;* No entry point to code
020A:9827  A1 1976				mov	ax,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:982A  8B D8				mov	bx,ax
020A:982C  83 E3 F0				and	bx,0FFF0h
020A:982F  C6 06 231F 41			mov	byte ptr ds:[231Fh],41h	; (020A:231F=0) 'A'
020A:9834  74 03				jz	$+5			; Jump if zero
020A:9836  E9 00E3				jmp	$+0E6h
							                        ;* No entry point to code
020A:9839  B1 0C				mov	cl,0Ch
020A:983B  D3 E0				shl	ax,cl			; Shift w/zeros fill
020A:983D  8B 1E 1974				mov	bx,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:9841  B1 04				mov	cl,4
020A:9843  D3 EB				shr	bx,cl			; Shift w/zeros fill
020A:9845  03 D8				add	bx,ax
020A:9847  43					inc	bx
020A:9848  43					inc	bx
020A:9849  83 FB 01				cmp	bx,1
020A:984C  C6 06 231F 42			mov	byte ptr ds:[231Fh],42h	; (020A:231F=0) 'B'
020A:9851  76 28				jbe	$+2Ah			; Jump if below or =
020A:9853  8B D3				mov	dx,bx
020A:9855  BB 0008				mov	bx,8
020A:9858  33 C0				xor	ax,ax			; Zero register
020A:985A  33 C9				xor	cx,cx			; Zero register
020A:985C  03 8F 185A				add	cx,word ptr ds:[185Ah][bx]	; (020A:185A=3BFh)
020A:9860  73 01				jnc	$+3			; Jump if carry=0
020A:9862  40					inc	ax
020A:9863  03 87 1858				add	ax,word ptr ds:[1858h][bx]	; (020A:1858=0)
020A:9867  83 C3 08				add	bx,8
020A:986A  83 FB 20				cmp	bx,20h
020A:986D  76 ED				jbe	$-11h			; Jump if below or =
020A:986F  8B D8				mov	bx,ax
020A:9871  83 E3 F0				and	bx,0FFF0h
020A:9874  C6 06 231F 49			mov	byte ptr ds:[231Fh],49h	; (020A:231F=0) 'I'
020A:9879  74 03				jz	$+5			; Jump if zero
020A:987B  E9 009E				jmp	$+0A1h
							                        ;* No entry point to code
020A:987E  8B D9				mov	bx,cx
020A:9880  B1 0C				mov	cl,0Ch
020A:9882  D3 E0				shl	ax,cl			; Shift w/zeros fill
020A:9884  B1 04				mov	cl,4
020A:9886  D3 EB				shr	bx,cl			; Shift w/zeros fill
020A:9888  03 D8				add	bx,ax
020A:988A  72 EF				jc	$-0Fh			; Jump if carry Set
020A:988C  43					inc	bx
020A:988D  0B DB				or	bx,bx			; Zero ?
020A:988F  C6 06 231F 4A			mov	byte ptr ds:[231Fh],4Ah	; (020A:231F=0) 'J'
020A:9894  74 E5				jz	$-19h			; Jump if zero
020A:9896  03 D3				add	dx,bx
020A:9898  72 E1				jc	$-1Dh			; Jump if carry Set
020A:989A  E8 E048				call	$-1FB5h
020A:989D  8C C9				mov	cx,cs
020A:989F  2B C1				sub	ax,cx
020A:98A1  8B 0E 17A9				mov	cx,word ptr ds:[17A9h]	; (020A:17A9=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 268

020A:98A5  2B C8				sub	cx,ax
020A:98A7  72 3F				jc	$+41h			; Jump if carry Set
020A:98A9  83 E9 20				sub	cx,20h
020A:98AC  72 3A				jc	$+3Ch			; Jump if carry Set
020A:98AE  3B CA				cmp	cx,dx
020A:98B0  76 6A				jbe	$+6Ch			; Jump if below or =
020A:98B2  BB FFFF				mov	bx,0FFFFh
020A:98B5  E8 E02D				call	$-1FD0h
020A:98B8  51					push	cx
020A:98B9  8B C8				mov	cx,ax
020A:98BB  E8 E021				call	$-1FDCh
020A:98BE  3B C1				cmp	ax,cx
020A:98C0  59					pop	cx
020A:98C1  77 1E				ja	$+20h			; Jump if above
020A:98C3  83 3E 1CE6 00			cmp	word ptr ds:[1CE6h],0	; (020A:1CE6=0)
020A:98C8  74 20				je	$+22h			; Jump if equal
020A:98CA  E8 E012				call	$-1FEBh
020A:98CD  05 1000				add	ax,1000h
020A:98D0  3B 06 1CE6				cmp	ax,word ptr ds:[1CE6h]	; (020A:1CE6=0)
020A:98D4  76 0B				jbe	$+0Dh			; Jump if below or =
020A:98D6  2B 06 1CE6				sub	ax,word ptr ds:[1CE6h]	; (020A:1CE6=0)
020A:98DA  B1 04				mov	cl,4
020A:98DC  D3 E0				shl	ax,cl			; Shift w/zeros fill
020A:98DE  2B D8				sub	bx,ax
020A:98E0  4B					dec	bx
020A:98E1  89 1E 3DA1				mov	word ptr ds:[3DA1h],bx	; (020A:3DA1=0B007h)
020A:98E5  E9 00AE				jmp	$+0B1h
020A:98E8  EB 5D				jmp	short $+5Fh
							                        ;* No entry point to code
020A:98EA  B8 FFFF				mov	ax,0FFFFh
020A:98ED  2D 3292				sub	ax,3292h
020A:98F0  D1 E8				shr	ax,1			; Shift w/zeros fill
020A:98F2  D1 E8				shr	ax,1			; Shift w/zeros fill
020A:98F4  D1 E8				shr	ax,1			; Shift w/zeros fill
020A:98F6  D1 E8				shr	ax,1			; Shift w/zeros fill
020A:98F8  2B CA				sub	cx,dx
020A:98FA  3B C8				cmp	cx,ax
020A:98FC  73 02				jae	$+4			; Jump if above or =
020A:98FE  8B C1				mov	ax,cx
020A:9900  01 06 1CE8				add	word ptr ds:[1CE8h],ax	; (020A:1CE8=0)
020A:9904  E8 DFD8				call	$-2025h
020A:9907  8B D8				mov	bx,ax
020A:9909  A1 1CE8				mov	ax,word ptr ds:[1CE8h]	; (020A:1CE8=0)
020A:990C  2B C3				sub	ax,bx
020A:990E  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:9910  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:9912  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:9914  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:9916  48					dec	ax
020A:9917  A3 3DA1				mov	word ptr ds:[3DA1h],ax	; (020A:3DA1=0B007h)
020A:991A  EB 7A				jmp	short $+7Ch
							                        ;* No entry point to code
020A:991C  E8 DFC6				call	$-2037h
020A:991F  8C C9				mov	cx,cs
020A:9921  2B C1				sub	ax,cx
020A:9923  8B 0E 17A9				mov	cx,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:9927  2B C8				sub	cx,ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 269

020A:9929  8B D1				mov	dx,cx
020A:992B  B1 04				mov	cl,4
020A:992D  D3 C2				rol	dx,cl			; Rotate
020A:992F  8B CA				mov	cx,dx
020A:9931  83 E1 0F				and	cx,0Fh
020A:9934  83 E2 F0				and	dx,0FFF0h
020A:9937  A1 1976				mov	ax,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:993A  8B 1E 1974				mov	bx,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:993E  2B DA				sub	bx,dx
020A:9940  73 01				jnc	$+3			; Jump if carry=0
020A:9942  48					dec	ax
020A:9943  2B C1				sub	ax,cx
020A:9945  EB 07				jmp	short $+9
							                        ;* No entry point to code
020A:9947  A1 1976				mov	ax,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:994A  8B 1E 1974				mov	bx,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:994E  BE 0008				mov	si,8
020A:9951  03 9C 185A				add	bx,word ptr ds:[185Ah][si]	; (020A:185A=3BFh)
020A:9955  73 01				jnc	$+3			; Jump if carry=0
020A:9957  40					inc	ax
020A:9958  03 84 1858				add	ax,word ptr ds:[1858h][si]	; (020A:1858=0)
020A:995C  83 C6 08				add	si,8
020A:995F  83 FE 20				cmp	si,20h
020A:9962  76 ED				jbe	$-11h			; Jump if below or =
020A:9964  B9 000A				mov	cx,0Ah
020A:9967  D1 E8				shr	ax,1			; Shift w/zeros fill
020A:9969  D1 DB				rcr	bx,1			; Rotate thru carry
020A:996B  E2 FA				loop	$-4			; Loop if cx > 0

020A:996D  3D 0000				cmp	ax,0
020A:9970  75 0F				jne	$+11h			; Jump if not equal
020A:9972  8B C3				mov	ax,bx
020A:9974  B3 01				mov	bl,1
020A:9976  BD 06B3				mov	bp,6B3h
020A:9979  E8 DF1E				call	$-20DFh
020A:997C  9A 1481:0300				call	far ptr $+6984h
020A:9981  E8 DF1C				call	$-20E1h
020A:9984  A0 231F				mov	al,byte ptr ds:[231Fh]	; (020A:231F=0)
020A:9987  E8 DF10				call	$-20EDh
020A:998A  A2 06D1				mov	byte ptr ds:[6D1h],al	; (020A:06D1=1)
020A:998D  E8 DF10				call	$-20EDh
020A:9990  B8 0008				mov	ax,8
020A:9993  E9 0A90				jmp	$+0A93h
							                        ;* No entry point to code
020A:9996  8B 1E 17A9				mov	bx,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:999A  8E 06 448F				mov	es,word ptr ds:[448Fh]	; (020A:448F=1408h)
020A:999E  B4 4A				mov	ah,4Ah
020A:99A0  CD 21				int	21h			; DOS Services  ah=function 4Ah
										;  change memory allocation
										;   bx=bytes/16, es=mem segment
020A:99A2  73 07				jnc	$+9			; Jump if carry=0
020A:99A4  C6 06 231F 44			mov	byte ptr ds:[231Fh],44h	; (020A:231F=0) 'D'
020A:99A9  EB D6				jmp	short $-28h
							                        ;* No entry point to code
020A:99AB  8C C8				mov	ax,cs
020A:99AD  03 06 17A9				add	ax,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:99B1  2D 0010				sub	ax,10h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 270

020A:99B4  8B D0				mov	dx,ax
020A:99B6  A1 1CE8				mov	ax,word ptr ds:[1CE8h]	; (020A:1CE8=0)
020A:99B9  8E C0				mov	es,ax
020A:99BB  2B D0				sub	dx,ax
020A:99BD  8B C2				mov	ax,dx
020A:99BF  25 F000				and	ax,0F000h
020A:99C2  74 17				jz	$+19h			; Jump if zero
020A:99C4  81 EA 1000				sub	dx,1000h
020A:99C8  B9 8000				mov	cx,8000h
020A:99CB  33 FF				xor	di,di			; Zero register
020A:99CD  33 C0				xor	ax,ax			; Zero register
020A:99CF  FC					cld				; Clear direction
020A:99D0  F3/ AB				rep	stosw			; Rep when cx >0 Store ax to es:[di]
020A:99D2  8C C0				mov	ax,es
020A:99D4  05 1000				add	ax,1000h
020A:99D7  8E C0				mov	es,ax
020A:99D9  EB E2				jmp	short $-1Ch
							                        ;* No entry point to code
020A:99DB  B1 03				mov	cl,3
020A:99DD  D3 E2				shl	dx,cl			; Shift w/zeros fill
020A:99DF  8B CA				mov	cx,dx
020A:99E1  33 FF				xor	di,di			; Zero register
020A:99E3  33 C0				xor	ax,ax			; Zero register
020A:99E5  FC					cld				; Clear direction
020A:99E6  F3/ AB				rep	stosw			; Rep when cx >0 Store ax to es:[di]
020A:99E8  C7 06 17A5 0040			mov	word ptr ds:[17A5h],40h	; (020A:17A5=0)
020A:99EE  9A 1481:33A8				call	far ptr $-6646h
020A:99F3  E8 DEC8				call	$-2135h
020A:99F6  A1 1CE8				mov	ax,word ptr ds:[1CE8h]	; (020A:1CE8=0)
020A:99F9  A3 1CEA				mov	word ptr ds:[1CEAh],ax	; (020A:1CEA=0)
020A:99FC  05 0010				add	ax,10h
020A:99FF  A3 184F				mov	word ptr ds:[184Fh],ax	; (020A:184F=0)
020A:9A02  A3 1851				mov	word ptr ds:[1851h],ax	; (020A:1851=900h)
020A:9A05  80 3E 1F83 03			cmp	byte ptr ds:[1F83h],3	; (020A:1F83=0)
020A:9A0A  75 1F				jne	$+21h			; Jump if not equal
020A:9A0C  80 3E 1853 00			cmp	byte ptr ds:[1853h],0	; (020A:1853=0)
020A:9A11  75 02				jne	$+4			; Jump if not equal
020A:9A13  EB 1F				jmp	short $+21h
							                        ;* No entry point to code
020A:9A15  C6 06 1F83 07			mov	byte ptr ds:[1F83h],7	; (020A:1F83=0)
020A:9A1A  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:9A1F  73 0A				jae	$+0Ch			; Jump if above or =
020A:9A21  C6 06 1F85 07			mov	byte ptr ds:[1F85h],7	; (020A:1F85=0)
020A:9A26  9A 1481:31F8				call	far ptr $-682Eh
020A:9A2B  9A 1481:5428				call	far ptr $-4603h
020A:9A30  72 38				jc	$+3Ah			; Jump if carry Set
020A:9A32  EB 39				jmp	short $+3Bh
							                        ;* No entry point to code
020A:9A34  FA					cli				; Disable interrupts
020A:9A35  2E: 8C 16 63E2			mov	word ptr cs:[63E2h],ss	; (020A:63E2=5556h)
020A:9A3A  2E: 89 26 63E0			mov	word ptr cs:[63E0h],sp	; (020A:63E0=5350h)
020A:9A3F  BC 00C8				mov	sp,0C8h
020A:9A42  FB					sti				; Enable interrupts
020A:9A43  BA 1EB2				mov	dx,1EB2h
020A:9A46  BB 184F				mov	bx,184Fh
020A:9A49  B0 03				mov	al,3
020A:9A4B  B4 4B				mov	ah,4Bh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 271

020A:9A4D  CD 21				int	21h			; DOS Services  ah=function 4Bh
										;  load ovrly @ds:dx,parm @es:bx
										;   all regs & ss:sp destroyed
020A:9A4F  FA					cli				; Disable interrupts
020A:9A50  2E: 8E 16 63E2			mov	ss,word ptr cs:[63E2h]	; (020A:63E2=5556h)
020A:9A55  2E: 8B 26 63E0			mov	sp,word ptr cs:[63E0h]	; (020A:63E0=5350h)
020A:9A5A  FB					sti				; Enable interrupts
020A:9A5B  9C					pushf				; Push flags
020A:9A5C  E8 DE5F				call	$-219Eh
020A:9A5F  E8 DE3E				call	$-21BFh
020A:9A62  9D					popf				; Pop flags
020A:9A63  73 08				jnc	$+0Ah			; Jump if carry=0
020A:9A65  C6 06 231F 45			mov	byte ptr ds:[231Fh],45h	; (020A:231F=0) 'E'
020A:9A6A  E9 09B9				jmp	$+9BCh
							                        ;* No entry point to code
020A:9A6D  C7 06 17A5 0041			mov	word ptr ds:[17A5h],41h	; (020A:17A5=0)
020A:9A73  9A 1481:33A8				call	far ptr $-66CBh
020A:9A78  C6 06 448A 01			mov	byte ptr ds:[448Ah],1	; (020A:448A=9)
020A:9A7D  A1 1CE8				mov	ax,word ptr ds:[1CE8h]	; (020A:1CE8=0)
020A:9A80  05 0010				add	ax,10h
020A:9A83  A3 1CE4				mov	word ptr ds:[1CE4h],ax	; (020A:1CE4=0)
020A:9A86  80 3E 1CE2 03			cmp	byte ptr ds:[1CE2h],3	; (020A:1CE2=0)
020A:9A8B  74 21				je	$+23h			; Jump if equal
020A:9A8D  80 3E 1CF1 00			cmp	byte ptr ds:[1CF1h],0	; (020A:1CF1=0)
020A:9A92  74 1D				je	$+1Fh			; Jump if equal
020A:9A94  E8 DE1B				call	$-21E2h
020A:9A97  C6 06 1CF1 00			mov	byte ptr ds:[1CF1h],0	; (020A:1CF1=0)
020A:9A9C  C6 06 1CEC 00			mov	byte ptr ds:[1CECh],0	; (020A:1CEC=0)
020A:9AA1  BF 0000				mov	di,0
020A:9AA4  B9 186A				mov	cx,186Ah
020A:9AA7  B0 FF				mov	al,0FFh
020A:9AA9  FC					cld				; Clear direction
020A:9AAA  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:9AAC  EB 03				jmp	short $+5
020A:9AAE  E9 081C				jmp	$+81Fh
							                        ;* No entry point to code
020A:9AB1  BB 0000				mov	bx,0
020A:9AB4  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:9AB9  74 0D				je	$+0Fh			; Jump if equal
020A:9ABB  80 3E 1F83 03			cmp	byte ptr ds:[1F83h],3	; (020A:1F83=0)
020A:9AC0  75 03				jne	$+5			; Jump if not equal
020A:9AC2  E9 05B1				jmp	$+5B4h
020A:9AC5  E9 03FC				jmp	$+3FFh
							                        ;* No entry point to code
020A:9AC8  C7 06 216C FFFF			mov	word ptr ds:[216Ch],0FFFFh	; (020A:216C=2EFFh)
020A:9ACE  C7 06 1CEA 0000			mov	word ptr ds:[1CEAh],0	; (020A:1CEA=0)
020A:9AD4  C7 06 4539 0000			mov	word ptr ds:[4539h],0	; (020A:4539=1D72h)
020A:9ADA  C7 06 453B 0000			mov	word ptr ds:[453Bh],0	; (020A:453B=0EB04h)
020A:9AE0  C7 06 455B 0000			mov	word ptr ds:[455Bh],0	; (020A:455B=0B624h)
020A:9AE6  E8 DDD8				call	$-2225h
020A:9AE9  BE 1212				mov	si,1212h
020A:9AEC  26: 8B 6C 40				mov	bp,es:[si+40h]
020A:9AF0  03 EE				add	bp,si
020A:9AF2  BF 0000				mov	di,0
020A:9AF5  26: 8B 54 44				mov	dx,es:[si+44h]
020A:9AF9  0B D2				or	dx,dx			; Zero ?
020A:9AFB  75 03				jnz	$+5			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 272

020A:9AFD  E9 016D				jmp	$+170h
							                        ;* No entry point to code
020A:9B00  81 FA 00FA				cmp	dx,0FAh
020A:9B04  76 02				jbe	$+4			; Jump if below or =
020A:9B06  B2 FA				mov	dl,0FAh
020A:9B08  C6 06 4558 00			mov	byte ptr ds:[4558h],0	; (020A:4558=6)
020A:9B0D  88 16 4538				mov	byte ptr ds:[4538h],dl	; (020A:4538=6)
020A:9B11  8B C2				mov	ax,dx
020A:9B13  26: 2B 44 18				sub	ax,es:[si+18h]
020A:9B17  40					inc	ax
020A:9B18  A2 4546				mov	byte ptr ds:[4546h],al	; (020A:4546=1Dh)
020A:9B1B  26: 8B 44 1C				mov	ax,es:[si+1Ch]
020A:9B1F  A3 452E				mov	word ptr ds:[452Eh],ax	; (020A:452E=21Dh)
020A:9B22  26: 8B 44 28				mov	ax,es:[si+28h]
020A:9B26  33 C9				xor	cx,cx			; Zero register
020A:9B28  D1 C0				rol	ax,1			; Rotate
020A:9B2A  FE C1				inc	cl
020A:9B2C  A9 8000				test	ax,8000h
020A:9B2F  74 F7				jz	$-7			; Jump if zero
020A:9B31  D1 C8				ror	ax,1			; Rotate
020A:9B33  0D 8000				or	ax,8000h
020A:9B36  E2 F9				loop	$-5			; Loop if cx > 0

020A:9B38  A3 4530				mov	word ptr ds:[4530h],ax	; (020A:4530=2AEBh)
020A:9B3B  8A 0E 4538				mov	cl,byte ptr ds:[4538h]	; (020A:4538=6)
020A:9B3F  32 ED				xor	ch,ch			; Zero register
020A:9B41  55					push	bp
020A:9B42  C6 06 454F 00			mov	byte ptr ds:[454Fh],0	; (020A:454F=72h)
020A:9B47  26: 8B 46 06				mov	ax,es:[bp+6]
020A:9B4B  26: 0B 46 04				or	ax,es:[bp+4]
020A:9B4F  75 0A				jnz	$+0Ch			; Jump if not zero
020A:9B51  83 C5 18				add	bp,18h
020A:9B54  E2 F1				loop	$-0Dh			; Loop if cx > 0

020A:9B56  C6 06 454F 01			mov	byte ptr ds:[454Fh],1	; (020A:454F=72h)
020A:9B5B  5D					pop	bp
020A:9B5C  33 C0				xor	ax,ax			; Zero register
020A:9B5E  33 DB				xor	bx,bx			; Zero register
020A:9B60  EB 1E				jmp	short $+20h
							                        ;* No entry point to code
020A:9B62  26: 8B 46 EA				mov	ax,es:[bp-16h]
020A:9B66  26: 8B 5E E8				mov	bx,es:[bp-18h]
020A:9B6A  23 1E 4530				and	bx,word ptr ds:[4530h]	; (020A:4530=2AEBh)
020A:9B6E  26: 03 5C 28				add	bx,es:[si+28h]
020A:9B72  73 01				jnc	$+3			; Jump if carry=0
020A:9B74  40					inc	ax
020A:9B75  03 1E 4536				add	bx,word ptr ds:[4536h]	; (020A:4536=0C607h)
020A:9B79  73 01				jnc	$+3			; Jump if carry=0
020A:9B7B  40					inc	ax
020A:9B7C  03 06 4534				add	ax,word ptr ds:[4534h]	; (020A:4534=7400h)
020A:9B80  A3 4534				mov	word ptr ds:[4534h],ax	; (020A:4534=7400h)
020A:9B83  89 1E 4536				mov	word ptr ds:[4536h],bx	; (020A:4536=0C607h)
020A:9B87  50					push	ax
020A:9B88  26: 8B 46 06				mov	ax,es:[bp+6]
020A:9B8C  A9 FFF0				test	ax,0FFF0h
020A:9B8F  74 08				jz	$+0Ah			; Jump if zero
020A:9B91  C6 06 4545 01			mov	byte ptr ds:[4545h],1	; (020A:4545=72h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 273

020A:9B96  25 FFF0				and	ax,0FFF0h
020A:9B99  A3 4710				mov	word ptr ds:[4710h],ax	; (020A:4710=5306h)
020A:9B9C  26: 8B 46 04				mov	ax,es:[bp+4]
020A:9BA0  A3 4712				mov	word ptr ds:[4712h],ax	; (020A:4712=118h)
020A:9BA3  58					pop	ax
020A:9BA4  8B 0E 4539				mov	cx,word ptr ds:[4539h]	; (020A:4539=1D72h)
020A:9BA8  89 0E 453B				mov	word ptr ds:[453Bh],cx	; (020A:453B=0EB04h)
020A:9BAC  8B D3				mov	dx,bx
020A:9BAE  26: 8B 5E 00				mov	bx,es:[bp]
020A:9BB2  26: 8B 4E 02				mov	cx,es:[bp+2]
020A:9BB6  03 1E 4712				add	bx,word ptr ds:[4712h]	; (020A:4712=118h)
020A:9BBA  73 01				jnc	$+3			; Jump if carry=0
020A:9BBC  41					inc	cx
020A:9BBD  03 0E 4710				add	cx,word ptr ds:[4710h]	; (020A:4710=5306h)
020A:9BC1  C6 06 4715 00			mov	byte ptr ds:[4715h],0	; (020A:4715=1Dh)
020A:9BC6  C7 06 455B 0000			mov	word ptr ds:[455Bh],0	; (020A:455B=0B624h)
020A:9BCC  3B 0E 4710				cmp	cx,word ptr ds:[4710h]	; (020A:4710=5306h)
020A:9BD0  74 2A				je	$+2Ch			; Jump if equal
020A:9BD2  53					push	bx
020A:9BD3  51					push	cx
020A:9BD4  BB FFFF				mov	bx,0FFFFh
020A:9BD7  9A 1481:52DC				call	far ptr $-48FBh
020A:9BDC  72 1C				jc	$+1Eh			; Jump if carry Set
020A:9BDE  59					pop	cx
020A:9BDF  5B					pop	bx
020A:9BE0  C6 06 4715 20			mov	byte ptr ds:[4715h],20h	; (020A:4715=1Dh) ' '
020A:9BE5  40					inc	ax
020A:9BE6  81 06 455B 1000			add	word ptr ds:[455Bh],1000h	; (020A:455B=0B624h)
020A:9BEC  FF 06 4710				inc	word ptr ds:[4710h]	; (020A:4710=5306h)
020A:9BF0  C7 06 4712 0000			mov	word ptr ds:[4712h],0	; (020A:4712=118h)
020A:9BF6  33 D2				xor	dx,dx			; Zero register
020A:9BF8  EB D2				jmp	short $-2Ch
020A:9BFA  EB 71				jmp	short $+73h
							                        ;* No entry point to code
020A:9BFC  83 FB 00				cmp	bx,0
020A:9BFF  75 02				jne	$+4			; Jump if not equal
020A:9C01  EB 5A				jmp	short $+5Ch
							                        ;* No entry point to code
020A:9C03  80 3E 4538 01			cmp	byte ptr ds:[4538h],1	; (020A:4538=6)
020A:9C08  74 02				je	$+4			; Jump if equal
020A:9C0A  EB 4A				jmp	short $+4Ch
							                        ;* No entry point to code
020A:9C0C  53					push	bx
020A:9C0D  26: 8B 9C 0088			mov	bx,word ptr es:[88h][si]	; (1000:0088=8B06h)
020A:9C12  26: 8B 8C 008A			mov	cx,word ptr es:[8Ah][si]	; (1000:008A=5BE8h)
020A:9C17  26: 2B 9C 0080			sub	bx,word ptr es:[80h][si]	; (1000:0080=0AD7h)
020A:9C1C  73 01				jnc	$+3			; Jump if carry=0
020A:9C1E  49					dec	cx
020A:9C1F  26: 2B 8C 0082			sub	cx,word ptr es:[82h][si]	; (1000:0082=75C0h)
020A:9C24  26: 03 9C 008C			add	bx,word ptr es:[8Ch][si]	; (1000:008C=0BA58h)
020A:9C29  72 2A				jc	$+2Ch			; Jump if carry Set
020A:9C2B  50					push	ax
020A:9C2C  A1 4710				mov	ax,word ptr ds:[4710h]	; (020A:4710=5306h)
020A:9C2F  0B 06 4712				or	ax,word ptr ds:[4712h]	; (020A:4712=118h)
020A:9C33  75 05				jnz	$+7			; Jump if not zero
020A:9C35  2B DA				sub	bx,dx
020A:9C37  83 D9 00				sbb	cx,0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 274

020A:9C3A  58					pop	ax
020A:9C3B  8B CB				mov	cx,bx
020A:9C3D  26: 2B 8C 008C			sub	cx,word ptr es:[8Ch][si]	; (1000:008C=0BA58h)
020A:9C42  41					inc	cx
020A:9C43  89 0E 1CDC				mov	word ptr ds:[1CDCh],cx	; (020A:1CDC=0)
020A:9C47  A3 1CDE				mov	word ptr ds:[1CDEh],ax	; (020A:1CDE=0)
020A:9C4A  8B CB				mov	cx,bx
020A:9C4C  5B					pop	bx
020A:9C4D  3B CB				cmp	cx,bx
020A:9C4F  76 05				jbe	$+7			; Jump if below or =
020A:9C51  8B D9				mov	bx,cx
020A:9C53  EB 01				jmp	short $+3
							                        ;* No entry point to code
020A:9C55  5B					pop	bx
020A:9C56  9A 1481:52DC				call	far ptr $-497Ah
020A:9C5B  72 10				jc	$+12h			; Jump if carry Set
020A:9C5D  83 C5 18				add	bp,18h
020A:9C60  FE 06 4558				inc	byte ptr ds:[4558h]	; (020A:4558=6)
020A:9C64  FE 0E 4538				dec	byte ptr ds:[4538h]	; (020A:4538=6)
020A:9C68  74 03				jz	$+5			; Jump if zero
020A:9C6A  E9 FEF5				jmp	$-108h
							                        ;* No entry point to code
020A:9C6D  A3 1D22				mov	word ptr ds:[1D22h],ax	; (020A:1D22=0)
020A:9C70  80 3E 4545 01			cmp	byte ptr ds:[4545h],1	; (020A:4545=72h)
020A:9C75  75 09				jne	$+0Bh			; Jump if not equal
020A:9C77  B4 42				mov	ah,42h			; 'B'
020A:9C79  B0 04				mov	al,4
020A:9C7B  9A 1481:3108				call	far ptr $-6B73h
020A:9C80  9A 1481:63A4				call	far ptr $-38DCh
020A:9C85  E8 DC39				call	$-23C4h
020A:9C88  BE 1212				mov	si,1212h
020A:9C8B  26: 8B 6C 40				mov	bp,es:[si+40h]
020A:9C8F  03 EE				add	bp,si
020A:9C91  C6 06 4558 00			mov	byte ptr ds:[4558h],0	; (020A:4558=6)
020A:9C96  26: 8B 54 44				mov	dx,es:[si+44h]
020A:9C9A  80 FA 01				cmp	dl,1
020A:9C9D  77 03				ja	$+5			; Jump if above
020A:9C9F  E9 01E9				jmp	$+1ECh
							                        ;* No entry point to code
020A:9CA2  26: 8B 7C 68				mov	di,es:[si+68h]
020A:9CA6  03 FE				add	di,si
020A:9CA8  26: 8B 2D				mov	bp,es:[di]
020A:9CAB  26: 03 6C 6C				add	bp,es:[si+6Ch]
020A:9CAF  03 EE				add	bp,si
020A:9CB1  83 C7 04				add	di,4
020A:9CB4  C7 06 4547 0000			mov	word ptr ds:[4547h],0	; (020A:4547=0A90Ch)
020A:9CBA  26: 8B 44 14				mov	ax,es:[si+14h]
020A:9CBE  A1 4547				mov	ax,word ptr ds:[4547h]	; (020A:4547=0A90Ch)
020A:9CC1  26: 3B 44 14				cmp	ax,es:[si+14h]
020A:9CC5  72 03				jb	$+5			; Jump if below
020A:9CC7  E9 01C1				jmp	$+1C4h
							                        ;* No entry point to code
020A:9CCA  9A 1481:63DC				call	far ptr $-38EEh
020A:9CCF  89 16 4549				mov	word ptr ds:[4549h],dx	; (020A:4549=40h)
020A:9CD3  A3 454B				mov	word ptr ds:[454Bh],ax	; (020A:454B=0F75h)
020A:9CD6  26: 8B 05				mov	ax,es:[di]
020A:9CD9  26: 03 44 6C				add	ax,es:[si+6Ch]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 275

020A:9CDD  03 C6				add	ax,si
020A:9CDF  A3 454D				mov	word ptr ds:[454Dh],ax	; (020A:454D=6C6h)
020A:9CE2  83 C7 04				add	di,4
020A:9CE5  8B DD				mov	bx,bp
020A:9CE7  A1 454D				mov	ax,word ptr ds:[454Dh]	; (020A:454D=6C6h)
020A:9CEA  3B D8				cmp	bx,ax
020A:9CEC  72 08				jb	$+0Ah			; Jump if below
020A:9CEE  8B E8				mov	bp,ax
020A:9CF0  FF 06 4547				inc	word ptr ds:[4547h]	; (020A:4547=0A90Ch)
020A:9CF4  EB C4				jmp	short $-3Ah
							                        ;* No entry point to code
020A:9CF6  C6 06 453D 00			mov	byte ptr ds:[453Dh],0	; (020A:453D=1Eh)
020A:9CFB  26: 8A 4F 01				mov	cl,es:[bx+1]
020A:9CFF  88 0E 455A				mov	byte ptr ds:[455Ah],cl	; (020A:455A=1Dh)
020A:9D03  26: 8A 0F				mov	cl,es:[bx]
020A:9D06  8A E9				mov	ch,cl
020A:9D08  80 E5 0F				and	ch,0Fh
020A:9D0B  88 2E 4559				mov	byte ptr ds:[4559h],ch	; (020A:4559=72h)
020A:9D0F  F6 C1 20				test	cl,20h			; ' '
020A:9D12  74 64				jz	$+66h			; Jump if zero
020A:9D14  8A C1				mov	al,cl
020A:9D16  24 F0				and	al,0F0h
020A:9D18  3C 20				cmp	al,20h			; ' '
020A:9D1A  75 4E				jne	$+50h			; Jump if not equal
020A:9D1C  80 FD 07				cmp	ch,7
020A:9D1F  74 05				je	$+7			; Jump if equal
020A:9D21  80 FD 08				cmp	ch,8
020A:9D24  75 44				jne	$+46h			; Jump if not equal
020A:9D26  8A 0E 455A				mov	cl,byte ptr ds:[455Ah]	; (020A:455A=1Dh)
020A:9D2A  F6 C1 83				test	cl,83h
020A:9D2D  75 3B				jnz	$+3Dh			; Jump if not zero
020A:9D2F  26: 8A 47 02				mov	al,es:[bx+2]
020A:9D33  0A C0				or	al,al			; Zero ?
020A:9D35  74 33				jz	$+35h			; Jump if zero
020A:9D37  A2 453D				mov	byte ptr ds:[453Dh],al	; (020A:453D=1Eh)
020A:9D3A  26: 8A 47 03				mov	al,es:[bx+3]
020A:9D3E  A2 4540				mov	byte ptr ds:[4540h],al	; (020A:4540=1)
020A:9D41  26: 8B 47 04				mov	ax,es:[bx+4]
020A:9D45  A3 4541				mov	word ptr ds:[4541h],ax	; (020A:4541=1974h)
020A:9D48  C7 06 4543 0000			mov	word ptr ds:[4543h],0	; (020A:4543=6C6h)
020A:9D4E  F6 06 455A 10			test	byte ptr ds:[455Ah],10h	; (020A:455A=1Dh)
020A:9D53  74 0A				jz	$+0Ch			; Jump if zero
020A:9D55  26: 8B 47 06				mov	ax,es:[bx+6]
020A:9D59  A3 4543				mov	word ptr ds:[4543h],ax	; (020A:4543=6C6h)
020A:9D5C  83 C3 02				add	bx,2
020A:9D5F  83 C3 06				add	bx,6
020A:9D62  26: 8B 07				mov	ax,es:[bx]
020A:9D65  A3 453E				mov	word ptr ds:[453Eh],ax	; (020A:453E=0C0A9h)
020A:9D68  EB 58				jmp	short $+5Ah
							                        ;* No entry point to code
020A:9D6A  26: 8A 47 02				mov	al,es:[bx+2]
020A:9D6E  32 E4				xor	ah,ah			; Zero register
020A:9D70  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:9D72  03 D8				add	bx,ax
020A:9D74  4B					dec	bx
020A:9D75  E9 00F0				jmp	$+0F3h
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 276

020A:9D78  80 FD 07				cmp	ch,7
020A:9D7B  74 1C				je	$+1Eh			; Jump if equal
020A:9D7D  80 FD 08				cmp	ch,8
020A:9D80  74 17				je	$+19h			; Jump if equal
020A:9D82  57					push	di
020A:9D83  06					push	es
020A:9D84  33 C0				xor	ax,ax			; Zero register
020A:9D86  8B F8				mov	di,ax
020A:9D88  8B D0				mov	dx,ax
020A:9D8A  8E C0				mov	es,ax
020A:9D8C  A3 453E				mov	word ptr ds:[453Eh],ax	; (020A:453E=0C0A9h)
020A:9D8F  9A 1481:62D4				call	far ptr $-3ABBh
020A:9D94  07					pop	es
020A:9D95  5F					pop	di
020A:9D96  E9 00CF				jmp	$+0D2h
							                        ;* No entry point to code
020A:9D99  26: 8B 47 02				mov	ax,es:[bx+2]
020A:9D9D  A3 453E				mov	word ptr ds:[453Eh],ax	; (020A:453E=0C0A9h)
020A:9DA0  26: 8A 47 04				mov	al,es:[bx+4]
020A:9DA4  A2 4540				mov	byte ptr ds:[4540h],al	; (020A:4540=1)
020A:9DA7  26: 8B 47 05				mov	ax,es:[bx+5]
020A:9DAB  A3 4541				mov	word ptr ds:[4541h],ax	; (020A:4541=1974h)
020A:9DAE  C7 06 4543 0000			mov	word ptr ds:[4543h],0	; (020A:4543=6C6h)
020A:9DB4  F6 06 455A 10			test	byte ptr ds:[455Ah],10h	; (020A:455A=1Dh)
020A:9DB9  74 07				jz	$+9			; Jump if zero
020A:9DBB  26: 8B 47 07				mov	ax,es:[bx+7]
020A:9DBF  A3 4543				mov	word ptr ds:[4543h],ax	; (020A:4543=6C6h)
020A:9DC2  F6 06 455A 40			test	byte ptr ds:[455Ah],40h	; (020A:455A=1Dh) '@'
020A:9DC7  75 B9				jnz	$-45h			; Jump if not zero
020A:9DC9  F6 06 455A 03			test	byte ptr ds:[455Ah],3	; (020A:455A=1Dh)
020A:9DCE  75 B2				jnz	$-4Ch			; Jump if not zero
020A:9DD0  A0 4540				mov	al,byte ptr ds:[4540h]	; (020A:4540=1)
020A:9DD3  FE C8				dec	al
020A:9DD5  9A 1481:5570				call	far ptr $-4865h
020A:9DDA  72 A6				jc	$-58h			; Jump if carry Set
020A:9DDC  03 06 4541				add	ax,word ptr ds:[4541h]	; (020A:4541=1974h)
020A:9DE0  13 16 4543				adc	dx,word ptr ds:[4543h]	; (020A:4543=6C6h)
020A:9DE4  80 3E 4559 07			cmp	byte ptr ds:[4559h],7	; (020A:4559=72h)
020A:9DE9  74 15				je	$+17h			; Jump if equal
020A:9DEB  2B 06 453E				sub	ax,word ptr ds:[453Eh]	; (020A:453E=0C0A9h)
020A:9DEF  83 DA 00				sbb	dx,0
020A:9DF2  2B 06 454B				sub	ax,word ptr ds:[454Bh]	; (020A:454B=0F75h)
020A:9DF6  1B 16 4549				sbb	dx,word ptr ds:[4549h]	; (020A:4549=40h)
020A:9DFA  2D 0004				sub	ax,4
020A:9DFD  83 DA 00				sbb	dx,0
020A:9E00  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:9E05  06					push	es
020A:9E06  57					push	di
020A:9E07  53					push	bx
020A:9E08  8B 3E 454B				mov	di,word ptr ds:[454Bh]	; (020A:454B=0F75h)
020A:9E0C  8B 1E 4549				mov	bx,word ptr ds:[4549h]	; (020A:4549=40h)
020A:9E10  03 3E 453E				add	di,word ptr ds:[453Eh]	; (020A:453E=0C0A9h)
020A:9E14  83 D3 00				adc	bx,0
020A:9E17  F7 C3 FFF0				test	bx,0FFF0h
020A:9E1B  75 1E				jnz	$+20h			; Jump if not zero
020A:9E1D  B1 0C				mov	cl,0Ch
020A:9E1F  D3 E3				shl	bx,cl			; Shift w/zeros fill
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 277

020A:9E21  8E C3				mov	es,bx
020A:9E23  9A 1481:8834				call	far ptr $-15EFh
020A:9E28  72 11				jc	$+13h			; Jump if carry Set
020A:9E2A  83 FF FC				cmp	di,0FFFCh
020A:9E2D  73 0C				jae	$+0Eh			; Jump if above or =
020A:9E2F  26: 89 05				mov	es:[di],ax
020A:9E32  26: 89 55 02				mov	es:[di+2],dx
020A:9E36  9A 1481:62D4				call	far ptr $-3B62h
020A:9E3B  5B					pop	bx
020A:9E3C  5F					pop	di
020A:9E3D  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:9E42  9C					pushf				; Push flags
020A:9E43  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:9E48  5A					pop	dx
020A:9E49  8E C2				mov	es,dx
020A:9E4B  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:9E50  5A					pop	dx
020A:9E51  75 0A				jnz	$+0Ch			; Jump if not zero
020A:9E53  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:9E58  74 03				je	$+5			; Jump if equal
020A:9E5A  E8 DF23				call	$-20DAh
020A:9E5D  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:9E62  9D					popf				; Pop flags
020A:9E63  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:9E68  80 3E 453D 00			cmp	byte ptr ds:[453Dh],0	; (020A:453D=1Eh)
020A:9E6D  74 0C				je	$+0Eh			; Jump if equal
020A:9E6F  83 C3 02				add	bx,2
020A:9E72  FE 0E 453D				dec	byte ptr ds:[453Dh]	; (020A:453D=1Eh)
020A:9E76  74 10				jz	$+12h			; Jump if zero
020A:9E78  E9 FEE7				jmp	$-116h
							                        ;* No entry point to code
020A:9E7B  83 C3 07				add	bx,7
020A:9E7E  F6 06 455A 10			test	byte ptr ds:[455Ah],10h	; (020A:455A=1Dh)
020A:9E83  74 03				jz	$+5			; Jump if zero
020A:9E85  83 C3 02				add	bx,2
020A:9E88  E9 FE5C				jmp	$-1A1h
							                        ;* No entry point to code
020A:9E8B  80 3E 48D3 01			cmp	byte ptr ds:[48D3h],1	; (020A:48D3=0F7h)
020A:9E90  75 07				jne	$+9			; Jump if not equal
020A:9E92  8B 1E 1F80				mov	bx,word ptr ds:[1F80h]	; (020A:1F80=0)
020A:9E96  E8 06FF				call	$+702h
020A:9E99  F7 06 1D60 0008			test	word ptr ds:[1D60h],8	; (020A:1D60=0)
020A:9E9F  75 05				jnz	$+7			; Jump if not zero
020A:9EA1  83 0E 1D60 08			or	word ptr ds:[1D60h],8	; (020A:1D60=0)
020A:9EA6  F7 06 1D60 07E0			test	word ptr ds:[1D60h],7E0h	; (020A:1D60=0)
020A:9EAC  75 06				jnz	$+8			; Jump if not zero
020A:9EAE  C7 06 1D60 0028			mov	word ptr ds:[1D60h],28h	; (020A:1D60=0)
020A:9EB4  B6 01				mov	dh,1
020A:9EB6  E8 BBAF				call	$-444Eh
020A:9EB9  A0 2314				mov	al,byte ptr ds:[2314h]	; (020A:2314=0)
020A:9EBC  9A 1481:0A94				call	far ptr $+6BD8h
020A:9EC1  E9 0409				jmp	$+40Ch
							                        ;* No entry point to code
020A:9EC4  BB 0000				mov	bx,0
020A:9EC7  E8 D9F7				call	$-2606h
020A:9ECA  26: 80 3E 1212 E9			cmp	byte ptr es:[1212h],0E9h	; (1000:1212=6Ch)
020A:9ED0  75 4E				jne	$+50h			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 278

020A:9ED2  BE 35D0				mov	si,35D0h
020A:9ED5  BF 1215				mov	di,1215h
020A:9ED8  B9 35DF				mov	cx,35DFh
020A:9EDB  81 E9 35D0				sub	cx,35D0h
020A:9EDF  FC					cld				; Clear direction
020A:9EE0  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020A:9EE2  83 F9 00				cmp	cx,0
020A:9EE5  75 39				jne	$+3Bh			; Jump if not equal
020A:9EE7  C6 06 35DF 01			mov	byte ptr ds:[35DFh],1	; (020A:35DF=0)
020A:9EEC  B4 2D				mov	ah,2Dh			; '-'
020A:9EEE  9A 1481:2F90				call	far ptr $-6F5Eh
020A:9EF3  3C 31				cmp	al,31h			; '1'
020A:9EF5  74 20				je	$+22h			; Jump if equal
020A:9EF7  B0 04				mov	al,4
020A:9EF9  9A 1481:2F90				call	far ptr $-6F69h
020A:9EFE  C6 06 35DF 00			mov	byte ptr ds:[35DFh],0	; (020A:35DF=0)
020A:9F03  8C C0				mov	ax,es
020A:9F05  2D 0010				sub	ax,10h
020A:9F08  8E C0				mov	es,ax
020A:9F0A  9A 1481:5DBC				call	far ptr $-414Eh
020A:9F0F  73 03				jnc	$+5			; Jump if carry=0
020A:9F11  E9 0512				jmp	$+515h
020A:9F14  E9 02CE				jmp	$+2D1h
							                        ;* No entry point to code
020A:9F17  B0 04				mov	al,4
020A:9F19  9A 1481:2F90				call	far ptr $-6F89h
020A:9F1E  EB 3E				jmp	short $+40h
							                        ;* No entry point to code
020A:9F20  26: 81 3E 1242 4B50			cmp	word ptr es:[1242h],4B50h	; (0FF0:1242=0A134h)
020A:9F27  75 35				jne	$+37h			; Jump if not equal
020A:9F29  26: 81 3E 1244 494C			cmp	word ptr es:[1244h],494Ch	; (0FF0:1244=2FD4h)
020A:9F30  75 2C				jne	$+2Eh			; Jump if not equal
020A:9F32  26: 81 3E 1246 4554			cmp	word ptr es:[1246h],4554h	; (0FF0:1246=3B26h)
020A:9F39  75 23				jne	$+25h			; Jump if not equal
020A:9F3B  C6 06 1F84 01			mov	byte ptr ds:[1F84h],1	; (020A:1F84=0)
020A:9F40  F6 06 4719 0E			test	byte ptr ds:[4719h],0Eh	; (020A:4719=80h)
020A:9F45  75 17				jnz	$+19h			; Jump if not zero
020A:9F47  B4 37				mov	ah,37h			; '7'
020A:9F49  9A 1481:2F90				call	far ptr $-6FB9h
020A:9F4E  3C 31				cmp	al,31h			; '1'
020A:9F50  74 05				je	$+7			; Jump if equal
020A:9F52  80 0E 4719 04			or	byte ptr ds:[4719h],4	; (020A:4719=80h)
020A:9F57  B0 04				mov	al,4
020A:9F59  9A 1481:2F90				call	far ptr $-6FC9h
020A:9F5E  C7 06 1CDC 0000			mov	word ptr ds:[1CDCh],0	; (020A:1CDC=0)
020A:9F64  F7 06 1F86 0080			test	word ptr ds:[1F86h],80h	; (020A:1F86=0)
020A:9F6A  74 17				jz	$+19h			; Jump if zero
020A:9F6C  9A 1481:6C40				call	far ptr $-332Ch
020A:9F71  73 10				jnc	$+12h			; Jump if carry=0
020A:9F73  C6 06 1F85 05			mov	byte ptr ds:[1F85h],5	; (020A:1F85=0)
020A:9F78  9A 1481:31F8				call	far ptr $-6D80h
020A:9F7D  C7 06 1CDC 000A			mov	word ptr ds:[1CDCh],0Ah	; (020A:1CDC=0)
020A:9F83  A1 1CE4				mov	ax,word ptr ds:[1CE4h]	; (020A:1CE4=0)
020A:9F86  C7 06 1CEA 0000			mov	word ptr ds:[1CEAh],0	; (020A:1CEA=0)
020A:9F8C  80 3E 1F85 02			cmp	byte ptr ds:[1F85h],2	; (020A:1F85=0)
020A:9F91  75 09				jne	$+0Bh			; Jump if not equal
020A:9F93  2D 0010				sub	ax,10h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 279

020A:9F96  A3 1CE4				mov	word ptr ds:[1CE4h],ax	; (020A:1CE4=0)
020A:9F99  A3 1CEA				mov	word ptr ds:[1CEAh],ax	; (020A:1CEA=0)
020A:9F9C  E8 D913				call	$-26EAh
020A:9F9F  26: 89 07				mov	es:[bx],ax
020A:9FA2  26: 89 47 15				mov	es:[bx+15h],ax
020A:9FA6  26: 89 47 06				mov	es:[bx+6],ax
020A:9FAA  26: 89 47 08				mov	es:[bx+8],ax
020A:9FAE  26: C6 47 0E 00			mov	byte ptr es:[bx+0Eh],0
020A:9FB3  26: C7 47 0C 0000			mov	word ptr es:[bx+0Ch],0
020A:9FB9  A3 1D22				mov	word ptr ds:[1D22h],ax	; (020A:1D22=0)
020A:9FBC  33 C0				xor	ax,ax			; Zero register
020A:9FBE  8B 0E 1976				mov	cx,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:9FC2  8B 16 1974				mov	dx,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:9FC6  80 3E 1F85 02			cmp	byte ptr ds:[1F85h],2	; (020A:1F85=0)
020A:9FCB  75 44				jne	$+46h			; Jump if not equal
020A:9FCD  B8 0100				mov	ax,100h
020A:9FD0  A3 1D03				mov	word ptr ds:[1D03h],ax	; (020A:1D03=0)
020A:9FD3  50					push	ax
020A:9FD4  A1 1CEA				mov	ax,word ptr ds:[1CEAh]	; (020A:1CEA=0)
020A:9FD7  A3 1D01				mov	word ptr ds:[1D01h],ax	; (020A:1D01=0)
020A:9FDA  58					pop	ax
020A:9FDB  C7 06 1CDC 0100			mov	word ptr ds:[1CDCh],100h	; (020A:1CDC=0)
020A:9FE1  26: 89 47 17				mov	es:[bx+17h],ax
020A:9FE5  26: 89 47 02				mov	es:[bx+2],ax
020A:9FE9  83 F9 00				cmp	cx,0
020A:9FEC  75 06				jne	$+8			; Jump if not equal
020A:9FEE  81 FA FEFF				cmp	dx,0FEFFh
020A:9FF2  72 06				jb	$+8			; Jump if below
020A:9FF4  B8 0030				mov	ax,30h
020A:9FF7  E9 042C				jmp	$+42Fh
							                        ;* No entry point to code
020A:9FFA  03 C2				add	ax,dx
020A:9FFC  48					dec	ax
020A:9FFD  A3 1D05				mov	word ptr ds:[1D05h],ax	; (020A:1D05=0)
020A:A000  26: 89 47 04				mov	es:[bx+4],ax
020A:A004  C726			data_179	dw	0C726h
020A:A006  47					inc	di
020A:A007  0A 00				or	al,[bx+si]
020A:A009  00 FE				add	dh,bh
020A:A00B  06					push	es
020A:A00C  F1					db	0F1h
020A:A00D  1C E9				sbb	al,0E9h
020A:A00F  BC 2602				mov	sp,2602h
020A:A012  89 47 02				mov	[bx+2],ax
020A:A015  26: 89 47 17				mov	es:[bx+17h],ax
020A:A019  83 F9 01				cmp	cx,1
020A:A01C  77 20				ja	$+22h			; Jump if above
020A:A01E  72 07				jc	$+9			; Jump if carry Set
020A:A020  83 FA 00				cmp	dx,0
020A:A023  77 19				ja	$+1Bh			; Jump if above
020A:A025  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:A027  83 FA 01				cmp	dx,1
020A:A02A  76 0F				jbe	$+11h			; Jump if below or =
020A:A02C  4A					dec	dx
020A:A02D  26: 89 57 04				mov	es:[bx+4],dx
020A:A031  26: C7 47 0A 0000			mov	word ptr es:[bx+0Ah],0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 280

020A:A037  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:A03B  E9 028F				jmp	$+292h
							                        ;* No entry point to code
020A:A03E  26: C7 47 04 FFFF			mov	word ptr es:[bx+4],0FFFFh
020A:A044  26: C7 47 0A 0000			mov	word ptr es:[bx+0Ah],0
020A:A04A  FE 06 1CF1				inc	byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:A04E  49					dec	cx
020A:A04F  26: 8B 07				mov	ax,es:[bx]
020A:A052  83 C3 19				add	bx,19h
020A:A055  05 1000				add	ax,1000h
020A:A058  26: 89 07				mov	es:[bx],ax
020A:A05B  26: 89 47 15				mov	es:[bx+15h],ax
020A:A05F  26: 89 47 06				mov	es:[bx+6],ax
020A:A063  26: 89 47 08				mov	es:[bx+8],ax
020A:A067  26: C6 47 0E 00			mov	byte ptr es:[bx+0Eh],0
020A:A06C  26: C7 47 0C 0000			mov	word ptr es:[bx+0Ch],0
020A:A072  33 C0				xor	ax,ax			; Zero register
020A:A074  EB 9B				jmp	short $-63h
							                        ;* No entry point to code
020A:A076  C7 06 17A5 0042			mov	word ptr ds:[17A5h],42h	; (020A:17A5=0)
020A:A07C  9A 1481:33A8				call	far ptr $-6CD4h
020A:A081  8B FB				mov	di,bx
020A:A083  C7 06 1CDC 0000			mov	word ptr ds:[1CDCh],0	; (020A:1CDC=0)
020A:A089  9A 1481:6C40				call	far ptr $-3449h
020A:A08E  73 0F				jnc	$+11h			; Jump if carry=0
020A:A090  C6 06 1F85 05			mov	byte ptr ds:[1F85h],5	; (020A:1F85=0)
020A:A095  C6 06 1569 01			mov	byte ptr ds:[1569h],1	; (020A:1569=0)
020A:A09A  9A 1481:31F8				call	far ptr $-6EA2h
020A:A09F  E8 D81F				call	$-27DEh
020A:A0A2  26: 81 3E 1212 5A4D			cmp	word ptr es:[1212h],5A4Dh	; (0FF0:1212=63EBh)
020A:A0A9  74 06				je	$+8			; Jump if equal
020A:A0AB  B8 0014				mov	ax,14h
020A:A0AE  E9 0375				jmp	$+378h
							                        ;* No entry point to code
020A:A0B1  26: 81 3E 1230 4B50			cmp	word ptr es:[1230h],4B50h	; (0FF0:1230=0C00Ah)
020A:A0B8  75 35				jne	$+37h			; Jump if not equal
020A:A0BA  26: 81 3E 1232 494C			cmp	word ptr es:[1232h],494Ch	; (0FF0:1232=475h)
020A:A0C1  75 2C				jne	$+2Eh			; Jump if not equal
020A:A0C3  26: 81 3E 1234 4554			cmp	word ptr es:[1234h],4554h	; (0FF0:1234=8A26h)
020A:A0CA  75 23				jne	$+25h			; Jump if not equal
020A:A0CC  C6 06 1F84 02			mov	byte ptr ds:[1F84h],2	; (020A:1F84=0)
020A:A0D1  F6 06 4719 0E			test	byte ptr ds:[4719h],0Eh	; (020A:4719=80h)
020A:A0D6  75 17				jnz	$+19h			; Jump if not zero
020A:A0D8  B4 37				mov	ah,37h			; '7'
020A:A0DA  9A 1481:2F90				call	far ptr $-714Ah
020A:A0DF  3C 31				cmp	al,31h			; '1'
020A:A0E1  74 05				je	$+7			; Jump if equal
020A:A0E3  80 0E 4719 04			or	byte ptr ds:[4719h],4	; (020A:4719=80h)
020A:A0E8  B0 04				mov	al,4
020A:A0EA  9A 1481:2F90				call	far ptr $-715Ah
020A:A0EF  33 C0				xor	ax,ax			; Zero register
020A:A0F1  26: 39 06 1218			cmp	word ptr es:[1218h],ax	; (0FF0:1218=0E180h)
020A:A0F6  75 07				jne	$+9			; Jump if not equal
020A:A0F8  26: 39 06 121C			cmp	word ptr es:[121Ch],ax	; (0FF0:121C=1FF9h)
020A:A0FD  75 03				jne	$+5			; Jump if not equal
020A:A0FF  E9			data_182	db	0E9h
020A:A100  84 00				test	al,[bx+si]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 281

020A:A102  26: 81 3E 1226 0100			cmp	word ptr es:[1226h],100h	; (0FF0:1226=2F9Ch)
020A:A109  77 07				ja	$+9			; Jump if above
020A:A10B  26: 39 06 1228			cmp	word ptr es:[1228h],ax	; (0FF0:1228=8A26h)
020A:A110  74 74				je	$+76h			; Jump if equal
020A:A112  26: 8B 1E 1226			mov	bx,word ptr es:[1226h]	; (0FF0:1226=2F9Ch)
020A:A117  83 FB 01				cmp	bx,1
020A:A11A  74 6A				je	$+6Ch			; Jump if equal
020A:A11C  A1 1CE4				mov	ax,word ptr ds:[1CE4h]	; (020A:1CE4=0)
020A:A11F  26: 03 06 1228			add	ax,word ptr es:[1228h]	; (0FF0:1228=8A26h)
020A:A124  06					push	es
020A:A125  8E C0				mov	es,ax
020A:A127  26: 81 7F FE 4252			cmp	word ptr es:[bx-2],4252h
020A:A12D  07					pop	es
020A:A12E  74 38				jz	$+3Ah			; Jump if zero
020A:A130  83 FB 10				cmp	bx,10h
020A:A133  75 18				jne	$+1Ah			; Jump if not equal
020A:A135  06					push	es
020A:A136  8E C0				mov	es,ax
020A:A138  26: 81 3E 00C8 2EFB			cmp	word ptr es:[0C8h],2EFBh	; (8A26:00C8=0FFFFh)
020A:A13F  75 07				jne	$+9			; Jump if not equal
020A:A141  26: 81 3E 00CA 2FFF			cmp	word ptr es:[0CAh],2FFFh	; (8A26:00CA=0FFFFh)
020A:A148  07					pop	es
020A:A149  75 3B				jnz	$+3Dh			; Jump if not zero
020A:A14B  EB 1B				jmp	short $+1Dh
							                        ;* No entry point to code
020A:A14D  83 FB 0E				cmp	bx,0Eh
020A:A150  75 34				jne	$+36h			; Jump if not equal
020A:A152  06					push	es
020A:A153  8E C0				mov	es,ax
020A:A155  26: 81 3E 0154 2EFB			cmp	word ptr es:[154h],2EFBh	; (8A26:0154=0FFFFh)
020A:A15C  75 07				jne	$+9			; Jump if not equal
020A:A15E  26: 81 3E 0156 2FFF			cmp	word ptr es:[156h],2FFFh	; (8A26:0156=0FFFFh)
020A:A165  07					pop	es
020A:A166  75 1E				jnz	$+20h			; Jump if not zero
020A:A168  F6 06 4719 0E			test	byte ptr ds:[4719h],0Eh	; (020A:4719=80h)
020A:A16D  75 17				jnz	$+19h			; Jump if not zero
020A:A16F  B4 21				mov	ah,21h			; '!'
020A:A171  9A 1481:2F90				call	far ptr $-71E1h
020A:A176  3C 31				cmp	al,31h			; '1'
020A:A178  74 05				je	$+7			; Jump if equal
020A:A17A  80 0E 4719 04			or	byte ptr ds:[4719h],4	; (020A:4719=80h)
020A:A17F  B4 04				mov	ah,4
020A:A181  9A 1481:2F90				call	far ptr $-71F1h
020A:A186  26: 83 3E 1218 00			cmp	word ptr es:[1218h],0	; (0FF0:1218=0E180h)
020A:A18C  75 42				jne	$+44h			; Jump if not equal
020A:A18E  26: 83 3E 1220 F0			cmp	word ptr es:[1220h],0FFF0h	; (0FF0:1220=0E9E8h)
020A:A194  75 3A				jne	$+3Ch			; Jump if not equal
020A:A196  26: 83 3E 1222 FE			cmp	word ptr es:[1222h],0FFFEh	; (0FF0:1222=7292h)
020A:A19C  72 32				jb	$+34h			; Jump if below
020A:A19E  26: 81 3E 1226 0100			cmp	word ptr es:[1226h],100h	; (0FF0:1226=2F9Ch)
020A:A1A5  75 29				jne	$+2Bh			; Jump if not equal
020A:A1A7  26: 83 3E 1228 F0			cmp	word ptr es:[1228h],0FFF0h	; (0FF0:1228=8A26h)
020A:A1AD  75 21				jne	$+23h			; Jump if not equal
020A:A1AF  83 3E 1976 00			cmp	word ptr ds:[1976h],0	; (020A:1976=6B4h)
020A:A1B4  75 1A				jne	$+1Ch			; Jump if not equal
020A:A1B6  81 3E 1974 FE00			cmp	word ptr ds:[1974h],0FE00h	; (020A:1974=10EBh)
020A:A1BC  73 12				jae	$+14h			; Jump if above or =
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 282

020A:A1BE  C6 06 1F83 02			mov	byte ptr ds:[1F83h],2	; (020A:1F83=0)
020A:A1C3  C6 06 1F85 02			mov	byte ptr ds:[1F85h],2	; (020A:1F85=0)
020A:A1C8  9A 1481:31F8				call	far ptr $-6FD0h
020A:A1CD  E9 FCF4				jmp	$-309h
							                        ;* No entry point to code
020A:A1D0  C7 06 17A5 0043			mov	word ptr ds:[17A5h],43h	; (020A:17A5=0)
020A:A1D6  9A 1481:33A8				call	far ptr $-6E2Eh
020A:A1DB  9A 1481:5E14				call	far ptr $-43C7h
020A:A1E0  73 03				jnc	$+5			; Jump if carry=0
020A:A1E2  E9 0241				jmp	$+244h
							                        ;* No entry point to code
020A:A1E5  F7 06 231A 0001			test	word ptr ds:[231Ah],1	; (020A:231A=0)
020A:A1EB  74 03				jz	$+5			; Jump if zero
020A:A1ED  E9 00DD				jmp	$+0E0h
							                        ;* No entry point to code
020A:A1F0  E8 D6CE				call	$-292Fh
020A:A1F3  33 C9				xor	cx,cx			; Zero register
020A:A1F5  26: 8B 16 122A			mov	dx,word ptr es:[122Ah]	; (0FF0:122A=545h)
020A:A1FA  B8 4200				mov	ax,4200h
020A:A1FD  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:A201  CD 21				int	21h			; DOS Services  ah=function 42h
										;  move file ptr, bx=file handle
										;   al=method, cx,dx=offset
020A:A203  BD 1292				mov	bp,1292h
020A:A206  B9 3292				mov	cx,3292h
020A:A209  81 E9 1292				sub	cx,1292h
020A:A20D  BA 1292				mov	dx,1292h
020A:A210  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:A214  E8 D68C				call	$-2971h
020A:A217  B4 3F				mov	ah,3Fh
020A:A219  CD 21				int	21h			; DOS Services  ah=function 3Fh
										;  read file, bx=file handle
										;   cx=bytes to ds:dx buffer
020A:A21B  E8 D682				call	$-297Bh
020A:A21E  73 05				jnc	$+7			; Jump if carry=0
020A:A220  B3 0E				mov	bl,0Eh
020A:A222  E9 0201				jmp	$+204h
							                        ;* No entry point to code
020A:A225  83 3E 3274 00			cmp	word ptr ds:[3274h],0	; (020A:3274=5543h)
020A:A22A  75 03				jne	$+5			; Jump if not equal
020A:A22C  E9 009E				jmp	$+0A1h
							                        ;* No entry point to code
020A:A22F  E8 D68F				call	$-296Eh
020A:A232  26: 8B 5E 00				mov	bx,es:[bp]
020A:A236  A1 1CE4				mov	ax,word ptr ds:[1CE4h]	; (020A:1CE4=0)
020A:A239  26: 03 46 02				add	ax,es:[bp+2]
020A:A23D  9A 1481:B0D4				call	far ptr $+0E97h
020A:A242  A3 3276				mov	word ptr ds:[3276h],ax	; (020A:3276=454Dh)
020A:A245  89 1E 3278				mov	word ptr ds:[3278h],bx	; (020A:3278=317Eh)
020A:A249  E8 D666				call	$-2997h
020A:A24C  B9 0019				mov	cx,19h
020A:A24F  BF 0000				mov	di,0
020A:A252  26: 8B 05				mov	ax,es:[di]
020A:A255  3D FFFF				cmp	ax,0FFFFh
020A:A258  74 60				je	$+62h			; Jump if equal
020A:A25A  26: 8B 5D 02				mov	bx,es:[di+2]
020A:A25E  9A 1481:B0D4				call	far ptr $+0E76h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 283

020A:A263  39 06 3276				cmp	word ptr ds:[3276h],ax	; (020A:3276=454Dh)
020A:A267  72 51				jb	$+53h			; Jump if below
020A:A269  77 06				ja	$+8			; Jump if above
020A:A26B  39 1E 3278				cmp	word ptr ds:[3278h],bx	; (020A:3278=317Eh)
020A:A26F  72 49				jb	$+4Bh			; Jump if below
020A:A271  26: 8B 05				mov	ax,es:[di]
020A:A274  26: 8B 5D 04				mov	bx,es:[di+4]
020A:A278  9A 1481:B0D4				call	far ptr $+0E5Ch
020A:A27D  2B 1E 3278				sub	bx,word ptr ds:[3278h]	; (020A:3278=317Eh)
020A:A281  1B 06 3276				sbb	ax,word ptr ds:[3276h]	; (020A:3276=454Dh)
020A:A285  73 05				jnc	$+7			; Jump if carry=0
020A:A287  83 C7 19				add	di,19h
020A:A28A  EB C6				jmp	short $-38h
							                        ;* No entry point to code
020A:A28C  26: 8B 05				mov	ax,es:[di]
020A:A28F  26: 8B 5D 02				mov	bx,es:[di+2]
020A:A293  9A 1481:B0D4				call	far ptr $+0E41h
020A:A298  8B C3				mov	ax,bx
020A:A29A  8B 1E 3278				mov	bx,word ptr ds:[3278h]	; (020A:3278=317Eh)
020A:A29E  2B D8				sub	bx,ax
020A:A2A0  26: 8B 0D				mov	cx,es:[di]
020A:A2A3  BE 41A1				mov	si,41A1h
020A:A2A6  89 0C				mov	[si],cx
020A:A2A8  89 5C 02				mov	[si+2],bx
020A:A2AB  C6 44 04 5F				mov	byte ptr [si+4],5Fh	; '_'
020A:A2AF  C6 44 05 00				mov	byte ptr [si+5],0
020A:A2B3  C6 44 06 00				mov	byte ptr [si+6],0
020A:A2B7  E8 E4A6				call	$-1B57h
020A:A2BA  FF 0E 3274				dec	word ptr ds:[3274h]	; (020A:3274=5543h)
020A:A2BE  83 C5 04				add	bp,4
020A:A2C1  81 FD 3292				cmp	bp,3292h
020A:A2C5  72 03				jb	$+5			; Jump if below
020A:A2C7  E9 FF39				jmp	$-0C4h
020A:A2CA  E9 FF58				jmp	$-0A5h
							                        ;* No entry point to code
020A:A2CD  BB 0000				mov	bx,0
020A:A2D0  32 ED				xor	ch,ch			; Zero register
020A:A2D2  8A 0E 1CF1				mov	cl,byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:A2D6  B8 0019				mov	ax,19h
020A:A2D9  E8 D5D6				call	$-2A27h
020A:A2DC  26: 80 67 0B 7F			and	byte ptr es:[bx+0Bh],7Fh
020A:A2E1  26: 80 4F 0B 1E			or	byte ptr es:[bx+0Bh],1Eh
020A:A2E6  03 D8				add	bx,ax
020A:A2E8  E2 F2				loop	$-0Ch			; Loop if cx > 0

020A:A2EA  2B D8				sub	bx,ax
020A:A2EC  26: 8B 47 04				mov	ax,es:[bx+4]
020A:A2F0  B1 04				mov	cl,4
020A:A2F2  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:A2F4  40					inc	ax
020A:A2F5  26: 03 07				add	ax,es:[bx]
020A:A2F8  A3 4722				mov	word ptr ds:[4722h],ax	; (020A:4722=118h)
020A:A2FB  80 3E 1CE2 03			cmp	byte ptr ds:[1CE2h],3	; (020A:1CE2=0)
020A:A300  75 03				jne	$+5			; Jump if not equal
020A:A302  E9 00B1				jmp	$+0B4h
							                        ;* No entry point to code
020A:A305  A1 1CE4				mov	ax,word ptr ds:[1CE4h]	; (020A:1CE4=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 284

020A:A308  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:A30D  75 0D				jne	$+0Fh			; Jump if not equal
020A:A30F  83 3E 1CDE FF			cmp	word ptr ds:[1CDEh],0FFFFh	; (020A:1CDE=0)
020A:A314  75 03				jne	$+5			; Jump if not equal
020A:A316  E9 009A				jmp	$+9Dh
							                        ;* No entry point to code
020A:A319  A1 1CDE				mov	ax,word ptr ds:[1CDEh]	; (020A:1CDE=0)
020A:A31C  8E C0				mov	es,ax
020A:A31E  8B F7				mov	si,di
020A:A320  8B 3E 1CDC				mov	di,word ptr ds:[1CDCh]	; (020A:1CDC=0)
020A:A324  9A 1481:8834				call	far ptr $-1AF0h
020A:A329  26: 8A 05				mov	al,es:[di]
020A:A32C  3C EB				cmp	al,0EBh
020A:A32E  74 0C				je	$+0Eh			; Jump if equal
020A:A330  3C EA				cmp	al,0EAh
020A:A332  74 07				je	$+9			; Jump if equal
020A:A334  3C E9				cmp	al,0E9h
020A:A336  75 07				jne	$+9			; Jump if not equal
020A:A338  83 C7 02				add	di,2
020A:A33B  47					inc	di
020A:A33C  83 C7 02				add	di,2
020A:A33F  81 FF 0100				cmp	di,100h
020A:A343  75 01				jne	$+3			; Jump if not equal
020A:A345  47					inc	di
020A:A346  87 F7				xchg	si,di
020A:A348  E8 BBFD				call	$-4400h
020A:A34B  E8 D570				call	$-2A8Dh
020A:A34E  80 FB 08				cmp	bl,8
020A:A351  76 63				jbe	$+65h			; Jump if below or =
020A:A353  8B F7				mov	si,di
020A:A355  BF 0378				mov	di,378h
020A:A358  32 ED				xor	ch,ch			; Zero register
020A:A35A  8A CB				mov	cl,bl
020A:A35C  FC					cld				; Clear direction
020A:A35D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:A35F  B1 22				mov	cl,22h			; '"'
020A:A361  2A CB				sub	cl,bl
020A:A363  B0 20				mov	al,20h			; ' '
020A:A365  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:A367  A1 1CE4				mov	ax,word ptr ds:[1CE4h]	; (020A:1CE4=0)
020A:A36A  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:A36F  75 03				jne	$+5			; Jump if not equal
020A:A371  A1 1CDE				mov	ax,word ptr ds:[1CDEh]	; (020A:1CDE=0)
020A:A374  8E C0				mov	es,ax
020A:A376  8B 3E 1CDC				mov	di,word ptr ds:[1CDCh]	; (020A:1CDC=0)
020A:A37A  9A 1481:8834				call	far ptr $-1B46h
020A:A37F  B0 2E				mov	al,2Eh			; '.'
020A:A381  B9 003C				mov	cx,3Ch
020A:A384  FC					cld				; Clear direction
020A:A385  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:A387  E3 2A				jcxz	$+2Ch			; Jump if cx=0
020A:A389  26: 8B 05				mov	ax,es:[di]
020A:A38C  2C 30				sub	al,30h			; '0'
020A:A38E  3C 09				cmp	al,9
020A:A390  77 21				ja	$+23h			; Jump if above
020A:A392  80 EC 30				sub	ah,30h			; '0'
020A:A395  80 FC 09				cmp	ah,9
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 285

020A:A398  77 19				ja	$+1Bh			; Jump if above
020A:A39A  83 EF 02				sub	di,2
020A:A39D  26: 8A 05				mov	al,es:[di]
020A:A3A0  2C 30				sub	al,30h			; '0'
020A:A3A2  3C 09				cmp	al,9
020A:A3A4  77 0D				ja	$+0Fh			; Jump if above
020A:A3A6  26: 8B 05				mov	ax,es:[di]
020A:A3A9  A3 5150				mov	word ptr ds:[5150h],ax	; (020A:5150=0E801h)
020A:A3AC  26: 8B 45 02				mov	ax,es:[di+2]
020A:A3B0  A3 5152				mov	word ptr ds:[5152h],ax	; (020A:5152=914h)
020A:A3B3  E8 D508				call	$-2AF5h
020A:A3B6  B4 3D				mov	ah,3Dh			; '='
020A:A3B8  B0 00				mov	al,0
020A:A3BA  BA 1EB2				mov	dx,1EB2h
020A:A3BD  CD 21				int	21h			; DOS Services  ah=function 3Dh
										;  open file, al=mode,name@ds:dx
020A:A3BF  72 31				jc	$+33h			; Jump if carry Set
020A:A3C1  8B D8				mov	bx,ax
020A:A3C3  A3 302F				mov	word ptr ds:[302Fh],ax	; (020A:302F=534Fh)
020A:A3C6  B4 57				mov	ah,57h			; 'W'
020A:A3C8  32 C0				xor	al,al			; Zero register
020A:A3CA  CD 21				int	21h			; DOS Services  ah=function 57h
										;  get file date+time, bx=handle
										;   returns cx=time, dx=date
020A:A3CC  72 24				jc	$+26h			; Jump if carry Set
020A:A3CE  89 16 213E				mov	word ptr ds:[213Eh],dx	; (020A:213E=0FFFFh)
020A:A3D2  83 26 213E 1F			and	word ptr ds:[213Eh],1Fh	; (020A:213E=0FFFFh)
020A:A3D7  B1 05				mov	cl,5
020A:A3D9  D3 EA				shr	dx,cl			; Shift w/zeros fill
020A:A3DB  89 16 2140				mov	word ptr ds:[2140h],dx	; (020A:2140=6114h)
020A:A3DF  83 26 2140 0F			and	word ptr ds:[2140h],0Fh	; (020A:2140=6114h)
020A:A3E4  B1 04				mov	cl,4
020A:A3E6  D3 EA				shr	dx,cl			; Shift w/zeros fill
020A:A3E8  83 E2 3F				and	dx,3Fh
020A:A3EB  83 C2 50				add	dx,50h
020A:A3EE  89 16 2142				mov	word ptr ds:[2142h],dx	; (020A:2142=0FFFFh)
020A:A3F2  80 3E 3271 00			cmp	byte ptr ds:[3271h],0	; (020A:3271=5Ch)
020A:A3F7  74 15				je	$+17h			; Jump if equal
020A:A3F9  A0 17A7				mov	al,byte ptr ds:[17A7h]	; (020A:17A7=0)
020A:A3FC  3C 04				cmp	al,4
020A:A3FE  77 0B				ja	$+0Dh			; Jump if above
020A:A400  B0 04				mov	al,4
020A:A402  80 3E 1F85 01			cmp	byte ptr ds:[1F85h],1	; (020A:1F85=0)
020A:A407  76 02				jbe	$+4			; Jump if below or =
020A:A409  B0 0A				mov	al,0Ah
020A:A40B  E8 BF82				call	$-407Bh
020A:A40E  C6 06 231F 20			mov	byte ptr ds:[231Fh],20h	; (020A:231F=0) ' '
020A:A413  E8 C93A				call	$-36C3h
020A:A416  E8 BA8B				call	$-4572h
020A:A419  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:A41D  E8 0178				call	$+17Bh
020A:A420  E8 11E5				call	$+11E8h
020A:A423  F8					clc				; Clear carry flag
020A:A424  EB 0B				jmp	short $+0Dh
							                        ;* No entry point to code
020A:A426  E8 D477				call	$-2B86h
020A:A429  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 286

020A:A42D  E8 0168				call	$+16Bh
020A:A430  F9					stc				; Set carry flag
020A:A431  C3					retn
							                        ;* No entry point to code
020A:A432  87 DB				xchg	bx,bx
020A:A434  51					push	cx
020A:A435  57					push	di
020A:A436  8B FE				mov	di,si
020A:A438  B9 0034				mov	cx,34h
020A:A43B  03 F1				add	si,cx
020A:A43D  B0 00				mov	al,0
020A:A43F  FC					cld				; Clear direction
020A:A440  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:A442  A0 1CE1				mov	al,byte ptr ds:[1CE1h]	; (020A:1CE1=0)
020A:A445  26: 88 44 FB				mov	es:[si-5],al
020A:A449  C6 06 1CE1 00			mov	byte ptr ds:[1CE1h],0	; (020A:1CE1=0)
020A:A44E  5F					pop	di
020A:A44F  59					pop	cx
020A:A450  C3					retn
							                        ;* No entry point to code
020A:A451  87 DB				xchg	bx,bx
020A:A453  90					nop
020A:A454  51					push	cx
020A:A455  57					push	di
020A:A456  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A45B  06					push	es
020A:A45C  E8 D45F				call	$-2B9Eh
020A:A45F  BF 3516				mov	di,3516h
020A:A462  B9 35CF				mov	cx,35CFh
020A:A465  81 E9 3516				sub	cx,3516h
020A:A469  B0 20				mov	al,20h			; ' '
020A:A46B  FC					cld				; Clear direction
020A:A46C  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:A46E  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:A473  9C					pushf				; Push flags
020A:A474  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A479  5A					pop	dx
020A:A47A  8E C2				mov	es,dx
020A:A47C  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:A481  5A					pop	dx
020A:A482  75 0A				jnz	$+0Ch			; Jump if not zero
020A:A484  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A489  74 03				je	$+5			; Jump if equal
020A:A48B  E8 D8F2				call	$-270Bh
020A:A48E  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A493  9D					popf				; Pop flags
020A:A494  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:A499  5F					pop	di
020A:A49A  59					pop	cx
020A:A49B  C3					retn
							                        ;* No entry point to code
020A:A49C  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A4A1  06					push	es
020A:A4A2  E8 D419				call	$-2BE4h
020A:A4A5  BF 53F7				mov	di,53F7h
020A:A4A8  B9 5429				mov	cx,5429h
020A:A4AB  81 E9 53F7				sub	cx,53F7h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 287

020A:A4AF  49					dec	cx
020A:A4B0  B0 20				mov	al,20h			; ' '
020A:A4B2  FC					cld				; Clear direction
020A:A4B3  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:A4B5  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:A4BA  9C					pushf				; Push flags
020A:A4BB  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A4C0  5A					pop	dx
020A:A4C1  8E C2				mov	es,dx
020A:A4C3  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:A4C8  5A					pop	dx
020A:A4C9  75 0A				jnz	$+0Ch			; Jump if not zero
020A:A4CB  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A4D0  74 03				je	$+5			; Jump if equal
020A:A4D2  E8 D8AB				call	$-2752h
020A:A4D5  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A4DA  9D					popf				; Pop flags
020A:A4DB  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:A4E0  C3					retn
							                        ;* No entry point to code
020A:A4E1  87 DB				xchg	bx,bx
020A:A4E3  90					nop
020A:A4E4  51					push	cx
020A:A4E5  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A4EA  06					push	es
020A:A4EB  E8 D3D0				call	$-2C2Dh
020A:A4EE  BF 5442				mov	di,5442h
020A:A4F1  B9 5474				mov	cx,5474h
020A:A4F4  81 E9 5442				sub	cx,5442h
020A:A4F8  49					dec	cx
020A:A4F9  B0 20				mov	al,20h			; ' '
020A:A4FB  FC					cld				; Clear direction
020A:A4FC  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:A4FE  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:A503  9C					pushf				; Push flags
020A:A504  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A509  5A					pop	dx
020A:A50A  8E C2				mov	es,dx
020A:A50C  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:A511  5A					pop	dx
020A:A512  75 0A				jnz	$+0Ch			; Jump if not zero
020A:A514  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A519  74 03				je	$+5			; Jump if equal
020A:A51B  E8 D862				call	$-279Bh
020A:A51E  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A523  9D					popf				; Pop flags
020A:A524  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:A529  59					pop	cx
020A:A52A  C3					retn
							                        ;* No entry point to code
020A:A52B  90					nop
020A:A52C  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:A531  75 5E				jne	$+60h			; Jump if not equal
020A:A533  52					push	dx
020A:A534  56					push	si
020A:A535  57					push	di
020A:A536  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 288

020A:A53B  06					push	es
020A:A53C  9A 1481:50F0				call	far ptr $-544Ch
020A:A541  BA 2217				mov	dx,2217h
020A:A544  9A 1481:284C				call	far ptr $-7CF8h
020A:A549  E8 D372				call	$-2C8Bh
020A:A54C  BF 2217				mov	di,2217h
020A:A54F  B0 20				mov	al,20h			; ' '
020A:A551  B9 22CF				mov	cx,22CFh
020A:A554  81 E9 2217				sub	cx,2217h
020A:A558  FC					cld				; Clear direction
020A:A559  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020A:A55B  B8 0003				mov	ax,3
020A:A55E  9A 1481:2790				call	far ptr $-7DCEh
020A:A563  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:A568  9C					pushf				; Push flags
020A:A569  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A56E  5A					pop	dx
020A:A56F  8E C2				mov	es,dx
020A:A571  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:A576  5A					pop	dx
020A:A577  75 0A				jnz	$+0Ch			; Jump if not zero
020A:A579  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A57E  74 03				je	$+5			; Jump if equal
020A:A580  E8 D7FD				call	$-2800h
020A:A583  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A588  9D					popf				; Pop flags
020A:A589  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:A58E  5F					pop	di
020A:A58F  5E					pop	si
020A:A590  5A					pop	dx
020A:A591  C7 06 2167 FFFF			mov	word ptr ds:[2167h],0FFFFh	; (020A:2167=64h)
020A:A597  C3					retn
							                        ;* No entry point to code
020A:A598  50					push	ax
020A:A599  B4 3E				mov	ah,3Eh
020A:A59B  CD 21				int	21h			; DOS Services  ah=function 3Eh
										;  close file, bx=file handle
020A:A59D  58					pop	ax
020A:A59E  C3					retn
							                        ;* No entry point to code
020A:A59F  90					nop
020A:A5A0  80 3E 2317 00			cmp	byte ptr ds:[2317h],0	; (020A:2317=0)
020A:A5A5  75 02				jne	$+4			; Jump if not equal
020A:A5A7  EB 70				jmp	short $+72h
							                        ;* No entry point to code
020A:A5A9  06					push	es
020A:A5AA  55					push	bp
020A:A5AB  F7 06 3D3E 0040			test	word ptr ds:[3D3Eh],40h	; (020A:3D3E=3E80h)
020A:A5B1  75 64				jnz	$+66h			; Jump if not zero
020A:A5B3  80 3E 3C29 01			cmp	byte ptr ds:[3C29h],1	; (020A:3C29=1)
020A:A5B8  74 5D				je	$+5Fh			; Jump if equal
020A:A5BA  80 3E 1D5C 78			cmp	byte ptr ds:[1D5Ch],78h	; (020A:1D5C=0) 'x'
020A:A5BF  74 0E				je	$+10h			; Jump if equal
020A:A5C1  80 3E 1D5C F5			cmp	byte ptr ds:[1D5Ch],0F5h	; (020A:1D5C=0)
020A:A5C6  74 07				je	$+9			; Jump if equal
020A:A5C8  80 3E 1D5C 4F			cmp	byte ptr ds:[1D5Ch],4Fh	; (020A:1D5C=0) 'O'
020A:A5CD  75 48				jne	$+4Ah			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 289

020A:A5CF  83 3E 2FD2 FF			cmp	word ptr ds:[2FD2h],0FFFFh	; (020A:2FD2=454Ch)
020A:A5D4  75 15				jne	$+17h			; Jump if not equal
020A:A5D6  80 3E 1F85 08			cmp	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:A5DB  74 3A				je	$+3Ch			; Jump if equal
020A:A5DD  80 3E 1F85 09			cmp	byte ptr ds:[1F85h],9	; (020A:1F85=0)
020A:A5E2  74 33				je	$+35h			; Jump if equal
020A:A5E4  80 3E 1F85 0A			cmp	byte ptr ds:[1F85h],0Ah	; (020A:1F85=0)
020A:A5E9  74 2C				je	$+2Eh			; Jump if equal
020A:A5EB  E8 C676				call	$-3987h
020A:A5EE  3E: C6 46 00 28			mov	byte ptr ds:[bp],28h	; '('
020A:A5F3  45					inc	bp
020A:A5F4  A1 2FD2				mov	ax,word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:A5F7  F7 06 1F86 8000			test	word ptr ds:[1F86h],8000h	; (020A:1F86=0)
020A:A5FD  75 06				jnz	$+8			; Jump if not zero
020A:A5FF  3B 06 216C				cmp	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:A603  74 05				je	$+7			; Jump if equal
020A:A605  9A 1481:0168				call	far ptr $+5B63h
020A:A60A  A1 2FD4				mov	ax,word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:A60D  9A 1481:0294				call	far ptr $+5C87h
020A:A612  3E: C6 46 00 29			mov	byte ptr ds:[bp],29h	; ')'
020A:A617  5D					pop	bp
020A:A618  07					pop	es
020A:A619  C3					retn
							                        ;* No entry point to code
020A:A61A  87 DB				xchg	bx,bx
020A:A61C  53					push	bx
020A:A61D  80 3E 1F85 01			cmp	byte ptr ds:[1F85h],1	; (020A:1F85=0)
020A:A622  74 2A				je	$+2Ch			; Jump if equal
020A:A624  F6 06 2187 01			test	byte ptr ds:[2187h],1	; (020A:2187=0E8h)
020A:A629  75 23				jnz	$+25h			; Jump if not zero
020A:A62B  80 3E 17A7 06			cmp	byte ptr ds:[17A7h],6	; (020A:17A7=0)
020A:A630  72 1C				jb	$+1Eh			; Jump if below
020A:A632  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:A637  74 15				je	$+17h			; Jump if equal
020A:A639  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:A63C  2B 06 21B0				sub	ax,word ptr ds:[21B0h]	; (020A:21B0=1Bh)
020A:A640  3D 0064				cmp	ax,64h
020A:A643  77 09				ja	$+0Bh			; Jump if above
020A:A645  BB FFFF				mov	bx,0FFFFh
020A:A648  39 1E 21B2				cmp	word ptr ds:[21B2h],bx	; (020A:21B2=0E1Eh)
020A:A64C  75 03				jne	$+5			; Jump if not equal
020A:A64E  E9 00B9				jmp	$+0BCh
							                        ;* No entry point to code
020A:A651  51					push	cx
020A:A652  56					push	si
020A:A653  57					push	di
020A:A654  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A659  06					push	es
020A:A65A  BA 0001				mov	dx,1
020A:A65D  8B 1E 216C				mov	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:A661  A1 21B0				mov	ax,word ptr ds:[21B0h]	; (020A:21B0=1Bh)
020A:A664  3D FFFF				cmp	ax,0FFFFh
020A:A667  74 73				je	$+75h			; Jump if equal
020A:A669  E8 BD74				call	$-4289h
020A:A66C  73 6E				jnc	$+70h			; Jump if carry=0
020A:A66E  9A 1481:7CE0				call	far ptr $-298Eh
020A:A673  72 67				jc	$+69h			; Jump if carry Set
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 290

020A:A675  56					push	si
020A:A676  8B F7				mov	si,di
020A:A678  E8 E335				call	$-1CC8h
020A:A67B  5E					pop	si
020A:A67C  BE 2198				mov	si,2198h
020A:A67F  B9 0003				mov	cx,3
020A:A682  8B 7C 02				mov	di,[si+2]
020A:A685  83 FF FF				cmp	di,0FFFFh
020A:A688  74 20				je	$+22h			; Jump if equal
020A:A68A  BA 0001				mov	dx,1
020A:A68D  8B 1C				mov	bx,[si]
020A:A68F  8B 44 02				mov	ax,[si+2]
020A:A692  E8 BD4B				call	$-42B2h
020A:A695  73 13				jnc	$+15h			; Jump if carry=0
020A:A697  9A 1481:7CE0				call	far ptr $-29B7h
020A:A69C  72 07				jc	$+9			; Jump if carry Set
020A:A69E  56					push	si
020A:A69F  8B F7				mov	si,di
020A:A6A1  E8 E30C				call	$-1CF1h
020A:A6A4  5E					pop	si
020A:A6A5  83 C6 04				add	si,4
020A:A6A8  E2 D8				loop	$-26h			; Loop if cx > 0

020A:A6AA  89 1E 21B2				mov	word ptr ds:[21B2h],bx	; (020A:21B2=0E1Eh)
020A:A6AE  BE 21A4				mov	si,21A4h
020A:A6B1  B9 0003				mov	cx,3
020A:A6B4  8B 7C 02				mov	di,[si+2]
020A:A6B7  83 FF FF				cmp	di,0FFFFh
020A:A6BA  74 20				je	$+22h			; Jump if equal
020A:A6BC  8B 1C				mov	bx,[si]
020A:A6BE  8B 44 02				mov	ax,[si+2]
020A:A6C1  BA 0002				mov	dx,2
020A:A6C4  E8 BD19				call	$-42E4h
020A:A6C7  73 13				jnc	$+15h			; Jump if carry=0
020A:A6C9  9A 1481:7CE0				call	far ptr $-29E9h
020A:A6CE  72 07				jc	$+9			; Jump if carry Set
020A:A6D0  56					push	si
020A:A6D1  8B F7				mov	si,di
020A:A6D3  E8 E2DA				call	$-1D23h
020A:A6D6  5E					pop	si
020A:A6D7  83 C6 04				add	si,4
020A:A6DA  E2 D8				loop	$-26h			; Loop if cx > 0

020A:A6DC  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:A6E1  9C					pushf				; Push flags
020A:A6E2  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A6E7  5A					pop	dx
020A:A6E8  8E C2				mov	es,dx
020A:A6EA  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:A6EF  5A					pop	dx
020A:A6F0  75 0A				jnz	$+0Ch			; Jump if not zero
020A:A6F2  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A6F7  74 03				je	$+5			; Jump if equal
020A:A6F9  E8 D684				call	$-2979h
020A:A6FC  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A701  9D					popf				; Pop flags
020A:A702  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 291

020A:A707  5F					pop	di
020A:A708  5E					pop	si
020A:A709  59					pop	cx
020A:A70A  5B					pop	bx
020A:A70B  C3					retn
020A:A70C  00					db	0
020A:A70D  00 00				add	[bx+si],al
020A:A70F  00 53 52				add	[bp+di+52h],dl
020A:A712  55					push	bp
020A:A713  1E					push	ds
020A:A714  83 3E 3DA6 FF			cmp	word ptr ds:[3DA6h],0FFFFh	; (020A:3DA6=816Ch)
020A:A719  74 06				je	$+8			; Jump if equal
020A:A71B  3A 0E 3DA8				cmp	cl,byte ptr ds:[3DA8h]	; (020A:3DA8=14h)
020A:A71F  73 05				jae	$+7			; Jump if above or =
020A:A721  E8 D17F				call	$-2E7Eh
020A:A724  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:A726  E8 D17D				call	$-2E80h
020A:A729  E8 D192				call	$-2E6Bh
020A:A72C  33 F6				xor	si,si			; Zero register
020A:A72E  B3 FF				mov	bl,0FFh
020A:A730  B7 01				mov	bh,1
020A:A732  BD 0005				mov	bp,5
020A:A735  38 1C				cmp	[si],bl
020A:A737  74 5E				je	$+60h			; Jump if equal
020A:A739  39 44 03				cmp	[si+3],ax
020A:A73C  73 1A				jae	$+1Ch			; Jump if above or =
020A:A73E  33 D2				xor	dx,dx			; Zero register
020A:A740  02 54 02				add	dl,[si+2]
020A:A743  D1 E2				shl	dx,1			; Shift w/zeros fill
020A:A745  84 7C 01				test	bh,[si+1]
020A:A748  75 06				jnz	$+8			; Jump if not zero
020A:A74A  03 D5				add	dx,bp
020A:A74C  03 F2				add	si,dx
020A:A74E  EB E5				jmp	short $-19h
							                        ;* No entry point to code
020A:A750  D1 E2				shl	dx,1			; Shift w/zeros fill
020A:A752  03 D5				add	dx,bp
020A:A754  03 F2				add	si,dx
020A:A756  EB DD				jmp	short $-21h
							                        ;* No entry point to code
020A:A758  77 3D				ja	$+3Fh			; Jump if above
020A:A75A  26: 80 3E 4729 01			cmp	byte ptr es:[4729h],1	; (020A:4729=18h)
020A:A760  74 0E				je	$+10h			; Jump if equal
020A:A762  F6 44 01 80				test	byte ptr [si+1],80h
020A:A766  75 D6				jnz	$-28h			; Jump if not zero
020A:A768  38 0C				cmp	[si],cl
020A:A76A  77 2B				ja	$+2Dh			; Jump if above
020A:A76C  75 D0				jnz	$-2Eh			; Jump if not zero
020A:A76E  EB 08				jmp	short $+0Ah
							                        ;* No entry point to code
020A:A770  80 64 01 7F				and	byte ptr [si+1],7Fh
020A:A774  38 0C				cmp	[si],cl
020A:A776  75 C6				jne	$-38h			; Jump if not equal
020A:A778  38 6C 01				cmp	[si+1],ch
020A:A77B  74 1D				je	$+1Fh			; Jump if equal
020A:A77D  50					push	ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 292

020A:A77E  8A 64 01				mov	ah,[si+1]
020A:A781  8A C5				mov	al,ch
020A:A783  25 0606				and	ax,606h
020A:A786  3A E0				cmp	ah,al
020A:A788  58					pop	ax
020A:A789  75 B3				jnz	$-4Bh			; Jump if not zero
020A:A78B  84 EF				test	ch,bh
020A:A78D  75 AF				jnz	$-4Fh			; Jump if not zero
020A:A78F  26: 80 3E 4729 01			cmp	byte ptr es:[4729h],1	; (020A:4729=18h)
020A:A795  74 03				je	$+5			; Jump if equal
020A:A797  F8					clc				; Clear carry flag
020A:A798  EB 01				jmp	short $+3
							                        ;* No entry point to code
020A:A79A  F9					stc				; Set carry flag
020A:A79B  8C DB				mov	bx,ds
020A:A79D  8E C3				mov	es,bx
020A:A79F  1F					pop	ds
020A:A7A0  5D					pop	bp
020A:A7A1  5A					pop	dx
020A:A7A2  5B					pop	bx
020A:A7A3  C3					retn
							                        ;* No entry point to code
020A:A7A4  E8 AF1D				call	$-50E0h
020A:A7A7  50					push	ax
020A:A7A8  53					push	bx
020A:A7A9  51					push	cx
020A:A7AA  52					push	dx
020A:A7AB  57					push	di
020A:A7AC  56					push	si
020A:A7AD  55					push	bp
020A:A7AE  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A7B3  06					push	es
020A:A7B4  BD 3D9D				mov	bp,3D9Dh
020A:A7B7  83 3E 3DA6 FF			cmp	word ptr ds:[3DA6h],0FFFFh	; (020A:3DA6=816Ch)
020A:A7BC  74 09				je	$+0Bh			; Jump if equal
020A:A7BE  3B 1E 3DA6				cmp	bx,word ptr ds:[3DA6h]	; (020A:3DA6=816Ch)
020A:A7C2  72 03				jb	$+5			; Jump if below
020A:A7C4  BD 3D9F				mov	bp,3D9Fh
020A:A7C7  8B 0E 3DA1				mov	cx,word ptr ds:[3DA1h]	; (020A:3DA1=0B007h)
020A:A7CB  83 E9 0B				sub	cx,0Bh
020A:A7CE  3E: 3B 4E 00				cmp	cx,ds:[bp]
020A:A7D2  77 03				ja	$+5			; Jump if above
020A:A7D4  E9 012C				jmp	$+12Fh
							                        ;* No entry point to code
020A:A7D7  9A 1481:6D08				call	far ptr $-3ACFh
020A:A7DC  F7 06 1F86 0040			test	word ptr ds:[1F86h],40h	; (020A:1F86=0)
020A:A7E2  75 24				jnz	$+26h			; Jump if not zero
020A:A7E4  83 FB 00				cmp	bx,0
020A:A7E7  75 10				jne	$+12h			; Jump if not equal
020A:A7E9  3D 0400				cmp	ax,400h
020A:A7EC  72 0B				jb	$+0Dh			; Jump if below
020A:A7EE  3D 0500				cmp	ax,500h
020A:A7F1  77 15				ja	$+17h			; Jump if above
020A:A7F3  BB 0040				mov	bx,40h
020A:A7F6  2D 0400				sub	ax,400h
020A:A7F9  83 FB 40				cmp	bx,40h
020A:A7FC  75 0A				jne	$+0Ch			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 293

020A:A7FE  3D 0100				cmp	ax,100h
020A:A801  75 05				jne	$+7			; Jump if not equal
020A:A803  33 C0				xor	ax,ax			; Zero register
020A:A805  BB 0050				mov	bx,50h
020A:A808  BE 0000				mov	si,0
020A:A80B  E8 D0A4				call	$-2F59h
020A:A80E  B5 01				mov	ch,1
020A:A810  26: 39 1C				cmp	es:[si],bx
020A:A813  75 0C				jne	$+0Eh			; Jump if not equal
020A:A815  26: 3B 44 02				cmp	ax,es:[si+2]
020A:A819  72 06				jb	$+8			; Jump if below
020A:A81B  26: 3B 44 04				cmp	ax,es:[si+4]
020A:A81F  76 0E				jbe	$+10h			; Jump if below or =
020A:A821  FE C5				inc	ch
020A:A823  83 C6 19				add	si,19h
020A:A826  3A 2E 1CF1				cmp	ch,byte ptr ds:[1CF1h]	; (020A:1CF1=0)
020A:A82A  76 E4				jbe	$-1Ah			; Jump if below or =
020A:A82C  E9 00D4				jmp	$+0D7h
							                        ;* No entry point to code
020A:A82F  FE CD				dec	ch
020A:A831  80 FD FA				cmp	ch,0FAh
020A:A834  76 01				jbe	$+3			; delay for I/O
020A:A836  90					nop
020A:A837  8A CD				mov	cl,ch
020A:A839  32 ED				xor	ch,ch			; Zero register
020A:A83B  3B 1E 216C				cmp	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:A83F  74 03				je	$+5			; Jump if equal
020A:A841  80 CD 01				or	ch,1
020A:A844  83 FA 04				cmp	dx,4
020A:A847  74 0D				je	$+0Fh			; Jump if equal
020A:A849  83 FA 02				cmp	dx,2
020A:A84C  74 05				je	$+7			; Jump if equal
020A:A84E  80 CD 02				or	ch,2
020A:A851  EB 03				jmp	short $+5
							                        ;* No entry point to code
020A:A853  80 CD 04				or	ch,4
020A:A856  E8 FEB7				call	$-146h
020A:A859  72 04				jc	$+6			; Jump if carry Set
020A:A85B  B7 01				mov	bh,1
020A:A85D  EB 48				jmp	short $+4Ah
							                        ;* No entry point to code
020A:A85F  32 FF				xor	bh,bh			; Zero register
020A:A861  26: 8A 54 02				mov	dl,es:[si+2]
020A:A865  80 FA FF				cmp	dl,0FFh
020A:A868  74 25				je	$+27h			; Jump if equal
020A:A86A  8B FE				mov	di,si
020A:A86C  83 C6 05				add	si,5
020A:A86F  32 F6				xor	dh,dh			; Zero register
020A:A871  D1 E2				shl	dx,1			; Shift w/zeros fill
020A:A873  F6 C5 01				test	ch,1
020A:A876  74 02				jz	$+4			; Jump if zero
020A:A878  D1 E2				shl	dx,1			; Shift w/zeros fill
020A:A87A  03 F2				add	si,dx
020A:A87C  8B 16 216E				mov	dx,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:A880  2B 16 448D				sub	dx,word ptr ds:[448Dh]	; (020A:448D=0A205h)
020A:A884  F6 C5 01				test	ch,1
020A:A887  75 08				jnz	$+0Ah			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 294

020A:A889  26: 3B 54 FE				cmp	dx,es:[si-2]
020A:A88D  75 14				jne	$+16h			; Jump if not equal
020A:A88F  EB 72				jmp	short $+74h
							                        ;* No entry point to code
020A:A891  26: 3B 54 FC				cmp	dx,es:[si-4]
020A:A895  75 0C				jne	$+0Eh			; Jump if not equal
020A:A897  8B 16 216C				mov	dx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:A89B  26: 3B 54 FE				cmp	dx,es:[si-2]
020A:A89F  75 02				jne	$+4			; Jump if not equal
020A:A8A1  EB 60				jmp	short $+62h
							                        ;* No entry point to code
020A:A8A3  26: FE 45 02				inc	byte ptr es:[di+2]
020A:A8A7  8B D6				mov	dx,si
020A:A8A9  8A DD				mov	bl,ch
020A:A8AB  51					push	cx
020A:A8AC  3E: 8B 7E 00				mov	di,ds:[bp]
020A:A8B0  8B F7				mov	si,di
020A:A8B2  8B CF				mov	cx,di
020A:A8B4  2B CA				sub	cx,dx
020A:A8B6  83 C7 02				add	di,2
020A:A8B9  83 C1 02				add	cx,2
020A:A8BC  0A FF				or	bh,bh			; Zero ?
020A:A8BE  74 03				jz	$+5			; Jump if zero
020A:A8C0  83 C7 05				add	di,5
020A:A8C3  F6 C3 01				test	bl,1
020A:A8C6  74 03				jz	$+5			; Jump if zero
020A:A8C8  83 C7 02				add	di,2
020A:A8CB  3E: 89 7E 00				mov	ds:[bp],di
020A:A8CF  06					push	es
020A:A8D0  1F					pop	ds
020A:A8D1  FD					std				; Set direction flag
020A:A8D2  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:A8D4  E8 CFC9				call	$-3034h
020A:A8D7  59					pop	cx
020A:A8D8  8B F2				mov	si,dx
020A:A8DA  0A FF				or	bh,bh			; Zero ?
020A:A8DC  74 0F				jz	$+11h			; Jump if zero
020A:A8DE  26: 89 0C				mov	es:[si],cx
020A:A8E1  26: C6 44 02 01			mov	byte ptr es:[si+2],1
020A:A8E6  26: 89 44 03				mov	es:[si+3],ax
020A:A8EA  83 C6 05				add	si,5
020A:A8ED  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:A8F0  2B 06 448D				sub	ax,word ptr ds:[448Dh]	; (020A:448D=0A205h)
020A:A8F4  26: 89 04				mov	es:[si],ax
020A:A8F7  F6 C3 01				test	bl,1
020A:A8FA  74 07				jz	$+9			; Jump if zero
020A:A8FC  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:A8FF  26: 89 44 02				mov	es:[si+2],ax
020A:A903  FC					cld				; Clear direction
020A:A904  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:A909  9C					pushf				; Push flags
020A:A90A  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A90F  5A					pop	dx
020A:A910  8E C2				mov	es,dx
020A:A912  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:A917  5A					pop	dx
020A:A918  75 0A				jnz	$+0Ch			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 295

020A:A91A  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:A91F  74 03				je	$+5			; Jump if equal
020A:A921  E8 D45C				call	$-2BA1h
020A:A924  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:A929  9D					popf				; Pop flags
020A:A92A  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:A92F  5D					pop	bp
020A:A930  5E					pop	si
020A:A931  5F					pop	di
020A:A932  5A					pop	dx
020A:A933  59					pop	cx
020A:A934  5B					pop	bx
020A:A935  58					pop	ax
020A:A936  C3					retn
							                        ;* No entry point to code
020A:A937  90					nop
020A:A938  50					push	ax
020A:A939  53					push	bx
020A:A93A  51					push	cx
020A:A93B  52					push	dx
020A:A93C  56					push	si
020A:A93D  57					push	di
020A:A93E  55					push	bp
020A:A93F  BF 0008				mov	di,8
020A:A942  8B F7				mov	si,di
020A:A944  BB 2F9C				mov	bx,2F9Ch
020A:A947  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (020A:0000=1828h)
020A:A94C  72 03				jb	$+5			; Jump if below
020A:A94E  E9 02FF				jmp	$+302h
							                        ;* No entry point to code
020A:A951  26: 8A 45 05				mov	al,es:[di+5]
020A:A955  25 000F				and	ax,0Fh
020A:A958  D7					xlat				; al=[al+[bx]] table
020A:A959  0A C0				or	al,al			; Zero ?
020A:A95B  75 04				jnz	$+6			; Jump if not zero
020A:A95D  26: 8A 45 06				mov	al,es:[di+6]
020A:A961  8B F7				mov	si,di
020A:A963  03 F0				add	si,ax
020A:A965  26: 3B 36 0000			cmp	si,word ptr es:[0]	; (020A:0000=1828h)
020A:A96A  72 03				jb	$+5			; Jump if below
020A:A96C  E9 02E1				jmp	$+2E4h
							                        ;* No entry point to code
020A:A96F  26: F6 45 05 10			test	byte ptr es:[di+5],10h
020A:A974  74 03				jz	$+5			; Jump if zero
020A:A976  E9 02BC				jmp	$+2BFh
							                        ;* No entry point to code
020A:A979  26: F6 44 05 10			test	byte ptr es:[si+5],10h
020A:A97E  74 03				jz	$+5			; Jump if zero
020A:A980  E9 02AF				jmp	$+2B2h
							                        ;* No entry point to code
020A:A983  26: 8B 05				mov	ax,es:[di]
020A:A986  26: 3B 04				cmp	ax,es:[si]
020A:A989  74 03				je	$+5			; Jump if equal
020A:A98B  E9 02A4				jmp	$+2A7h
							                        ;* No entry point to code
020A:A98E  26: 8B 45 02				mov	ax,es:[di+2]
020A:A992  26: 3B 44 02				cmp	ax,es:[si+2]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 296

020A:A996  75 03				jne	$+5			; Jump if not equal
020A:A998  E9 015B				jmp	$+15Eh
							                        ;* No entry point to code
020A:A99B  26: F6 45 05 80			test	byte ptr es:[di+5],80h
020A:A9A0  74 03				jz	$+5			; Jump if zero
020A:A9A2  E9 028D				jmp	$+290h
							                        ;* No entry point to code
020A:A9A5  26: 8B 45 08				mov	ax,es:[di+8]
020A:A9A9  26: 03 45 02				add	ax,es:[di+2]
020A:A9AD  73 07				jnc	$+9			; Jump if carry=0
020A:A9AF  40					inc	ax
020A:A9B0  26: 29 45 08				sub	es:[di+8],ax
020A:A9B4  EB E5				jmp	short $-19h
							                        ;* No entry point to code
020A:A9B6  26: 3B 44 02				cmp	ax,es:[si+2]
020A:A9BA  77 03				ja	$+5			; Jump if above
020A:A9BC  E9 0273				jmp	$+276h
							                        ;* No entry point to code
020A:A9BF  83 3E 1EA9 00			cmp	word ptr ds:[1EA9h],0	; (020A:1EA9=0)
020A:A9C4  75 19				jne	$+1Bh			; Jump if not equal
020A:A9C6  26: 8A 45 04				mov	al,es:[di+4]
020A:A9CA  24 3F				and	al,3Fh			; '?'
020A:A9CC  3C 20				cmp	al,20h			; ' '
020A:A9CE  75 0F				jne	$+11h			; Jump if not equal
020A:A9D0  26: 8B 45 02				mov	ax,es:[di+2]
020A:A9D4  26: 03 45 08				add	ax,es:[di+8]
020A:A9D8  A3 1EA9				mov	word ptr ds:[1EA9h],ax	; (020A:1EA9=0)
020A:A9DB  89 3E 1EAB				mov	word ptr ds:[1EABh],di	; (020A:1EAB=0)
020A:A9DF  26: 8A 45 04				mov	al,es:[di+4]
020A:A9E3  24 3F				and	al,3Fh			; '?'
020A:A9E5  3C 21				cmp	al,21h			; '!'
020A:A9E7  74 04				je	$+6			; Jump if equal
020A:A9E9  3C 22				cmp	al,22h			; '"'
020A:A9EB  75 03				jne	$+5			; Jump if not equal
020A:A9ED  E9 009A				jmp	$+9Dh
							                        ;* No entry point to code
020A:A9F0  26: 8A 44 04				mov	al,es:[si+4]
020A:A9F4  24 3F				and	al,3Fh			; '?'
020A:A9F6  3C 21				cmp	al,21h			; '!'
020A:A9F8  75 03				jne	$+5			; Jump if not equal
020A:A9FA  E9 00AD				jmp	$+0B0h
							                        ;* No entry point to code
020A:A9FD  3C 22				cmp	al,22h			; '"'
020A:A9FF  74 F9				je	$-5			; Jump if equal
020A:AA01  87 F7				xchg	si,di
020A:AA03  9A 1481:7CE0				call	far ptr $-2D23h
020A:AA08  87 F7				xchg	si,di
020A:AA0A  72 7E				jc	$+80h			; Jump if carry Set
020A:AA0C  9A 1481:7CE0				call	far ptr $-2D2Ch
020A:AA11  72 66				jc	$+68h			; Jump if carry Set
020A:AA13  26: 8B 44 02				mov	ax,es:[si+2]
020A:AA17  26: 2B 45 02				sub	ax,es:[di+2]
020A:AA1B  BA 0004				mov	dx,4
020A:AA1E  26: 8A 4D 04				mov	cl,es:[di+4]
020A:AA22  80 E1 3F				and	cl,3Fh			; '?'
020A:AA25  80 F9 20				cmp	cl,20h			; ' '
020A:AA28  75 03				jne	$+5			; Jump if not equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 297

020A:AA2A  BA 03F0				mov	dx,3F0h
020A:AA2D  3B C2				cmp	ax,dx
020A:AA2F  73 59				jae	$+5Bh			; Jump if above or =
020A:AA31  81 FA 03F0				cmp	dx,3F0h
020A:AA35  74 03				je	$+5			; Jump if equal
020A:AA37  E9 00C2				jmp	$+0C5h
							                        ;* No entry point to code
020A:AA3A  26: 8A 44 04				mov	al,es:[si+4]
020A:AA3E  24 3F				and	al,3Fh			; '?'
020A:AA40  3C 02				cmp	al,2
020A:AA42  74 46				je	$+48h			; Jump if equal
020A:AA44  3C 04				cmp	al,4
020A:AA46  74 42				je	$+44h			; Jump if equal
020A:AA48  3C 20				cmp	al,20h			; ' '
020A:AA4A  75 22				jne	$+24h			; Jump if not equal
020A:AA4C  57					push	di
020A:AA4D  06					push	es
020A:AA4E  26: 8B 7C 02				mov	di,es:[si+2]
020A:AA52  26: 8B 04				mov	ax,es:[si]
020A:AA55  8E C0				mov	es,ax
020A:AA57  9A 1481:8834				call	far ptr $-2223h
020A:AA5C  B0 01				mov	al,1
020A:AA5E  72 04				jc	$+6			; Jump if carry Set
020A:AA60  26: 8A 45 FF				mov	al,es:[di-1]
020A:AA64  07					pop	es
020A:AA65  5F					pop	di
020A:AA66  3C 00				cmp	al,0
020A:AA68  74 20				je	$+22h			; Jump if equal
020A:AA6A  3C 24				cmp	al,24h			; '$'
020A:AA6C  74 1C				je	$+1Eh			; Jump if equal
020A:AA6E  26: 8B 44 02				mov	ax,es:[si+2]
020A:AA72  26: 2B 45 02				sub	ax,es:[di+2]
020A:AA76  E9 0083				jmp	$+86h
							                        ;* No entry point to code
020A:AA79  26: 8B 44 02				mov	ax,es:[si+2]
020A:AA7D  26: 2B 45 02				sub	ax,es:[di+2]
020A:AA81  3D 03F0				cmp	ax,3F0h
020A:AA84  73 02				jae	$+4			; Jump if above or =
020A:AA86  EB 74				jmp	short $+76h
020A:AA88  EB 6C				jmp	short $+6Eh
							                        ;* No entry point to code
020A:AA8A  26: 8B 44 02				mov	ax,es:[si+2]
020A:AA8E  26: 2B 45 02				sub	ax,es:[di+2]
020A:AA92  8B C8				mov	cx,ax
020A:AA94  26: 87 45 08				xchg	es:[di+8],ax
020A:AA98  2B C1				sub	ax,cx
020A:AA9A  26: 3B 44 08				cmp	ax,es:[si+8]
020A:AA9E  77 03				ja	$+5			; Jump if above
020A:AAA0  E9 018F				jmp	$+192h
							                        ;* No entry point to code
020A:AAA3  26: 2B 44 02				sub	ax,es:[si+2]
020A:AAA7  E9 0188				jmp	$+18Bh
							                        ;* No entry point to code
020A:AAAA  26: 8B 45 02				mov	ax,es:[di+2]
020A:AAAE  26: 03 45 08				add	ax,es:[di+8]
020A:AAB2  26: 8B 4C 02				mov	cx,es:[si+2]
020A:AAB6  26: 03 4C 08				add	cx,es:[si+8]
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 298

020A:AABA  3B C8				cmp	cx,ax
020A:AABC  76 38				jbe	$+3Ah			; Jump if below or =
020A:AABE  2B C8				sub	cx,ax
020A:AAC0  26: 89 44 02				mov	es:[si+2],ax
020A:AAC4  26: 89 4C 08				mov	es:[si+8],cx
020A:AAC8  57					push	di
020A:AAC9  26: 8A 44 05				mov	al,es:[si+5]
020A:AACD  25 000F				and	ax,0Fh
020A:AAD0  D7					xlat				; al=[al+[bx]] table
020A:AAD1  0A C0				or	al,al			; Zero ?
020A:AAD3  75 04				jnz	$+6			; Jump if not zero
020A:AAD5  26: 8A 44 06				mov	al,es:[si+6]
020A:AAD9  8B FE				mov	di,si
020A:AADB  03 F8				add	di,ax
020A:AADD  26: 8B 05				mov	ax,es:[di]
020A:AAE0  26: 3B 04				cmp	ax,es:[si]
020A:AAE3  75 0D				jne	$+0Fh			; Jump if not equal
020A:AAE5  26: 8B 45 02				mov	ax,es:[di+2]
020A:AAE9  26: 3B 44 02				cmp	ax,es:[si+2]
020A:AAED  77 03				ja	$+5			; Jump if above
020A:AAEF  5F					pop	di
020A:AAF0  EB 04				jmp	short $+6
							                        ;* No entry point to code
020A:AAF2  5F					pop	di
020A:AAF3  E9 00FB				jmp	$+0FEh
							                        ;* No entry point to code
020A:AAF6  E8 DEBA				call	$-2143h
020A:AAF9  E9 014E				jmp	$+151h
							                        ;* No entry point to code
020A:AAFC  26: 80 4C 05 80			or	byte ptr es:[si+5],80h
020A:AB01  26: F6 45 05 80			test	byte ptr es:[di+5],80h
020A:AB06  74 19				jz	$+1Bh			; Jump if zero
020A:AB08  26: 8B 4D 06				mov	cx,es:[di+6]
020A:AB0C  81 E1 03FF				and	cx,3FFh
020A:AB10  03 C1				add	ax,cx
020A:AB12  72 05				jc	$+7			; Jump if carry Set
020A:AB14  3D 03F0				cmp	ax,3F0h
020A:AB17  76 08				jbe	$+0Ah			; Jump if below or =
020A:AB19  C7 06 1EA9 0000			mov	word ptr ds:[1EA9h],0	; (020A:1EA9=0)
020A:AB1F  EB D5				jmp	short $-29h
							                        ;* No entry point to code
020A:AB21  26: 81 64 06 FC00			and	word ptr es:[si+6],0FC00h
020A:AB27  26: 09 44 06				or	es:[si+6],ax
020A:AB2B  26: 8A 45 05				mov	al,es:[di+5]
020A:AB2F  24 03				and	al,3
020A:AB31  26: 8A 64 05				mov	ah,es:[si+5]
020A:AB35  80 E4 03				and	ah,3
020A:AB38  D0 C4				rol	ah,1			; Rotate
020A:AB3A  D0 C4				rol	ah,1			; Rotate
020A:AB3C  0A C4				or	al,ah
020A:AB3E  53					push	bx
020A:AB3F  BB 3D94				mov	bx,3D94h
020A:AB42  D7					xlat				; al=[al+[bx]] table
020A:AB43  5B					pop	bx
020A:AB44  8A D0				mov	dl,al
020A:AB46  24 7F				and	al,7Fh
020A:AB48  32 E4				xor	ah,ah			; Zero register
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 299

020A:AB4A  8B C8				mov	cx,ax
020A:AB4C  E3 58				jcxz	$+5Ah			; Jump if cx=0
020A:AB4E  26: 8A 44 05				mov	al,es:[si+5]
020A:AB52  25 000F				and	ax,0Fh
020A:AB55  D7					xlat				; al=[al+[bx]] table
020A:AB56  57					push	di
020A:AB57  56					push	si
020A:AB58  06					push	es
020A:AB59  1F					pop	ds
020A:AB5A  03 F0				add	si,ax
020A:AB5C  F6 C2 80				test	dl,80h
020A:AB5F  74 19				jz	$+1Bh			; Jump if zero
020A:AB61  8B FE				mov	di,si
020A:AB63  2B F9				sub	di,cx
020A:AB65  26: A1 0000				mov	ax,word ptr es:[0]	; (020A:0000=1828h)
020A:AB69  26: 29 0E 0000			sub	word ptr es:[0],cx	; (020A:0000=1828h)
020A:AB6E  E8 00E7				call	$+0EAh
020A:AB71  8B C8				mov	cx,ax
020A:AB73  2B CE				sub	cx,si
020A:AB75  FC					cld				; Clear direction
020A:AB76  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:AB78  EB 2A				jmp	short $+2Ch
							                        ;* No entry point to code
020A:AB7A  26: A1 0000				mov	ax,word ptr es:[0]	; (020A:0000=1828h)
020A:AB7E  2B C6				sub	ax,si
020A:AB80  26: 8B 36 0000			mov	si,word ptr es:[0]	; (020A:0000=1828h)
020A:AB85  4E					dec	si
020A:AB86  8B FE				mov	di,si
020A:AB88  03 F9				add	di,cx
020A:AB8A  26: 01 0E 0000			add	word ptr es:[0],cx	; (020A:0000=1828h)
020A:AB8F  73 0A				jnc	$+0Ch			; Jump if carry=0
020A:AB91  26: 29 0E 0000			sub	word ptr es:[0],cx	; (020A:0000=1828h)
020A:AB96  73 03				jnc	$+5			; Jump if carry=0
020A:AB98  E9 C4FF				jmp	$-3AFEh
							                        ;* No entry point to code
020A:AB9B  E8 00BA				call	$+0BDh
020A:AB9E  8B C8				mov	cx,ax
020A:ABA0  FD					std				; Set direction flag
020A:ABA1  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:ABA3  FC					cld				; Clear direction
020A:ABA4  5E					pop	si
020A:ABA5  5F					pop	di
020A:ABA6  26: 80 4D 04 40			or	byte ptr es:[di+4],40h	; '@'
020A:ABAB  26: 8A 45 04				mov	al,es:[di+4]
020A:ABAF  24 3F				and	al,3Fh			; '?'
020A:ABB1  26: 80 64 04 C0			and	byte ptr es:[si+4],0C0h
020A:ABB6  26: 08 44 04				or	es:[si+4],al
020A:ABBA  26: 8A 45 05				mov	al,es:[di+5]
020A:ABBE  24 03				and	al,3
020A:ABC0  3C 03				cmp	al,3
020A:ABC2  75 02				jne	$+4			; Jump if not equal
020A:ABC4  FE C8				dec	al
020A:ABC6  26: 80 64 05 FC			and	byte ptr es:[si+5],0FCh
020A:ABCB  26: 08 44 05				or	es:[si+5],al
020A:ABCF  3C 00				cmp	al,0
020A:ABD1  74 1B				je	$+1Dh			; Jump if equal
020A:ABD3  57					push	di
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 300

020A:ABD4  56					push	si
020A:ABD5  B9 0002				mov	cx,2
020A:ABD8  3C 01				cmp	al,1
020A:ABDA  74 03				je	$+5			; Jump if equal
020A:ABDC  B9 000F				mov	cx,0Fh
020A:ABDF  83 C7 0A				add	di,0Ah
020A:ABE2  83 C6 0A				add	si,0Ah
020A:ABE5  87 F7				xchg	si,di
020A:ABE7  06					push	es
020A:ABE8  1F					pop	ds
020A:ABE9  FC					cld				; Clear direction
020A:ABEA  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:ABEC  5E					pop	si
020A:ABED  5F					pop	di
020A:ABEE  E8 CCAF				call	$-334Eh
020A:ABF1  E8 0080				call	$+83h
020A:ABF4  26: 8A 44 05				mov	al,es:[si+5]
020A:ABF8  25 000F				and	ax,0Fh
020A:ABFB  D7					xlat				; al=[al+[bx]] table
020A:ABFC  0A C0				or	al,al			; Zero ?
020A:ABFE  75 04				jnz	$+6			; Jump if not zero
020A:AC00  26: 8A 44 06				mov	al,es:[si+6]
020A:AC04  03 F0				add	si,ax
020A:AC06  26: 3B 36 0000			cmp	si,word ptr es:[0]	; (020A:0000=1828h)
020A:AC0B  73 09				jae	$+0Bh			; Jump if above or =
020A:AC0D  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020A:AC11  75 03				jne	$+5			; Jump if not equal
020A:AC13  E9 FD59				jmp	$-2A4h
							                        ;* No entry point to code
020A:AC16  26: 8A 45 05				mov	al,es:[di+5]
020A:AC1A  25 000F				and	ax,0Fh
020A:AC1D  D7					xlat				; al=[al+[bx]] table
020A:AC1E  0A C0				or	al,al			; Zero ?
020A:AC20  75 04				jnz	$+6			; Jump if not zero
020A:AC22  26: 8A 45 06				mov	al,es:[di+6]
020A:AC26  03 F8				add	di,ax
020A:AC28  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (020A:0000=1828h)
020A:AC2D  73 21				jae	$+23h			; Jump if above or =
020A:AC2F  E9 FD1F				jmp	$-2DEh
							                        ;* No entry point to code
020A:AC32  E8 003F		;*		call	$+42h			;*
020A:AC32  E8 3F 00				db	0E8h, 3Fh, 00h
020A:AC35  26: 8A 45 05				mov	al,es:[di+5]
020A:AC39  25 000F				and	ax,0Fh
020A:AC3C  D7					xlat				; al=[al+[bx]] table
020A:AC3D  0A C0				or	al,al			; Zero ?
020A:AC3F  75 04				jnz	$+6			; Jump if not zero
020A:AC41  26: 8A 45 06				mov	al,es:[di+6]
020A:AC45  03 F8				add	di,ax
020A:AC47  E9 FD07				jmp	$-2F6h
							                        ;* No entry point to code
020A:AC4A  E8 0027		;*		call	$+2Ah			;*
020A:AC4A  E8 27 00				db	0E8h, 27h, 00h
020A:AC4D  E9 FD01				jmp	$-2FCh
							                        ;* No entry point to code
020A:AC50  5D					pop	bp
020A:AC51  5F					pop	di
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 301

020A:AC52  5E					pop	si
020A:AC53  5A					pop	dx
020A:AC54  59					pop	cx
020A:AC55  5B					pop	bx
020A:AC56  58					pop	ax
020A:AC57  C3					retn
							                        ;* No entry point to code
020A:AC58  50					push	ax
020A:AC59  26: A1 0008				mov	ax,word ptr es:[8]	; (020A:0008=6702h)
020A:AC5D  26: A3 0002				mov	word ptr es:[2],ax	; (020A:0002=10h)
020A:AC61  26: A1 000A				mov	ax,word ptr es:[0Ah]	; (020A:000A=272Dh)
020A:AC65  26: A3 0004				mov	word ptr es:[4],ax	; (020A:0004=808h)
020A:AC69  26: C7 06 0006 0008			mov	word ptr es:data_5+1,8	; (020A:0006=3)
020A:AC70  58					pop	ax
020A:AC71  C3					retn
							                        ;* No entry point to code
020A:AC72  87 DB				xchg	bx,bx
020A:AC74  26: 8A 45 04				mov	al,es:[di+4]
020A:AC78  24 3F				and	al,3Fh			; '?'
020A:AC7A  8A E0				mov	ah,al
020A:AC7C  26: 8B 4D 08				mov	cx,es:[di+8]
020A:AC80  3C 21				cmp	al,21h			; '!'
020A:AC82  75 09				jne	$+0Bh			; Jump if not equal
020A:AC84  83 F9 06				cmp	cx,6
020A:AC87  77 32				ja	$+34h			; Jump if above
020A:AC89  B4 01				mov	ah,1
020A:AC8B  EB 25				jmp	short $+27h
							                        ;* No entry point to code
020A:AC8D  3C 22				cmp	al,22h			; '"'
020A:AC8F  75 09				jne	$+0Bh			; Jump if not equal
020A:AC91  83 F9 06				cmp	cx,6
020A:AC94  77 25				ja	$+27h			; Jump if above
020A:AC96  B4 02				mov	ah,2
020A:AC98  EB 18				jmp	short $+1Ah
							                        ;* No entry point to code
020A:AC9A  3C 04				cmp	al,4
020A:AC9C  75 09				jne	$+0Bh			; Jump if not equal
020A:AC9E  83 F9 04				cmp	cx,4
020A:ACA1  73 18				jae	$+1Ah			; Jump if above or =
020A:ACA3  B4 02				mov	ah,2
020A:ACA5  B0 02				mov	al,2
020A:ACA7  3C 02				cmp	al,2
020A:ACA9  75 07				jne	$+9			; Jump if not equal
020A:ACAB  83 F9 02				cmp	cx,2
020A:ACAE  73 02				jae	$+4			; Jump if above or =
020A:ACB0  B4 01				mov	ah,1
020A:ACB2  26: 80 65 04 C0			and	byte ptr es:[di+4],0C0h
020A:ACB7  26: 08 65 04				or	es:[di+4],ah
020A:ACBB  C3					retn
							                        ;* No entry point to code
020A:ACBC  53					push	bx
020A:ACBD  57					push	di
020A:ACBE  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:ACC3  06					push	es
020A:ACC4  26: 8B 05				mov	ax,es:[di]
020A:ACC7  26: 8B 5D 02				mov	bx,es:[di+2]
020A:ACCB  E8 CBE4				call	$-3419h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 302

020A:ACCE  BF 0000				mov	di,0
020A:ACD1  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020A:ACD5  75 07				jne	$+9			; Jump if not equal
020A:ACD7  26: 83 7D 02 FF			cmp	word ptr es:[di+2],0FFFFh
020A:ACDC  74 1A				je	$+1Ch			; Jump if equal
020A:ACDE  26: 3B 05				cmp	ax,es:[di]
020A:ACE1  75 0C				jne	$+0Eh			; Jump if not equal
020A:ACE3  26: 3B 5D 02				cmp	bx,es:[di+2]
020A:ACE7  72 06				jb	$+8			; Jump if below
020A:ACE9  26: 3B 5D 04				cmp	bx,es:[di+4]
020A:ACED  76 05				jbe	$+7			; Jump if below or =
020A:ACEF  83 C7 19				add	di,19h
020A:ACF2  EB DD				jmp	short $-21h
							                        ;* No entry point to code
020A:ACF4  F9					stc				; Set carry flag
020A:ACF5  9F					lahf				; Load ah from flags
020A:ACF6  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:ACF8  F8					clc				; Clear carry flag
020A:ACF9  9F					lahf				; Load ah from flags
020A:ACFA  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:ACFF  9C					pushf				; Push flags
020A:AD00  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:AD05  5A					pop	dx
020A:AD06  8E C2				mov	es,dx
020A:AD08  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:AD0D  5A					pop	dx
020A:AD0E  75 0A				jnz	$+0Ch			; Jump if not zero
020A:AD10  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:AD15  74 03				je	$+5			; Jump if equal
020A:AD17  E8 D066				call	$-2F97h
020A:AD1A  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:AD1F  9D					popf				; Pop flags
020A:AD20  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:AD25  5F					pop	di
020A:AD26  5B					pop	bx
020A:AD27  9E					sahf				; Store ah into flags
020A:AD28  C3					retn
							                        ;* No entry point to code
020A:AD29  87 DB				xchg	bx,bx
020A:AD2B  90					nop
020A:AD2C  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:AD31  06					push	es
020A:AD32  C7 06 1974 0000			mov	word ptr ds:[1974h],0	; (020A:1974=10EBh)
020A:AD38  C7 06 1976 0000			mov	word ptr ds:[1976h],0	; (020A:1976=6B4h)
020A:AD3E  80 3E 188F 00			cmp	byte ptr ds:[188Fh],0	; (020A:188F=2)
020A:AD43  74 3A				je	$+3Ch			; Jump if equal
020A:AD45  B4 19				mov	ah,19h
020A:AD47  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020A:AD49  8A D0				mov	dl,al
020A:AD4B  04 61				add	al,61h			; 'a'
020A:AD4D  A2 18EF				mov	byte ptr ds:[18EFh],al	; (020A:18EF=0E9h)
020A:AD50  C7 06 18F0 5C3A			mov	word ptr ds:[18F0h],5C3Ah	; (020A:18F0=0E4h)
020A:AD56  B4 47				mov	ah,47h			; 'G'
020A:AD58  FE C2				inc	dl
020A:AD5A  BE 18F2				mov	si,18F2h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 303

020A:AD5D  CD 21				int	21h			; DOS Services  ah=function 47h
										;  get present dir,drive dl,1=a:
										;   ds:si=ASCIIZ directory name
020A:AD5F  80 3E 1890 3A			cmp	byte ptr ds:[1890h],3Ah	; (020A:1890=4Bh) ':'
020A:AD64  75 0E				jne	$+10h			; Jump if not equal
020A:AD66  8A 16 188F				mov	dl,byte ptr ds:[188Fh]	; (020A:188F=2)
020A:AD6A  80 CA 60				or	dl,60h			; '`'
020A:AD6D  80 EA 61				sub	dl,61h			; 'a'
020A:AD70  B4 0E				mov	ah,0Eh
020A:AD72  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020A:AD74  B4 3B				mov	ah,3Bh			; ';'
020A:AD76  BA 188F				mov	dx,188Fh
020A:AD79  CD 21				int	21h			; DOS Services  ah=function 3Bh
										;  set current dir, path @ ds:dx
020A:AD7B  73 02				jnc	$+4			; Jump if carry=0
020A:AD7D  EB 21				jmp	short $+23h
							                        ;* No entry point to code
020A:AD7F  B4 29				mov	ah,29h			; ')'
020A:AD81  B0 01				mov	al,1
020A:AD83  BE 1881				mov	si,1881h
020A:AD86  E8 CB35				call	$-34C8h
020A:AD89  BF 194F				mov	di,194Fh
020A:AD8C  CD 21				int	21h			; DOS Services  ah=function 29h
										;  parse filenam @ds:si FCBes:di
										;   al=parsing control flags
020A:AD8E  3C 00				cmp	al,0
020A:AD90  74 02				je	$+4			; Jump if equal
020A:AD92  EB 0C				jmp	short $+0Eh
							                        ;* No entry point to code
020A:AD94  B4 23				mov	ah,23h			; '#'
020A:AD96  8B D7				mov	dx,di
020A:AD98  C7 06 195D 0001			mov	word ptr ds:[195Dh],1	; (020A:195D=0A06h)
020A:AD9E  CD 21				int	21h			; DOS Services  ah=function 23h
										;  get file size, FCB @ ds:dx
020A:ADA0  80 3E 188F 00			cmp	byte ptr ds:[188Fh],0	; (020A:188F=2)
020A:ADA5  74 07				je	$+9			; Jump if equal
020A:ADA7  B4 3B				mov	ah,3Bh			; ';'
020A:ADA9  BA 18EF				mov	dx,18EFh
020A:ADAC  CD 21				int	21h			; DOS Services  ah=function 3Bh
										;  set current dir, path @ ds:dx
020A:ADAE  A1 1972				mov	ax,word ptr ds:[1972h]	; (020A:1972=9063h)
020A:ADB1  A3 1976				mov	word ptr ds:[1976h],ax	; (020A:1976=6B4h)
020A:ADB4  A1 1970				mov	ax,word ptr ds:[1970h]	; (020A:1970=0EB01h)
020A:ADB7  A3 1974				mov	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:ADBA  B4 3D				mov	ah,3Dh			; '='
020A:ADBC  B0 00				mov	al,0
020A:ADBE  BA 1EB2				mov	dx,1EB2h
020A:ADC1  CD 21				int	21h			; DOS Services  ah=function 3Dh
										;  open file, al=mode,name@ds:dx
020A:ADC3  73 05				jnc	$+7			; Jump if carry=0
020A:ADC5  B3 01				mov	bl,1
020A:ADC7  E9 02A6				jmp	$+2A9h
							                        ;* No entry point to code
020A:ADCA  A3 302F				mov	word ptr ds:[302Fh],ax	; (020A:302F=534Fh)
020A:ADCD  8B D8				mov	bx,ax
020A:ADCF  83 3E 1976 00			cmp	word ptr ds:[1976h],0	; (020A:1976=6B4h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 304

020A:ADD4  75 26				jne	$+28h			; Jump if not equal
020A:ADD6  83 3E 1974 00			cmp	word ptr ds:[1974h],0	; (020A:1974=10EBh)
020A:ADDB  75 1F				jne	$+21h			; Jump if not equal
020A:ADDD  33 C9				xor	cx,cx			; Zero register
020A:ADDF  33 D2				xor	dx,dx			; Zero register
020A:ADE1  B8 4202				mov	ax,4202h
020A:ADE4  CD 21				int	21h			; DOS Services  ah=function 42h
										;  move file ptr, bx=file handle
										;   al=method, cx,dx=offset
020A:ADE6  72 07				jc	$+9			; Jump if carry Set
020A:ADE8  89 16 1976				mov	word ptr ds:[1976h],dx	; (020A:1976=6B4h)
020A:ADEC  A3 1974				mov	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:ADEF  33 C9				xor	cx,cx			; Zero register
020A:ADF1  33 D2				xor	dx,dx			; Zero register
020A:ADF3  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:ADF7  B8 4200				mov	ax,4200h
020A:ADFA  CD 21				int	21h			; DOS Services  ah=function 42h
										;  move file ptr, bx=file handle
										;   al=method, cx,dx=offset
020A:ADFC  80 3E 1853 02			cmp	byte ptr ds:[1853h],2	; (020A:1853=0)
020A:AE01  74 31				je	$+33h			; Jump if equal
020A:AE03  8B 0E 48DF				mov	cx,word ptr ds:[48DFh]	; (020A:48DF=0C62Ah)
020A:AE07  BA 1212				mov	dx,1212h
020A:AE0A  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:AE0E  E8 CA92				call	$-356Bh
020A:AE11  B4 3F				mov	ah,3Fh
020A:AE13  CD 21				int	21h			; DOS Services  ah=function 3Fh
										;  read file, bx=file handle
										;   cx=bytes to ds:dx buffer
020A:AE15  E8 CA88				call	$-3575h
020A:AE18  73 03				jnc	$+5			; Jump if carry=0
020A:AE1A  E9 0251				jmp	$+254h
							                        ;* No entry point to code
020A:AE1D  E8 CAA1				call	$-355Ch
020A:AE20  BE 1212				mov	si,1212h
020A:AE23  26: 81 3C 5A4D			cmp	word ptr es:[si],5A4Dh
020A:AE28  75 07				jne	$+9			; Jump if not equal
020A:AE2A  80 3E 1853 01			cmp	byte ptr ds:[1853h],1	; (020A:1853=0)
020A:AE2F  75 13				jne	$+15h			; Jump if not equal
020A:AE31  E9 023C				jmp	$+23Fh
							                        ;* No entry point to code
020A:AE34  E8 CA8A				call	$-3573h
020A:AE37  BE 1212				mov	si,1212h
020A:AE3A  8B 0E 187C				mov	cx,word ptr ds:[187Ch]	; (020A:187C=0B8E8h)
020A:AE3E  8B 16 187E				mov	dx,word ptr ds:[187Eh]	; (020A:187E=2401h)
020A:AE42  EB 28				jmp	short $+2Ah
							                        ;* No entry point to code
020A:AE44  26: 83 7C 18 3E			cmp	word ptr es:[si+18h],3Eh
020A:AE49  74 1E				je	$+20h			; Jump if equal
020A:AE4B  26: 8B 4C 3E				mov	cx,es:[si+3Eh]
020A:AE4F  89 0E 187C				mov	word ptr ds:[187Ch],cx	; (020A:187C=0B8E8h)
020A:AE53  3B 0E 1976				cmp	cx,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:AE57  77 10				ja	$+12h			; Jump if above
020A:AE59  26: 8B 54 3C				mov	dx,es:[si+3Ch]
020A:AE5D  89 16 187E				mov	word ptr ds:[187Eh],dx	; (020A:187E=2401h)
020A:AE61  0B D2				or	dx,dx			; Zero ?
020A:AE63  75 07				jnz	$+9			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 305

020A:AE65  0B C9				or	cx,cx			; Zero ?
020A:AE67  75 03				jnz	$+5			; Jump if not zero
020A:AE69  E9 0133				jmp	$+136h
							                        ;* No entry point to code
020A:AE6C  B8 4200				mov	ax,4200h
020A:AE6F  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:AE73  CD 21				int	21h			; DOS Services  ah=function 42h
										;  move file ptr, bx=file handle
										;   al=method, cx,dx=offset
020A:AE75  8B 0E 48DF				mov	cx,word ptr ds:[48DFh]	; (020A:48DF=0C62Ah)
020A:AE79  BA 1212				mov	dx,1212h
020A:AE7C  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:AE80  E8 CA20				call	$-35DDh
020A:AE83  B4 3F				mov	ah,3Fh
020A:AE85  CD 21				int	21h			; DOS Services  ah=function 3Fh
										;  read file, bx=file handle
										;   cx=bytes to ds:dx buffer
020A:AE87  E8 CA16				call	$-35E7h
020A:AE8A  26: 8B 04				mov	ax,es:[si]
020A:AE8D  3D 454C				cmp	ax,454Ch
020A:AE90  75 09				jne	$+0Bh			; Jump if not equal
020A:AE92  80 3E 1853 02			cmp	byte ptr ds:[1853h],2	; (020A:1853=0)
020A:AE97  74 4B				je	$+4Dh			; Jump if equal
020A:AE99  EB 29				jmp	short $+2Bh
							                        ;* No entry point to code
020A:AE9B  3D 454E				cmp	ax,454Eh
020A:AE9E  74 0F				je	$+11h			; Jump if equal
020A:AEA0  3D 4550				cmp	ax,4550h
020A:AEA3  74 0A				je	$+0Ch			; Jump if equal
020A:AEA5  3D 3457				cmp	ax,3457h
020A:AEA8  74 05				je	$+7			; Jump if equal
020A:AEAA  3D 3357				cmp	ax,3357h
020A:AEAD  75 07				jne	$+9			; Jump if not equal
020A:AEAF  A3 1371				mov	word ptr ds:[1371h],ax	; (020A:1371=0)
020A:AEB2  B4 41				mov	ah,41h			; 'A'
020A:AEB4  EB 10				jmp	short $+12h
							                        ;* No entry point to code
020A:AEB6  3D 3350				cmp	ax,3350h
020A:AEB9  74 05				je	$+7			; Jump if equal
020A:AEBB  3D 584C				cmp	ax,584Ch
020A:AEBE  75 14				jne	$+16h			; Jump if not equal
020A:AEC0  B4 20				mov	ah,20h			; ' '
020A:AEC2  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:AEC4  B4 3E				mov	ah,3Eh			; '>'
020A:AEC6  B0 04				mov	al,4
020A:AEC8  9A 1481:3108				call	far ptr $-7DC0h
020A:AECD  26: 81 3C 454C			cmp	word ptr es:[si],454Ch
020A:AED2  74 03				je	$+5			; Jump if equal
020A:AED4  E9 00A6				jmp	$+0A9h
							                        ;* No entry point to code
020A:AED7  2C 31				sub	al,31h			; '1'
020A:AED9  3C 01				cmp	al,1
020A:AEDB  77 E7				ja	$-17h			; Jump if above
020A:AEDD  3C 00				cmp	al,0
020A:AEDF  74 03				je	$+5			; Jump if equal
020A:AEE1  E9 0099				jmp	$+9Ch
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 306

							                        ;* No entry point to code
020A:AEE4  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:AEE9  06					push	es
020A:AEEA  E8 C9CE				call	$-362Fh
020A:AEED  26: C6 06 0001 E8			mov	byte ptr es:data_1+1,0E8h	; (020A:0001=18h)
020A:AEF3  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:AEF8  9C					pushf				; Push flags
020A:AEF9  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:AEFE  5A					pop	dx
020A:AEFF  8E C2				mov	es,dx
020A:AF01  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:AF06  5A					pop	dx
020A:AF07  75 0A				jnz	$+0Ch			; Jump if not zero
020A:AF09  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:AF0E  74 03				je	$+5			; Jump if equal
020A:AF10  E8 CE6D				call	$-3190h
020A:AF13  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:AF18  9D					popf				; Pop flags
020A:AF19  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:AF1E  C6 06 1F85 08			mov	byte ptr ds:[1F85h],8	; (020A:1F85=0)
020A:AF23  26: 8B 4C 44				mov	cx,es:[si+44h]
020A:AF27  83 F9 00				cmp	cx,0
020A:AF2A  74 51				je	$+53h			; Jump if equal
020A:AF2C  26: 8B 44 14				mov	ax,es:[si+14h]
020A:AF30  3D 0000				cmp	ax,0
020A:AF33  74 48				je	$+4Ah			; Jump if equal
020A:AF35  48					dec	ax
020A:AF36  26: F7 64 28				mul	word ptr es:[si+28h]	; dx:ax = data * ax
020A:AF3A  92					xchg	dx,ax
020A:AF3B  26: 03 54 2C				add	dx,es:[si+2Ch]
020A:AF3F  26: 13 44 2E				adc	ax,es:[si+2Eh]
020A:AF43  26: 03 94 008C			add	dx,word ptr es:[8Ch][si]	; (020A:008C=8250h)
020A:AF48  26: 13 84 008E			adc	ax,word ptr es:[8Eh][si]	; (020A:008E=8155h)
020A:AF4D  A3 1976				mov	word ptr ds:[1976h],ax	; (020A:1976=6B4h)
020A:AF50  A3 1858				mov	word ptr ds:[1858h],ax	; (020A:1858=0)
020A:AF53  89 16 1974				mov	word ptr ds:[1974h],dx	; (020A:1974=10EBh)
020A:AF57  89 16 185A				mov	word ptr ds:[185Ah],dx	; (020A:185A=3BFh)
020A:AF5B  26: 8B 84 0080			mov	ax,word ptr es:[80h][si]	; (020A:0080=1850h)
020A:AF60  A3 1856				mov	word ptr ds:[1856h],ax	; (020A:1856=80h)
020A:AF63  26: 8B 84 0082			mov	ax,word ptr es:[82h][si]	; (020A:0082=10h)
020A:AF68  A3 1854				mov	word ptr ds:[1854h],ax	; (020A:1854=48h)
020A:AF6B  C6 06 1F83 03			mov	byte ptr ds:[1F83h],3	; (020A:1F83=0)
020A:AF70  9A 1481:31F8				call	far ptr $-7D78h
020A:AF75  C6 06 1853 02			mov	byte ptr ds:[1853h],2	; (020A:1853=0)
020A:AF7A  E9 00F3				jmp	$+0F6h
							                        ;* No entry point to code
020A:AF7D  B8 4200				mov	ax,4200h
020A:AF80  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:AF84  33 C9				xor	cx,cx			; Zero register
020A:AF86  33 D2				xor	dx,dx			; Zero register
020A:AF88  CD 21				int	21h			; DOS Services  ah=function 42h
										;  move file ptr, bx=file handle
										;   al=method, cx,dx=offset
020A:AF8A  8B 0E 48DF				mov	cx,word ptr ds:[48DFh]	; (020A:48DF=0C62Ah)
020A:AF8E  BA 1212				mov	dx,1212h
020A:AF91  8B 1E 302F				mov	bx,word ptr ds:[302Fh]	; (020A:302F=534Fh)
020A:AF95  E8 C90B				call	$-36F2h
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 307

020A:AF98  B4 3F				mov	ah,3Fh
020A:AF9A  CD 21				int	21h			; DOS Services  ah=function 3Fh
										;  read file, bx=file handle
										;   cx=bytes to ds:dx buffer
020A:AF9C  E8 C901				call	$-36FCh
020A:AF9F  26: 8B 44 04				mov	ax,es:[si+4]
020A:AFA3  33 D2				xor	dx,dx			; Zero register
020A:AFA5  B9 0009				mov	cx,9
020A:AFA8  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:AFAA  D1 D2				rcl	dx,1			; Rotate thru carry
020A:AFAC  E2 FA				loop	$-4			; Loop if cx > 0

020A:AFAE  26: 8B 4C 02				mov	cx,es:[si+2]
020A:AFB2  83 F9 00				cmp	cx,0
020A:AFB5  74 0C				je	$+0Eh			; Jump if equal
020A:AFB7  B9 0200				mov	cx,200h
020A:AFBA  26: 2B 4C 02				sub	cx,es:[si+2]
020A:AFBE  2B C1				sub	ax,cx
020A:AFC0  83 DA 00				sbb	dx,0
020A:AFC3  50					push	ax
020A:AFC4  52					push	dx
020A:AFC5  26: 8B 44 08				mov	ax,es:[si+8]
020A:AFC9  B9 0004				mov	cx,4
020A:AFCC  33 D2				xor	dx,dx			; Zero register
020A:AFCE  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:AFD0  D1 D2				rcl	dx,1			; Rotate thru carry
020A:AFD2  E2 FA				loop	$-4			; Loop if cx > 0

020A:AFD4  29 06 1974				sub	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:AFD8  19 16 1976				sbb	word ptr ds:[1976h],dx	; (020A:1976=6B4h)
020A:AFDC  5A					pop	dx
020A:AFDD  58					pop	ax
020A:AFDE  F6 06 4719 0F			test	byte ptr ds:[4719h],0Fh	; (020A:4719=80h)
020A:AFE3  75 1E				jnz	$+20h			; Jump if not zero
020A:AFE5  3B 16 1976				cmp	dx,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:AFE9  74 0B				je	$+0Dh			; Jump if equal
020A:AFEB  77 16				ja	$+18h			; Jump if above
020A:AFED  A3 1974				mov	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:AFF0  89 16 1976				mov	word ptr ds:[1976h],dx	; (020A:1976=6B4h)
020A:AFF4  EB 0D				jmp	short $+0Fh
							                        ;* No entry point to code
020A:AFF6  3B 06 1974				cmp	ax,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:AFFA  73 07				jae	$+9			; Jump if above or =
020A:AFFC  A3 1974				mov	word ptr ds:[1974h],ax	; (020A:1974=10EBh)
020A:AFFF  89 16 1976				mov	word ptr ds:[1976h],dx	; (020A:1976=6B4h)
020A:B003  26: 8B 44 0E				mov	ax,es:[si+0Eh]
020A:B007  26: 8B 5C 10				mov	bx,es:[si+10h]
020A:B00B  3D FFF0				cmp	ax,0FFF0h
020A:B00E  75 04				jne	$+6			; Jump if not equal
020A:B010  33 C0				xor	ax,ax			; Zero register
020A:B012  33 DB				xor	bx,bx			; Zero register
020A:B014  9A 1481:B0D4				call	far ptr $+0C0h
020A:B019  3B 06 1976				cmp	ax,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:B01D  72 3E				jb	$+40h			; Jump if below
020A:B01F  77 06				ja	$+8			; Jump if above
020A:B021  3B 1E 1974				cmp	bx,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:B025  76 36				jbe	$+38h			; Jump if below or =
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 308

020A:B027  F6 06 4719 0F			test	byte ptr ds:[4719h],0Fh	; (020A:4719=80h)
020A:B02C  75 28				jnz	$+2Ah			; Jump if not zero
020A:B02E  8B 0E 1976				mov	cx,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:B032  41					inc	cx
020A:B033  3B C1				cmp	ax,cx
020A:B035  72 1F				jb	$+21h			; Jump if below
020A:B037  77 06				ja	$+8			; Jump if above
020A:B039  3B 1E 1974				cmp	bx,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:B03D  76 17				jbe	$+19h			; Jump if below or =
020A:B03F  B4 40				mov	ah,40h			; '@'
020A:B041  B0 04				mov	al,4
020A:B043  9A 1481:3108				call	far ptr $-7F3Bh
020A:B048  26: C7 44 0E 0000			mov	word ptr es:[si+0Eh],0
020A:B04E  26: C7 44 10 0000			mov	word ptr es:[si+10h],0
020A:B054  EB 07				jmp	short $+9
							                        ;* No entry point to code
020A:B056  A3 1976				mov	word ptr ds:[1976h],ax	; (020A:1976=6B4h)
020A:B059  89 1E 1974				mov	word ptr ds:[1974h],bx	; (020A:1974=10EBh)
020A:B05D  C6 06 1F83 03			mov	byte ptr ds:[1F83h],3	; (020A:1F83=0)
020A:B062  C6 06 1F85 03			mov	byte ptr ds:[1F85h],3	; (020A:1F85=0)
020A:B067  9A 1481:31F8				call	far ptr $-7E6Fh
020A:B06C  EB 02				jmp	short $+4
							                        ;* No entry point to code
020A:B06E  B3 0E				mov	bl,0Eh
020A:B070  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B075  9C					pushf				; Push flags
020A:B076  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B07B  5A					pop	dx
020A:B07C  8E C2				mov	es,dx
020A:B07E  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B083  5A					pop	dx
020A:B084  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B086  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B08B  74 03				je	$+5			; Jump if equal
020A:B08D  E8 CCF0				call	$-330Dh
020A:B090  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B095  9D					popf				; Pop flags
020A:B096  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B09B  C3					retn
							                        ;* No entry point to code
020A:B09C  50					push	ax
020A:B09D  53					push	bx
020A:B09E  57					push	di
020A:B09F  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B0A4  06					push	es
020A:B0A5  1E					push	ds
020A:B0A6  BF 0008				mov	di,8
020A:B0A9  8B 1E 216C				mov	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:B0AD  E8 CDFC				call	$-3201h
020A:B0B0  E8 C7ED				call	$-3810h
020A:B0B3  26: 3B 3E 0000			cmp	di,word ptr es:[0]	; (020A:0000=1828h)
020A:B0B8  72 02				jb	$+4			; Jump if below
020A:B0BA  EB 1E				jmp	short $+20h
							                        ;* No entry point to code
020A:B0BC  26: 80 65 04 FE			and	byte ptr es:[di+4],0FEh
020A:B0C1  EB 00				jmp	short $+2		; delay for I/O
020A:B0C3  BB 2F9C				mov	bx,2F9Ch
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 309

020A:B0C6  26: 8A 45 05				mov	al,es:[di+5]
020A:B0CA  25 000F				and	ax,0Fh
020A:B0CD  D7					xlat				; al=[al+[bx]] table
020A:B0CE  0A C0				or	al,al			; Zero ?
020A:B0D0  75 04				jnz	$+6			; Jump if not zero
020A:B0D2  26: 8A 45 06				mov	al,es:[di+6]
020A:B0D6  03 F8				add	di,ax
020A:B0D8  EB D9				jmp	short $-25h
							                        ;* No entry point to code
020A:B0DA  1F					pop	ds
020A:B0DB  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B0E0  9C					pushf				; Push flags
020A:B0E1  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B0E6  5A					pop	dx
020A:B0E7  8E C2				mov	es,dx
020A:B0E9  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B0EE  5A					pop	dx
020A:B0EF  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B0F1  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B0F6  74 03				je	$+5			; Jump if equal
020A:B0F8  E8 CC85				call	$-3378h
020A:B0FB  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B100  9D					popf				; Pop flags
020A:B101  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B106  5F					pop	di
020A:B107  5B					pop	bx
020A:B108  58					pop	ax
020A:B109  C3					retn
							                        ;* No entry point to code
020A:B10A  87 DB				xchg	bx,bx
020A:B10C  26: 8A 45 13				mov	al,es:[di+13h]
020A:B110  A8 7F				test	al,7Fh
020A:B112  74 17				jz	$+19h			; Jump if zero
020A:B114  83 3E 216E FF			cmp	word ptr ds:[216Eh],0FFFFh	; (020A:216E=104h)
020A:B119  75 10				jne	$+12h			; Jump if not equal
020A:B11B  83 3E 2323 FF			cmp	word ptr ds:[2323h],0FFFFh	; (020A:2323=0)
020A:B120  75 06				jne	$+8			; Jump if not equal
020A:B122  A1 2172				mov	ax,word ptr ds:[2172h]	; (020A:2172=59h)
020A:B125  A3 2323				mov	word ptr ds:[2323h],ax	; (020A:2323=0)
020A:B128  E9 00B2				jmp	$+0B5h
							                        ;* No entry point to code
020A:B12B  F7 06 1D60 07E0			test	word ptr ds:[1D60h],7E0h	; (020A:1D60=0)
020A:B131  75 02				jnz	$+4			; Jump if not zero
020A:B133  0C 01				or	al,1
020A:B135  F6 D0				not	al
020A:B137  22 06 2322				and	al,byte ptr ds:[2322h]	; (020A:2322=0)
020A:B13B  75 03				jnz	$+5			; Jump if not zero
020A:B13D  E9 00EA				jmp	$+0EDh
							                        ;* No entry point to code
020A:B140  3C 40				cmp	al,40h			; '@'
020A:B142  75 07				jne	$+9			; Jump if not equal
020A:B144  F6 06 1D72 07			test	byte ptr ds:[1D72h],7	; (020A:1D72=0)
020A:B149  75 03				jnz	$+5			; Jump if not zero
020A:B14B  E9 0087				jmp	$+8Ah
							                        ;* No entry point to code
020A:B14E  80 26 2322 BF			and	byte ptr ds:[2322h],0BFh	; (020A:2322=0)
020A:B153  F6 06 2322 7F			test	byte ptr ds:[2322h],7Fh	; (020A:2322=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 310

020A:B158  74 06				jz	$+8			; Jump if zero
020A:B15A  FF 06 2323				inc	word ptr ds:[2323h]	; (020A:2323=0)
020A:B15E  EB 06				jmp	short $+8
							                        ;* No entry point to code
020A:B160  C7 06 2323 FFFF			mov	word ptr ds:[2323h],0FFFFh	; (020A:2323=0)
020A:B166  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:B16B  74 03				je	$+5			; Jump if equal
020A:B16D  E9 00BA				jmp	$+0BDh
							                        ;* No entry point to code
020A:B170  52					push	dx
020A:B171  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B176  06					push	es
020A:B177  BA 1A84				mov	dx,1A84h
020A:B17A  80 3E 155F 02			cmp	byte ptr ds:[155Fh],2	; (020A:155F=0)
020A:B17F  75 21				jne	$+23h			; Jump if not equal
020A:B181  80 3E 3D49 FE			cmp	byte ptr ds:[3D49h],0FEh	; (020A:3D49=8Ah)
020A:B186  74 1A				je	$+1Ch			; Jump if equal
020A:B188  C7 06 1AA4 2A3B			mov	word ptr ds:[1AA4h],2A3Bh	; (020A:1AA4=4686h)
020A:B18E  9A 1481:284C				call	far ptr $+76BEh
020A:B193  C7 06 1AA4 2020			mov	word ptr ds:[1AA4h],2020h	; (020A:1AA4=4686h)
020A:B199  B0 57				mov	al,57h			; 'W'
020A:B19B  9A 1481:2790				call	far ptr $+75F5h
020A:B1A0  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:B1A2  9A 1481:284C				call	far ptr $+76AAh
020A:B1A7  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B1AC  9C					pushf				; Push flags
020A:B1AD  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B1B2  5A					pop	dx
020A:B1B3  8E C2				mov	es,dx
020A:B1B5  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B1BA  5A					pop	dx
020A:B1BB  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B1BD  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B1C2  74 03				je	$+5			; Jump if equal
020A:B1C4  E8 CBB9				call	$-3444h
020A:B1C7  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B1CC  9D					popf				; Pop flags
020A:B1CD  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B1D2  5A					pop	dx
020A:B1D3  EB 55				jmp	short $+57h
							                        ;* No entry point to code
020A:B1D5  F7 06 3D41 0010			test	word ptr ds:[3D41h],10h	; (020A:3D41=23h)
020A:B1DB  75 4D				jnz	$+4Fh			; Jump if not zero
020A:B1DD  A1 2323				mov	ax,word ptr ds:[2323h]	; (020A:2323=0)
020A:B1E0  A3 2172				mov	word ptr ds:[2172h],ax	; (020A:2172=59h)
020A:B1E3  C6 06 2322 00			mov	byte ptr ds:[2322h],0	; (020A:2322=0)
020A:B1E8  C6 06 3D49 FE			mov	byte ptr ds:[3D49h],0FEh	; (020A:3D49=8Ah)
020A:B1ED  C6 06 235A 00			mov	byte ptr ds:[235Ah],0	; (020A:235A=1)
020A:B1F2  C7 06 2323 FFFF			mov	word ptr ds:[2323h],0FFFFh	; (020A:2323=0)
020A:B1F8  C7 06 1CD7 0000			mov	word ptr ds:[1CD7h],0	; (020A:1CD7=0)
020A:B1FE  80 0E 2187 05			or	byte ptr ds:[2187h],5	; (020A:2187=0E8h)
020A:B203  C6 06 45A4 05			mov	byte ptr ds:[45A4h],5	; (020A:45A4=77h)
020A:B208  C6			data_186	db	0C6h			; Data table (indexed access)
020A:B209  06					push	es
020A:B20A  75 1D				jnz	$+1Fh			; Jump if not zero
020A:B20C  00 C6				add	dh,al
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 311

020A:B20E  06					push	es
020A:B20F  76 1D				jbe	$+1Fh			; Jump if below or =
020A:B211  00 E8				add	al,ch
020A:B213  0B B0 3E80				or	si,word ptr ds:[3E80h][bx+si]	; (020A:3E80=5A3Ch)
020A:B217  A8 17				test	al,17h
020A:B219  01 75 0B				add	[di+0Bh],si
020A:B21C  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:B21F  BD 19D0				mov	bp,19D0h
020A:B222  9A 1481:0294				call	far ptr $+5072h
020A:B227  F9					stc				; Set carry flag
020A:B228  EB 01				jmp	short $+3
							                        ;* No entry point to code
020A:B22A  F8					clc				; Clear carry flag
020A:B22B  C3					retn
							                        ;* No entry point to code
020A:B22C  C7 06 2323 FFFF			mov	word ptr ds:[2323h],0FFFFh	; (020A:2323=0)
020A:B232  C6 06 2322 00			mov	byte ptr ds:[2322h],0	; (020A:2322=0)
020A:B237  C6 06 235A 00			mov	byte ptr ds:[235Ah],0	; (020A:235A=1)
020A:B23C  2E: C6 06 EA63 90			mov	byte ptr cs:[0EA63h],90h	; (020A:EA63=3)
020A:B242  2E: C6 06 EA64 90			mov	byte ptr cs:[0EA64h],90h	; (020A:EA64=0E8h)
020A:B248  2E: C6 06 EA65 90			mov	byte ptr cs:[0EA65h],90h	; (020A:EA65=79h)
020A:B24E  2E: C6 06 EA66 90			mov	byte ptr cs:[0EA66h],90h	; (020A:EA66=79h)
020A:B254  C6 06 3C28 20			mov	byte ptr ds:[3C28h],20h	; (020A:3C28=0FBh) ' '
020A:B259  80 26 2320 CF			and	byte ptr ds:[2320h],0CFh	; (020A:2320=0)
020A:B25E  80 26 2320 FC			and	byte ptr ds:[2320h],0FCh	; (020A:2320=0)
020A:B263  F6 06 2320 04			test	byte ptr ds:[2320h],4	; (020A:2320=0)
020A:B268  74 05				jz	$+7			; Jump if zero
020A:B26A  80 0E 2320 03			or	byte ptr ds:[2320h],3	; (020A:2320=0)
020A:B26F  C3					retn
							                        ;* No entry point to code
020A:B270  50					push	ax
020A:B271  53					push	bx
020A:B272  51					push	cx
020A:B273  52					push	dx
020A:B274  56					push	si
020A:B275  57					push	di
020A:B276  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B27B  06					push	es
020A:B27C  F6 06 2322 06			test	byte ptr ds:[2322h],6	; (020A:2322=0)
020A:B281  75 02				jnz	$+4			; Jump if not zero
020A:B283  EB 5B				jmp	short $+5Dh
							                        ;* No entry point to code
020A:B285  FC					cld				; Clear direction
020A:B286  A0 1D5C				mov	al,byte ptr ds:[1D5Ch]	; (020A:1D5C=0)
020A:B289  A2 1D5E				mov	byte ptr ds:[1D5Eh],al	; (020A:1D5E=0)
020A:B28C  C6 06 1D5C 34			mov	byte ptr ds:[1D5Ch],34h	; (020A:1D5C=0) '4'
020A:B291  E8 C62A				call	$-39D3h
020A:B294  BE 1A0B				mov	si,1A0Bh
020A:B297  BF 1A13				mov	di,1A13h
020A:B29A  B9 0007				mov	cx,7
020A:B29D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:B29F  BD 1A0B				mov	bp,1A0Bh
020A:B2A2  BE 25C4				mov	si,25C4h
020A:B2A5  9A 1481:6800				call	far ptr $-4AA5h
020A:B2AA  BD 1A0E				mov	bp,1A0Eh
020A:B2AD  F6 06 2322 04			test	byte ptr ds:[2322h],4	; (020A:2322=0)
020A:B2B2  75 0E				jnz	$+10h			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 312

020A:B2B4  8A C2				mov	al,dl
020A:B2B6  0C 01				or	al,1
020A:B2B8  3C 71				cmp	al,71h			; 'q'
020A:B2BA  74 15				je	$+17h			; Jump if equal
020A:B2BC  3C 7B				cmp	al,7Bh			; '{'
020A:B2BE  74 11				je	$+13h			; Jump if equal
020A:B2C0  EB 1E				jmp	short $+20h
							                        ;* No entry point to code
020A:B2C2  C6 06 1D5C 35			mov	byte ptr ds:[1D5Ch],35h	; (020A:1D5C=0) '5'
020A:B2C7  A0 2979				mov	al,byte ptr ds:[2979h]	; (020A:2979=20h)
020A:B2CA  3E: 88 46 00				mov	ds:[bp],al
020A:B2CE  45					inc	bp
020A:B2CF  EB 05				jmp	short $+7
							                        ;* No entry point to code
020A:B2D1  C6 06 1D5C 69			mov	byte ptr ds:[1D5Ch],69h	; (020A:1D5C=0) 'i'
020A:B2D6  A0 2970				mov	al,byte ptr ds:[2970h]	; (020A:2970=72h)
020A:B2D9  3E: 88 46 00				mov	ds:[bp],al
020A:B2DD  45					inc	bp
020A:B2DE  EB 00				jmp	short $+2		; delay for I/O
020A:B2E0  80 FA 6F				cmp	dl,6Fh			; 'o'
020A:B2E3  75 03				jne	$+5			; Jump if not equal
020A:B2E5  E9 008B				jmp	$+8Eh
							                        ;* No entry point to code
020A:B2E8  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:B2ED  75 50				jnz	$+52h			; Jump if not zero
020A:B2EF  8A 1E 2320				mov	bl,byte ptr ds:[2320h]	; (020A:2320=0)
020A:B2F3  80 E3 07				and	bl,7
020A:B2F6  80 FB 00				cmp	bl,0
020A:B2F9  74 65				je	$+67h			; Jump if equal
020A:B2FB  80 FB 06				cmp	bl,6
020A:B2FE  74 60				je	$+62h			; Jump if equal
020A:B300  80 FB 07				cmp	bl,7
020A:B303  75 07				jne	$+9			; Jump if not equal
020A:B305  F6 C2 01				test	dl,1
020A:B308  74 56				jz	$+58h			; Jump if zero
020A:B30A  EB 15				jmp	short $+17h
							                        ;* No entry point to code
020A:B30C  F6 06 2320 02			test	byte ptr ds:[2320h],2	; (020A:2320=0)
020A:B311  74 07				jz	$+9			; Jump if zero
020A:B313  80 FB 07				cmp	bl,7
020A:B316  74 09				je	$+0Bh			; Jump if equal
020A:B318  EB 25				jmp	short $+27h
							                        ;* No entry point to code
020A:B31A  80 FB 01				cmp	bl,1
020A:B31D  74 02				je	$+4			; Jump if equal
020A:B31F  EB 1E				jmp	short $+20h
							                        ;* No entry point to code
020A:B321  BF 1A0B				mov	di,1A0Bh
020A:B324  F6 06 2322 06			test	byte ptr ds:[2322h],6	; (020A:2322=0)
020A:B329  74 03				jz	$+5			; Jump if zero
020A:B32B  BF 1A13				mov	di,1A13h
020A:B32E  A0 2982				mov	al,byte ptr ds:[2982h]	; (020A:2982=53h)
020A:B331  B9 0007				mov	cx,7
020A:B334  FC					cld				; Clear direction
020A:B335  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:B337  4F					dec	di
020A:B338  A0 296F				mov	al,byte ptr ds:[296Fh]	; (020A:296F=6Fh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 313

020A:B33B  88 05				mov	[di],al
020A:B33D  EB 21				jmp	short $+23h
							                        ;* No entry point to code
020A:B33F  BF 1A0B				mov	di,1A0Bh
020A:B342  F6 06 2322 06			test	byte ptr ds:[2322h],6	; (020A:2322=0)
020A:B347  74 03				jz	$+5			; Jump if zero
020A:B349  BF 1A13				mov	di,1A13h
020A:B34C  A0 2982				mov	al,byte ptr ds:[2982h]	; (020A:2982=53h)
020A:B34F  F6 C2 01				test	dl,1
020A:B352  75 03				jnz	$+5			; Jump if not zero
020A:B354  A0 296D				mov	al,byte ptr ds:[296Dh]	; (020A:296D=72h)
020A:B357  B9 0007				mov	cx,7
020A:B35A  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:B35C  4F					dec	di
020A:B35D  C6 05 20				mov	byte ptr [di],20h	; ' '
020A:B360  F6 06 2322 06			test	byte ptr ds:[2322h],6	; (020A:2322=0)
020A:B365  74 0C				jz	$+0Eh			; Jump if zero
020A:B367  BF 1A13				mov	di,1A13h
020A:B36A  B9 0007				mov	cx,7
020A:B36D  B0 20				mov	al,20h			; ' '
020A:B36F  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:B371  8B EF				mov	bp,di
020A:B373  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B378  9C					pushf				; Push flags
020A:B379  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B37E  5A					pop	dx
020A:B37F  8E C2				mov	es,dx
020A:B381  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B386  5A					pop	dx
020A:B387  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B389  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B38E  74 03				je	$+5			; Jump if equal
020A:B390  E8 C9ED				call	$-3610h
020A:B393  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B398  9D					popf				; Pop flags
020A:B399  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B39E  5F					pop	di
020A:B39F  5E					pop	si
020A:B3A0  5A					pop	dx
020A:B3A1  59					pop	cx
020A:B3A2  5B					pop	bx
020A:B3A3  58					pop	ax
020A:B3A4  C3					retn
							                        ;* No entry point to code
020A:B3A5  87 DB				xchg	bx,bx
020A:B3A7  90					nop
020A:B3A8  52					push	dx
020A:B3A9  51					push	cx
020A:B3AA  57					push	di
020A:B3AB  56					push	si
020A:B3AC  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B3B1  06					push	es
020A:B3B2  BE 19B6				mov	si,19B6h
020A:B3B5  80 3C 00				cmp	byte ptr [si],0
020A:B3B8  74 19				je	$+1Bh			; Jump if equal
020A:B3BA  BF 19D6				mov	di,19D6h
020A:B3BD  9A 1481:3840				call	far ptr $-7B7Dh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 314

020A:B3C2  B9 0015				mov	cx,15h
020A:B3C5  E8 C4F6				call	$-3B07h
020A:B3C8  FC					cld				; Clear direction
020A:B3C9  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:B3CB  BA 19CB				mov	dx,19CBh
020A:B3CE  9A 1481:284C				call	far ptr $+747Eh
020A:B3D3  C6 06 19B6 00			mov	byte ptr ds:[19B6h],0	; (020A:19B6=0F7h)
020A:B3D8  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B3DD  9C					pushf				; Push flags
020A:B3DE  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B3E3  5A					pop	dx
020A:B3E4  8E C2				mov	es,dx
020A:B3E6  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B3EB  5A					pop	dx
020A:B3EC  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B3EE  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B3F3  74 03				je	$+5			; Jump if equal
020A:B3F5  E8 C988				call	$-3675h
020A:B3F8  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B3FD  9D					popf				; Pop flags
020A:B3FE  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B403  5E					pop	si
020A:B404  5F					pop	di
020A:B405  59					pop	cx
020A:B406  5A					pop	dx
020A:B407  C3					retn
							                        ;* No entry point to code
020A:B408  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:B40D  75 4D				jne	$+4Fh			; Jump if not equal
020A:B40F  50					push	ax
020A:B410  51					push	cx
020A:B411  57					push	di
020A:B412  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B417  06					push	es
020A:B418  E8 C4A3				call	$-3B5Ah
020A:B41B  B9 0007				mov	cx,7
020A:B41E  BF 1A0B				mov	di,1A0Bh
020A:B421  B0 20				mov	al,20h			; ' '
020A:B423  FC					cld				; Clear direction
020A:B424  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:B426  4F					dec	di
020A:B427  8A 0E 296F				mov	cl,byte ptr ds:[296Fh]	; (020A:296F=6Fh)
020A:B42B  26: 88 0D				mov	es:[di],cl
020A:B42E  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B433  9C					pushf				; Push flags
020A:B434  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B439  5A					pop	dx
020A:B43A  8E C2				mov	es,dx
020A:B43C  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B441  5A					pop	dx
020A:B442  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B444  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B449  74 03				je	$+5			; Jump if equal
020A:B44B  E8 C932				call	$-36CBh
020A:B44E  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B453  9D					popf				; Pop flags
020A:B454  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 315

020A:B459  5F					pop	di
020A:B45A  59					pop	cx
020A:B45B  58					pop	ax
020A:B45C  C3					retn
							                        ;* No entry point to code
020A:B45D  87 DB				xchg	bx,bx
020A:B45F  90					nop
020A:B460  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:B465  75 54				jne	$+56h			; Jump if not equal
020A:B467  50					push	ax
020A:B468  51					push	cx
020A:B469  57					push	di
020A:B46A  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B46F  06					push	es
020A:B470  E8 C44B				call	$-3BB2h
020A:B473  B9 0007				mov	cx,7
020A:B476  BF 1A0B				mov	di,1A0Bh
020A:B479  A0 297B				mov	al,byte ptr ds:[297Bh]	; (020A:297B=61h)
020A:B47C  FC					cld				; Clear direction
020A:B47D  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:B47F  26: 8B 05				mov	ax,es:[di]
020A:B482  8A 0E 296F				mov	cl,byte ptr ds:[296Fh]	; (020A:296F=6Fh)
020A:B486  26: 88 0D				mov	es:[di],cl
020A:B489  47					inc	di
020A:B48A  26: 89 05				mov	es:[di],ax
020A:B48D  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B492  9C					pushf				; Push flags
020A:B493  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B498  5A					pop	dx
020A:B499  8E C2				mov	es,dx
020A:B49B  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B4A0  5A					pop	dx
020A:B4A1  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B4A3  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B4A8  74 03				je	$+5			; Jump if equal
020A:B4AA  E8 C8D3				call	$-372Ah
020A:B4AD  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B4B2  9D					popf				; Pop flags
020A:B4B3  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B4B8  5F					pop	di
020A:B4B9  59					pop	cx
020A:B4BA  58					pop	ax
020A:B4BB  C3					retn
							                        ;* No entry point to code
020A:B4BC  80 3E 17A2 04			cmp	byte ptr ds:[17A2h],4	; (020A:17A2=0)
020A:B4C1  75 07				jne	$+9			; Jump if not equal
020A:B4C3  F6 06 2187 02			test	byte ptr ds:[2187h],2	; (020A:2187=0E8h)
020A:B4C8  75 03				jnz	$+5			; Jump if not zero
020A:B4CA  E9 008B				jmp	$+8Eh
							                        ;* No entry point to code
020A:B4CD  50					push	ax
020A:B4CE  53					push	bx
020A:B4CF  52					push	dx
020A:B4D0  57					push	di
020A:B4D1  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B4D6  06					push	es
020A:B4D7  8B 1E 2194				mov	bx,word ptr ds:[2194h]	; (020A:2194=0E1Eh)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 316

020A:B4DB  A1 2196				mov	ax,word ptr ds:[2196h]	; (020A:2196=0FF2Eh)
020A:B4DE  BA 0004				mov	dx,4
020A:B4E1  E8 AEFC				call	$-5101h
020A:B4E4  73 43				jnc	$+45h			; Jump if carry=0
020A:B4E6  26: 8A 45 32				mov	al,es:[di+32h]
020A:B4EA  24 38				and	al,38h			; '8'
020A:B4EC  3C 38				cmp	al,38h			; '8'
020A:B4EE  74 39				je	$+3Bh			; Jump if equal
020A:B4F0  26: 80 45 32 08			add	byte ptr es:[di+32h],8
020A:B4F5  80 26 2187 FD			and	byte ptr ds:[2187h],0FDh	; (020A:2187=0E8h)
020A:B4FA  26: F6 45 05 20			test	byte ptr es:[di+5],20h	; ' '
020A:B4FF  75 28				jnz	$+2Ah			; Jump if not zero
020A:B501  A1 1D10				mov	ax,word ptr ds:[1D10h]	; (020A:1D10=0)
020A:B504  2B 06 216E				sub	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:B508  3D 0018				cmp	ax,18h
020A:B50B  76 1C				jbe	$+1Eh			; Jump if below or =
020A:B50D  B8 0018				mov	ax,18h
020A:B510  C6 06 424B 01			mov	byte ptr ds:[424Bh],1	; (020A:424B=7Fh)
020A:B515  9A 1481:4BC0				call	far ptr $-6955h
020A:B51A  C6 06 424B 00			mov	byte ptr ds:[424Bh],0	; (020A:424B=7Fh)
020A:B51F  3D 0017				cmp	ax,17h
020A:B522  72 05				jb	$+7			; Jump if below
020A:B524  26: 80 4D 05 20			or	byte ptr es:[di+5],20h	; ' '
020A:B529  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B52E  9C					pushf				; Push flags
020A:B52F  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B534  5A					pop	dx
020A:B535  8E C2				mov	es,dx
020A:B537  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B53C  5A					pop	dx
020A:B53D  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B53F  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B544  74 03				je	$+5			; Jump if equal
020A:B546  E8 C837				call	$-37C6h
020A:B549  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B54E  9D					popf				; Pop flags
020A:B54F  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B554  5F					pop	di
020A:B555  5A					pop	dx
020A:B556  5B					pop	bx
020A:B557  58					pop	ax
020A:B558  C3					retn
							                        ;* No entry point to code
020A:B559  87 DB				xchg	bx,bx
020A:B55B  90					nop
020A:B55C  50					push	ax
020A:B55D  53					push	bx
020A:B55E  51					push	cx
020A:B55F  52					push	dx
020A:B560  56					push	si
020A:B561  57					push	di
020A:B562  55					push	bp
020A:B563  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B568  1E					push	ds
020A:B569  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B56E  06					push	es
020A:B56F  E8 C32E				call	$-3CCFh
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 317

020A:B572  E8 C370				call	$-3C8Dh
020A:B575  8B D8				mov	bx,ax
020A:B577  A1 17A9				mov	ax,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:B57A  8C C9				mov	cx,cs
020A:B57C  2B D9				sub	bx,cx
020A:B57E  2B C3				sub	ax,bx
020A:B580  B9 0006				mov	cx,6
020A:B583  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:B585  BD 0706				mov	bp,706h
020A:B588  B3 01				mov	bl,1
020A:B58A  3D 03E7				cmp	ax,3E7h
020A:B58D  77 0D				ja	$+0Fh			; Jump if above
020A:B58F  9A 1481:0300				call	far ptr $+4D71h
020A:B594  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:B598  C6 47 5E 07				mov	byte ptr [bx+5Eh],7
020A:B59C  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:B5A2  74 04				je	$+6			; Jump if equal
020A:B5A4  C6 47 5D 07				mov	byte ptr [bx+5Dh],7
020A:B5A8  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B5AD  9C					pushf				; Push flags
020A:B5AE  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B5B3  5A					pop	dx
020A:B5B4  8E C2				mov	es,dx
020A:B5B6  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B5BB  5A					pop	dx
020A:B5BC  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B5BE  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B5C3  74 03				je	$+5			; Jump if equal
020A:B5C5  E8 C7B8				call	$-3845h
020A:B5C8  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B5CD  9D					popf				; Pop flags
020A:B5CE  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B5D3  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B5D8  9C					pushf				; Push flags
020A:B5D9  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B5DE  5A					pop	dx
020A:B5DF  8E DA				mov	ds,dx
020A:B5E1  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B5E6  5A					pop	dx
020A:B5E7  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B5E9  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B5EE  74 03				je	$+5			; Jump if equal
020A:B5F0  E8 C78D				call	$-3870h
020A:B5F3  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B5F8  9D					popf				; Pop flags
020A:B5F9  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B5FE  5D					pop	bp
020A:B5FF  5F					pop	di
020A:B600  5E					pop	si
020A:B601  5A					pop	dx
020A:B602  59					pop	cx
020A:B603  5B					pop	bx
020A:B604  58					pop	ax
020A:B605  C3					retn
							                        ;* No entry point to code
020A:B606  87 DB				xchg	bx,bx
020A:B608  50					push	ax
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 318

020A:B609  53					push	bx
020A:B60A  51					push	cx
020A:B60B  52					push	dx
020A:B60C  56					push	si
020A:B60D  57					push	di
020A:B60E  55					push	bp
020A:B60F  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B614  1E					push	ds
020A:B615  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B61A  06					push	es
020A:B61B  E8 C282				call	$-3D7Bh
020A:B61E  E8 C2C4				call	$-3D39h
020A:B621  8B D8				mov	bx,ax
020A:B623  A1 17A9				mov	ax,word ptr ds:[17A9h]	; (020A:17A9=0)
020A:B626  8C C9				mov	cx,cs
020A:B628  2B D9				sub	bx,cx
020A:B62A  2B C3				sub	ax,bx
020A:B62C  B9 0006				mov	cx,6
020A:B62F  D3 E8				shr	ax,cl			; Shift w/zeros fill
020A:B631  8B D0				mov	dx,ax
020A:B633  8B 1E 1976				mov	bx,word ptr ds:[1976h]	; (020A:1976=6B4h)
020A:B637  A1 1974				mov	ax,word ptr ds:[1974h]	; (020A:1974=10EBh)
020A:B63A  B9 000A				mov	cx,0Ah
020A:B63D  05 03FF				add	ax,3FFh
020A:B640  83 D3 00				adc	bx,0
020A:B643  F8					clc				; Clear carry flag
020A:B644  D1 EB				shr	bx,1			; Shift w/zeros fill
020A:B646  D1 D8				rcr	ax,1			; Rotate thru carry
020A:B648  E2 FA				loop	$-4			; Loop if cx > 0

020A:B64A  92					xchg	dx,ax
020A:B64B  2B C2				sub	ax,dx
020A:B64D  3D 0000				cmp	ax,0
020A:B650  7D 02				jge	$+4			; Jump if > or =
020A:B652  33 C0				xor	ax,ax			; Zero register
020A:B654  BD 0708				mov	bp,708h
020A:B657  3E: C7 46 00 2020			mov	word ptr ds:[bp],2020h
020A:B65D  3E: C6 46 02 20			mov	byte ptr ds:[bp+2],20h	; ' '
020A:B662  BD 0706				mov	bp,706h
020A:B665  B3 01				mov	bl,1
020A:B667  3D 03E7				cmp	ax,3E7h
020A:B66A  77 0D				ja	$+0Fh			; Jump if above
020A:B66C  9A 1481:0300				call	far ptr $+4C94h
020A:B671  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (020A:1326=0)
020A:B675  C6 47 5E 07				mov	byte ptr [bx+5Eh],7
020A:B679  2E: 80 3E 3FB0 00			cmp	byte ptr cs:[3FB0h],0	; (020A:3FB0=15h)
020A:B67F  74 04				je	$+6			; Jump if equal
020A:B681  C6 47 5D 07				mov	byte ptr [bx+5Dh],7
020A:B685  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B68A  9C					pushf				; Push flags
020A:B68B  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B690  5A					pop	dx
020A:B691  8E C2				mov	es,dx
020A:B693  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B698  5A					pop	dx
020A:B699  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B69B  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 319

020A:B6A0  74 03				je	$+5			; Jump if equal
020A:B6A2  E8 C6DB				call	$-3922h
020A:B6A5  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B6AA  9D					popf				; Pop flags
020A:B6AB  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B6B0  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:B6B5  9C					pushf				; Push flags
020A:B6B6  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B6BB  5A					pop	dx
020A:B6BC  8E DA				mov	ds,dx
020A:B6BE  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:B6C3  5A					pop	dx
020A:B6C4  75 0A				jnz	$+0Ch			; Jump if not zero
020A:B6C6  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B6CB  74 03				je	$+5			; Jump if equal
020A:B6CD  E8 C6B0				call	$-394Dh
020A:B6D0  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:B6D5  9D					popf				; Pop flags
020A:B6D6  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:B6DB  5D					pop	bp
020A:B6DC  5F					pop	di
020A:B6DD  5E					pop	si
020A:B6DE  5A					pop	dx
020A:B6DF  59					pop	cx
020A:B6E0  5B					pop	bx
020A:B6E1  58					pop	ax
020A:B6E2  C3					retn
020A:B6E3  D8					db	0D8h
020A:B6E4  D9					db	0D9h
020A:B6E5  DA					db	0DAh
020A:B6E6  DB					db	0DBh
020A:B6E7  DC					db	0DCh
020A:B6E8  DD DE 26DF				fstp	qword ptr ds:[26DFh][bp]	; (020A:26DF=7264h) Pop st to memory
020A:B6EC  9B					db	9Bh
020A:B6ED  90					nop
020A:B6EE  87 DB				xchg	bx,bx
020A:B6F0  F6 06 1D72 3F			test	byte ptr ds:[1D72h],3Fh	; (020A:1D72=0) '?'
020A:B6F5  74 59				jz	$+5Bh			; Jump if zero
020A:B6F7  F7 06 3D3C 0001			test	word ptr ds:[3D3Ch],1	; (020A:3D3C=2477h)
020A:B6FD  75 51				jnz	$+53h			; Jump if not zero
020A:B6FF  50					push	ax
020A:B700  53					push	bx
020A:B701  57					push	di
020A:B702  06					push	es
020A:B703  1E					push	ds
020A:B704  07					pop	es
020A:B705  BF 1978				mov	di,1978h
020A:B708  B8 9B9B				mov	ax,9B9Bh
020A:B70B  26: 8B 1D				mov	bx,es:[di]
020A:B70E  80 FB CD				cmp	bl,0CDh
020A:B711  74 03				je	$+5			; Jump if equal
020A:B713  F8					clc				; Clear carry flag
020A:B714  EB 35				jmp	short $+37h
020A:B716  8A DF				mov	bl,bh
020A:B718  8A C3				mov	al,bl
020A:B71A  3C 3E				cmp	al,3Eh			; '>'
020A:B71C  72 03				jb	$+5			; Jump if below
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 320

020A:B71E  F8					clc				; Clear carry flag
020A:B71F  EB 2A				jmp	short $+2Ch
020A:B721  2C 34				sub	al,34h			; '4'
020A:B723  BB 8313				mov	bx,8313h
020A:B726  2E: D7				xlat	cs:[bx]			; al=[al+[bx]] table
020A:B728  3C 9B				cmp	al,9Bh
020A:B72A  75 04				jne	$+6			; Jump if not equal
020A:B72C  B0 90				mov	al,90h
020A:B72E  EB 02				jmp	short $+4
020A:B730  86 E0				xchg	ah,al
020A:B732  26: 8B 1D				mov	bx,es:[di]
020A:B735  89 1E 3D43				mov	word ptr ds:[3D43h],bx	; (020A:3D43=3974h)
020A:B739  26: 89 05				mov	es:[di],ax
020A:B73C  A3 3D45				mov	word ptr ds:[3D45h],ax	; (020A:3D45=512Ch)
020A:B73F  C6 06 3D49 02			mov	byte ptr ds:[3D49h],2	; (020A:3D49=8Ah)
020A:B744  A1 216E				mov	ax,word ptr ds:[216Eh]	; (020A:216E=104h)
020A:B747  A3 3D47				mov	word ptr ds:[3D47h],ax	; (020A:3D47=4B3h)
020A:B74A  F9					stc				; Set carry flag
020A:B74B  07					pop	es
020A:B74C  5F					pop	di
020A:B74D  5B					pop	bx
020A:B74E  58					pop	ax
020A:B74F  C3					retn
020A:B750  F8					clc				; Clear carry flag
020A:B751  C3					retn
020A:B752  87 DB				xchg	bx,bx
020A:B754  1E					push	ds
020A:B755  0E					push	cs
020A:B756  1F					pop	ds
020A:B757  B8 2523				mov	ax,2523h
020A:B75A  BA 8391				mov	dx,8391h
020A:B75D  CD 21				int	21h			; DOS Services  ah=function 25h
										;  set intrpt vector al to ds:dx
020A:B75F  1F					pop	ds
020A:B760  C3					retn
020A:B761  2E: C6 06 00C8 01			mov	byte ptr cs:[0C8h],1	; (020A:00C8=6)
020A:B767  F8					clc				; Clear carry flag
020A:B768  CB					retf				; Return far
020A:B769  00					db	0
020A:B76A  00					db	0
020A:B76B  00					db	0
020A:B76C  00					db	0
020A:B76D  00					db	0
020A:B76E  00					db	0
020A:B76F  00 00				add	[bx+si],al
020A:B771  00 87 F7DB				add	byte ptr ds:[0F7DBh][bx],al	; (020A:F7DB=0DEh)
020A:B775  06					push	es
020A:B776  7B 3D				jnp	$+3Fh			; Jump if not parity
020A:B778  E0 00				loopnz	$+2			; Loop if zf=0, cx>0

020A:B77A  75 01				jnz	$+3			; Jump if not zero
020A:B77C  C3					retn
							                        ;* No entry point to code
020A:B77D  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B781  50					push	ax
020A:B782  53					push	bx
020A:B783  51					push	cx
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 321

020A:B784  52					push	dx
020A:B785  56					push	si
020A:B786  57					push	di
020A:B787  55					push	bp
020A:B788  BB FFFF				mov	bx,0FFFFh
020A:B78B  E9 0191				jmp	$+194h
							                        ;* No entry point to code
020A:B78E  87 DB				xchg	bx,bx
020A:B790  83 3E 3D4A FF			cmp	word ptr ds:[3D4Ah],0FFFFh	; (020A:3D4A=0D2C8h)
020A:B795  74 09				je	$+0Bh			; Jump if equal
020A:B797  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B79D  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B79F  C3					retn
							                        ;* No entry point to code
020A:B7A0  50					push	ax
020A:B7A1  B0 01				mov	al,1
020A:B7A3  9A 1481:8AF0				call	far ptr $-2CB3h
020A:B7A8  58					pop	ax
020A:B7A9  C3					retn
							                        ;* No entry point to code
020A:B7AA  50					push	ax
020A:B7AB  53					push	bx
020A:B7AC  51					push	cx
020A:B7AD  52					push	dx
020A:B7AE  56					push	si
020A:B7AF  57					push	di
020A:B7B0  55					push	bp
020A:B7B1  A1 3D4A				mov	ax,word ptr ds:[3D4Ah]	; (020A:3D4A=0D2C8h)
020A:B7B4  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B7B8  8B 1E 3D4C				mov	bx,word ptr ds:[3D4Ch]	; (020A:3D4C=8ACBh)
020A:B7BC  A1 3D4E				mov	ax,word ptr ds:[3D4Eh]	; (020A:3D4E=9C16h)
020A:B7BF  E9 015D				jmp	$+160h
							                        ;* No entry point to code
020A:B7C2  87 DB				xchg	bx,bx
020A:B7C4  83 3E 3D50 FF			cmp	word ptr ds:[3D50h],0FFFFh	; (020A:3D50=0A3Dh)
020A:B7C9  74 09				je	$+0Bh			; Jump if equal
020A:B7CB  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B7D1  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B7D3  C3					retn
							                        ;* No entry point to code
020A:B7D4  50					push	ax
020A:B7D5  B0 02				mov	al,2
020A:B7D7  9A 1481:8AF0				call	far ptr $-2CE7h
020A:B7DC  58					pop	ax
020A:B7DD  C3					retn
							                        ;* No entry point to code
020A:B7DE  50					push	ax
020A:B7DF  53					push	bx
020A:B7E0  51					push	cx
020A:B7E1  52					push	dx
020A:B7E2  56					push	si
020A:B7E3  57					push	di
020A:B7E4  55					push	bp
020A:B7E5  A1 3D50				mov	ax,word ptr ds:[3D50h]	; (020A:3D50=0A3Dh)
020A:B7E8  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B7EC  8B 1E 3D52				mov	bx,word ptr ds:[3D52h]	; (020A:3D52=0F6D3h)
020A:B7F0  A1 3D54				mov	ax,word ptr ds:[3D54h]	; (020A:3D54=20C4h)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 322

020A:B7F3  E9 0129				jmp	$+12Ch
							                        ;* No entry point to code
020A:B7F6  87 DB				xchg	bx,bx
020A:B7F8  83 3E 3D56 FF			cmp	word ptr ds:[3D56h],0FFFFh	; (020A:3D56=474h)
020A:B7FD  74 09				je	$+0Bh			; Jump if equal
020A:B7FF  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B805  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B807  C3					retn
							                        ;* No entry point to code
020A:B808  50					push	ax
020A:B809  B0 03				mov	al,3
020A:B80B  9A 1481:8AF0				call	far ptr $-2D1Bh
020A:B810  58					pop	ax
020A:B811  C3					retn
							                        ;* No entry point to code
020A:B812  50					push	ax
020A:B813  53					push	bx
020A:B814  51					push	cx
020A:B815  52					push	dx
020A:B816  56					push	si
020A:B817  57					push	di
020A:B818  55					push	bp
020A:B819  A1 3D56				mov	ax,word ptr ds:[3D56h]	; (020A:3D56=474h)
020A:B81C  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B820  8B 1E 3D58				mov	bx,word ptr ds:[3D58h]	; (020A:3D58=0D3F6h)
020A:B824  A1 3D5A				mov	ax,word ptr ds:[3D5Ah]	; (020A:3D5A=0D322h)
020A:B827  E9 00F5				jmp	$+0F8h
							                        ;* No entry point to code
020A:B82A  87 DB				xchg	bx,bx
020A:B82C  83 3E 3D5C FF			cmp	word ptr ds:[3D5Ch],0FFFFh	; (020A:3D5C=1688h)
020A:B831  74 09				je	$+0Bh			; Jump if equal
020A:B833  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B839  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B83B  C3					retn
							                        ;* No entry point to code
020A:B83C  50					push	ax
020A:B83D  B0 04				mov	al,4
020A:B83F  9A 1481:8AF0				call	far ptr $-2D4Fh
020A:B844  58					pop	ax
020A:B845  C3					retn
							                        ;* No entry point to code
020A:B846  50					push	ax
020A:B847  53					push	bx
020A:B848  51					push	cx
020A:B849  52					push	dx
020A:B84A  56					push	si
020A:B84B  57					push	di
020A:B84C  55					push	bp
020A:B84D  A1 3D5C				mov	ax,word ptr ds:[3D5Ch]	; (020A:3D5C=1688h)
020A:B850  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B854  8B 1E 3D5E				mov	bx,word ptr ds:[3D5Eh]	; (020A:3D5E=3D9Ch)
020A:B858  A1 3D60				mov	ax,word ptr ds:[3D60h]	; (020A:3D60=1C77h)
020A:B85B  E9 00C1				jmp	$+0C4h
							                        ;* No entry point to code
020A:B85E  87 DB				xchg	bx,bx
020A:B860  83 3E 3D68 FF			cmp	word ptr ds:[3D68h],0FFFFh	; (020A:3D68=0D3C8h)
020A:B865  74 09				je	$+0Bh			; Jump if equal
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 323

020A:B867  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B86D  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B86F  C3					retn
							                        ;* No entry point to code
020A:B870  50					push	ax
020A:B871  B0 06				mov	al,6
020A:B873  9A 1481:8AF0				call	far ptr $-2D83h
020A:B878  58					pop	ax
020A:B879  C3					retn
							                        ;* No entry point to code
020A:B87A  50					push	ax
020A:B87B  53					push	bx
020A:B87C  51					push	cx
020A:B87D  52					push	dx
020A:B87E  56					push	si
020A:B87F  57					push	di
020A:B880  55					push	bp
020A:B881  A1 3D68				mov	ax,word ptr ds:[3D68h]	; (020A:3D68=0D3C8h)
020A:B884  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B888  8B 1E 3D6A				mov	bx,word ptr ds:[3D6Ah]	; (020A:3D6A=8BCBh)
020A:B88C  A1 3D6C				mov	ax,word ptr ds:[3D6Ch]	; (020A:3D6C=3E16h)
020A:B88F  E9 008D				jmp	$+90h
							                        ;* No entry point to code
020A:B892  87 DB				xchg	bx,bx
020A:B894  83 3E 3D62 FF			cmp	word ptr ds:[3D62h],0FFFFh	; (020A:3D62=552Ch)
020A:B899  74 09				je	$+0Bh			; Jump if equal
020A:B89B  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B8A1  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B8A3  C3					retn
							                        ;* No entry point to code
020A:B8A4  50					push	ax
020A:B8A5  B0 05				mov	al,5
020A:B8A7  9A 1481:8AF0				call	far ptr $-2DB7h
020A:B8AC  58					pop	ax
020A:B8AD  C3					retn
							                        ;* No entry point to code
020A:B8AE  50					push	ax
020A:B8AF  53					push	bx
020A:B8B0  51					push	cx
020A:B8B1  52					push	dx
020A:B8B2  56					push	si
020A:B8B3  57					push	di
020A:B8B4  55					push	bp
020A:B8B5  A1 3D62				mov	ax,word ptr ds:[3D62h]	; (020A:3D62=552Ch)
020A:B8B8  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B8BC  8B 1E 3D64				mov	bx,word ptr ds:[3D64h]	; (020A:3D64=80BBh)
020A:B8C0  A1 3D66				mov	ax,word ptr ds:[3D66h]	; (020A:3D66=8A00h)
020A:B8C3  EB 5A				jmp	short $+5Ch
							                        ;* No entry point to code
020A:B8C5  87 DB				xchg	bx,bx
020A:B8C7  90					nop
020A:B8C8  83 3E 3D74 FF			cmp	word ptr ds:[3D74h],0FFFFh	; (020A:3D74=474h)
020A:B8CD  74 08				je	$+0Ah			; Jump if equal
020A:B8CF  F7 06 3D7B 0060			test	word ptr ds:[3D7Bh],60h	; (020A:3D7B=3E16h)
020A:B8D5  75 01				jnz	$+3			; Jump if not zero
020A:B8D7  C3					retn
							                        ;* No entry point to code
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 324

020A:B8D8  50					push	ax
020A:B8D9  53					push	bx
020A:B8DA  51					push	cx
020A:B8DB  52					push	dx
020A:B8DC  56					push	si
020A:B8DD  57					push	di
020A:B8DE  55					push	bp
020A:B8DF  A1 3D74				mov	ax,word ptr ds:[3D74h]	; (020A:3D74=474h)
020A:B8E2  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B8E6  8B 1E 3D76				mov	bx,word ptr ds:[3D76h]	; (020A:3D76=0D3F7h)
020A:B8EA  A1 3D78				mov	ax,word ptr ds:[3D78h]	; (020A:3D78=0D323h)
020A:B8ED  EB 30				jmp	short $+32h
							                        ;* No entry point to code
020A:B8EF  90					nop
020A:B8F0  83 3E 3D6E FF			cmp	word ptr ds:[3D6Eh],0FFFFh	; (020A:3D6E=0B3Dh)
020A:B8F5  74 09				je	$+0Bh			; Jump if equal
020A:B8F7  F7 06 3D7B 00E0			test	word ptr ds:[3D7Bh],0E0h	; (020A:3D7B=3E16h)
020A:B8FD  75 0B				jnz	$+0Dh			; Jump if not zero
020A:B8FF  C3					retn
							                        ;* No entry point to code
020A:B900  50					push	ax
020A:B901  B0 07				mov	al,7
020A:B903  9A 1481:8AF0				call	far ptr $-2E13h
020A:B908  58					pop	ax
020A:B909  C3					retn
							                        ;* No entry point to code
020A:B90A  50					push	ax
020A:B90B  53					push	bx
020A:B90C  51					push	cx
020A:B90D  52					push	dx
020A:B90E  56					push	si
020A:B90F  57					push	di
020A:B910  55					push	bp
020A:B911  A1 3D6E				mov	ax,word ptr ds:[3D6Eh]	; (020A:3D6E=0B3Dh)
020A:B914  2E: A3 83A0				mov	word ptr cs:[83A0h],ax	; (020A:83A0=19EAh)
020A:B918  8B 1E 3D70				mov	bx,word ptr ds:[3D70h]	; (020A:3D70=0F6D3h)
020A:B91C  A1 3D72				mov	ax,word ptr ds:[3D72h]	; (020A:3D72=20C4h)
020A:B91F  2E: FF 36 3FB4			push	word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:B924  06					push	es
020A:B925  FF 36 2FD4				push	word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:B929  FF 36 2FD2				push	word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:B92D  80 3E 17A8 01			cmp	byte ptr ds:[17A8h],1	; (020A:17A8=0)
020A:B932  75 03				jne	$+5			; Jump if not equal
020A:B934  E9 0226				jmp	$+229h
							                        ;* No entry point to code
020A:B937  F7 06 1F86 8000			test	word ptr ds:[1F86h],8000h	; (020A:1F86=0)
020A:B93D  74 10				jz	$+12h			; Jump if zero
020A:B93F  81 FB C000				cmp	bx,0C000h
020A:B943  77 0A				ja	$+0Ch			; Jump if above
020A:B945  03 1E 470E				add	bx,word ptr ds:[470Eh]	; (020A:470E=0C603h)
020A:B949  72 04				jc	$+6			; Jump if carry Set
020A:B94B  89 1E 3D8E				mov	word ptr ds:[3D8Eh],bx	; (020A:3D8E=0A17h)
020A:B94F  8B 1E 216C				mov	bx,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:B953  C6 06 3C2B 01			mov	byte ptr ds:[3C2Bh],1	; (020A:3C2B=3)
020A:B958  BA 0001				mov	dx,1
020A:B95B  E8 AA82				call	$-557Bh
020A:B95E  73 43				jnc	$+45h			; Jump if carry=0
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 325

020A:B960  26: 8A 4D 04				mov	cl,es:[di+4]
020A:B964  80 E1 1F				and	cl,1Fh
020A:B967  80 F9 1F				cmp	cl,1Fh
020A:B96A  75 11				jne	$+13h			; Jump if not equal
020A:B96C  26: 8A 4D 09				mov	cl,es:[di+9]
020A:B970  80 F9 40				cmp	cl,40h			; '@'
020A:B973  72 08				jb	$+0Ah			; Jump if below
020A:B975  80 F9 44				cmp	cl,44h			; 'D'
020A:B978  77 03				ja	$+5			; Jump if above
020A:B97A  E9 01E0				jmp	$+1E3h
							                        ;* No entry point to code
020A:B97D  50					push	ax
020A:B97E  53					push	bx
020A:B97F  BB 2F9C				mov	bx,2F9Ch
020A:B982  26: 8A 45 05				mov	al,es:[di+5]
020A:B986  25 000F				and	ax,0Fh
020A:B989  D7					xlat				; al=[al+[bx]] table
020A:B98A  0A C0				or	al,al			; Zero ?
020A:B98C  75 04				jnz	$+6			; Jump if not zero
020A:B98E  26: 8A 45 06				mov	al,es:[di+6]
020A:B992  03 F8				add	di,ax
020A:B994  5B					pop	bx
020A:B995  58					pop	ax
020A:B996  26: 3B 1D				cmp	bx,es:[di]
020A:B999  75 08				jne	$+0Ah			; Jump if not equal
020A:B99B  26: 3B 45 02				cmp	ax,es:[di+2]
020A:B99F  75 02				jne	$+4			; Jump if not equal
020A:B9A1  EB BD				jmp	short $-41h
							                        ;* No entry point to code
020A:B9A3  BF 41A1				mov	di,41A1h
020A:B9A6  89 1D				mov	[di],bx
020A:B9A8  89 45 02				mov	[di+2],ax
020A:B9AB  C6 45 04 5F				mov	byte ptr [di+4],5Fh	; '_'
020A:B9AF  C6 45 05 02				mov	byte ptr [di+5],2
020A:B9B3  C6 45 06 00				mov	byte ptr [di+6],0
020A:B9B7  C7 45 07 203F			mov	word ptr [di+7],203Fh
020A:B9BC  06					push	es
020A:B9BD  57					push	di
020A:B9BE  8E C3				mov	es,bx
020A:B9C0  8B F8				mov	di,ax
020A:B9C2  9A 1481:8834				call	far ptr $-318Eh
020A:B9C7  26: 80 3D 8D				cmp	byte ptr es:[di],8Dh
020A:B9CB  5F					pop	di
020A:B9CC  07					pop	es
020A:B9CD  75 18				jnz	$+1Ah			; Jump if not zero
020A:B9CF  B0 0A				mov	al,0Ah
020A:B9D1  F7 06 3D7B 0020			test	word ptr ds:[3D7Bh],20h	; (020A:3D7B=3E16h)
020A:B9D7  75 24				jnz	$+26h			; Jump if not zero
020A:B9D9  B0 09				mov	al,9
020A:B9DB  F7 06 3D7B 0040			test	word ptr ds:[3D7Bh],40h	; (020A:3D7B=3E16h)
020A:B9E1  75 1A				jnz	$+1Ch			; Jump if not zero
020A:B9E3  B0 08				mov	al,8
020A:B9E5  EB 16				jmp	short $+18h
							                        ;* No entry point to code
020A:B9E7  B0 44				mov	al,44h			; 'D'
020A:B9E9  F7 06 3D7B 0020			test	word ptr ds:[3D7Bh],20h	; (020A:3D7B=3E16h)
020A:B9EF  75 0C				jnz	$+0Eh			; Jump if not zero
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 326

020A:B9F1  B0 42				mov	al,42h			; 'B'
020A:B9F3  F7 06 3D7B 0040			test	word ptr ds:[3D7Bh],40h	; (020A:3D7B=3E16h)
020A:B9F9  75 02				jnz	$+4			; Jump if not zero
020A:B9FB  B0 40				mov	al,40h			; '@'
020A:B9FD  88 45 09				mov	[di+9],al
020A:BA00  A1 3D8E				mov	ax,word ptr ds:[3D8Eh]	; (020A:3D8E=0A17h)
020A:BA03  C7 06 3D8E FFFF			mov	word ptr ds:[3D8Eh],0FFFFh	; (020A:3D8E=0A17h)
020A:BA09  3D FFFF				cmp	ax,0FFFFh
020A:BA0C  74 07				je	$+9			; Jump if equal
020A:BA0E  C7 45 0A 0000			mov	word ptr [di+0Ah],0
020A:BA13  EB 54				jmp	short $+56h
							                        ;* No entry point to code
020A:BA15  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:BA18  F7 06 3D7B 0004			test	word ptr ds:[3D7Bh],4	; (020A:3D7B=3E16h)
020A:BA1E  75 46				jnz	$+48h			; Jump if not zero
020A:BA20  A1 3D7F				mov	ax,word ptr ds:[3D7Fh]	; (020A:3D7F=85EBh)
020A:BA23  3D FFFF				cmp	ax,0FFFFh
020A:BA26  75 3E				jne	$+40h			; Jump if not equal
020A:BA28  A1 234C				mov	ax,word ptr ds:[234Ch]	; (020A:234C=0)
020A:BA2B  F6 06 2322 08			test	byte ptr ds:[2322h],8	; (020A:2322=0)
020A:BA30  74 34				jz	$+36h			; Jump if zero
020A:BA32  8A 0E 235D				mov	cl,byte ptr ds:[235Dh]	; (020A:235D=0)
020A:BA36  80 F9 26				cmp	cl,26h			; '&'
020A:BA39  75 05				jne	$+7			; Jump if not equal
020A:BA3B  A1 234A				mov	ax,word ptr ds:[234Ah]	; (020A:234A=0)
020A:BA3E  EB 26				jmp	short $+28h
							                        ;* No entry point to code
020A:BA40  80 F9 2E				cmp	cl,2Eh			; '.'
020A:BA43  75 05				jne	$+7			; Jump if not equal
020A:BA45  A1 216C				mov	ax,word ptr ds:[216Ch]	; (020A:216C=2EFFh)
020A:BA48  EB 1C				jmp	short $+1Eh
							                        ;* No entry point to code
020A:BA4A  80 F9 36				cmp	cl,36h			; '6'
020A:BA4D  75 05				jne	$+7			; Jump if not equal
020A:BA4F  A1 2352				mov	ax,word ptr ds:[2352h]	; (020A:2352=0)
020A:BA52  EB 12				jmp	short $+14h
							                        ;* No entry point to code
020A:BA54  80 F9 64				cmp	cl,64h			; 'd'
020A:BA57  75 05				jne	$+7			; Jump if not equal
020A:BA59  A1 234E				mov	ax,word ptr ds:[234Eh]	; (020A:234E=0)
020A:BA5C  EB 08				jmp	short $+0Ah
							                        ;* No entry point to code
020A:BA5E  80 F9 65				cmp	cl,65h			; 'e'
020A:BA61  75 03				jne	$+5			; Jump if not equal
020A:BA63  A1 2350				mov	ax,word ptr ds:[2350h]	; (020A:2350=0)
020A:BA66  89 45 0A				mov	[di+0Ah],ax
020A:BA69  F7 06 3D3C 4000			test	word ptr ds:[3D3Ch],4000h	; (020A:3D3C=2477h)
020A:BA6F  74 03				jz	$+5			; Jump if zero
020A:BA71  E9 00E9				jmp	$+0ECh
							                        ;* No entry point to code
020A:BA74  E8 CCE9				call	$-3314h
020A:BA77  8B D8				mov	bx,ax
020A:BA79  BF 41A1				mov	di,41A1h
020A:BA7C  2E: A1 83A0				mov	ax,word ptr cs:[83A0h]	; (020A:83A0=19EAh)
020A:BA80  89 1D				mov	[di],bx
020A:BA82  89 45 02				mov	[di+2],ax
020A:BA85  80 3E 1657 01			cmp	byte ptr ds:[1657h],1	; (020A:1657=0)
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 327

020A:BA8A  77 04				ja	$+6			; Jump if above
020A:BA8C  80 4D 05 01				or	byte ptr [di+5],1
020A:BA90  F7 06 3D7B 0020			test	word ptr ds:[3D7Bh],20h	; (020A:3D7B=3E16h)
020A:BA96  75 52				jnz	$+54h			; Jump if not zero
020A:BA98  F7 06 3D7B 0040			test	word ptr ds:[3D7Bh],40h	; (020A:3D7B=3E16h)
020A:BA9E  75 08				jnz	$+0Ah			; Jump if not zero
020A:BAA0  F7 06 3D7B 0080			test	word ptr ds:[3D7Bh],80h	; (020A:3D7B=3E16h)
020A:BAA6  75 1A				jnz	$+1Ch			; Jump if not zero
020A:BAA8  C6 06 3C2B 00			mov	byte ptr ds:[3C2Bh],0	; (020A:3C2B=3)
020A:BAAD  BA 0001				mov	dx,1
020A:BAB0  E8 A92D				call	$-56D0h
020A:BAB3  73 03				jnc	$+5			; Jump if carry=0
020A:BAB5  E9 00A5				jmp	$+0A8h
							                        ;* No entry point to code
020A:BAB8  BF 41A1				mov	di,41A1h
020A:BABB  C6 45 04 40				mov	byte ptr [di+4],40h	; '@'
020A:BABF  E9 0098				jmp	$+9Bh
							                        ;* No entry point to code
020A:BAC2  BA 0004				mov	dx,4
020A:BAC5  E8 A918				call	$-56E5h
020A:BAC8  73 03				jnc	$+5			; Jump if carry=0
020A:BACA  E9 0090				jmp	$+93h
							                        ;* No entry point to code
020A:BACD  BF 41A1				mov	di,41A1h
020A:BAD0  C6 45 04 43				mov	byte ptr [di+4],43h	; 'C'
020A:BAD4  80 4D 05 08				or	byte ptr [di+5],8
020A:BAD8  57					push	di
020A:BAD9  1E					push	ds
020A:BADA  07					pop	es
020A:BADB  83 C7 09				add	di,9
020A:BADE  BE 232C				mov	si,232Ch
020A:BAE1  B9 0029				mov	cx,29h
020A:BAE4  FC					cld				; Clear direction
020A:BAE5  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:BAE7  5F					pop	di
020A:BAE8  EB 70				jmp	short $+72h
							                        ;* No entry point to code
020A:BAEA  BA 0002				mov	dx,2
020A:BAED  E8 A8F0				call	$-570Dh
020A:BAF0  72 6B				jc	$+6Dh			; Jump if carry Set
020A:BAF2  BF 41A1				mov	di,41A1h
020A:BAF5  8A 0E 3D89				mov	cl,byte ptr ds:[3D89h]	; (020A:3D89=74h)
020A:BAF9  88 4D 04				mov	[di+4],cl
020A:BAFC  80 E1 23				and	cl,23h			; '#'
020A:BAFF  80 F9 20				cmp	cl,20h			; ' '
020A:BB02  75 46				jne	$+48h			; Jump if not equal
020A:BB04  C6 45 04 60				mov	byte ptr [di+4],60h	; '`'
020A:BB08  57					push	di
020A:BB09  06					push	es
020A:BB0A  B9 01F4				mov	cx,1F4h
020A:BB0D  8E C3				mov	es,bx
020A:BB0F  8B F8				mov	di,ax
020A:BB11  26: 80 3D 00				cmp	byte ptr es:[di],0
020A:BB15  75 0B				jne	$+0Dh			; Jump if not equal
020A:BB17  07					pop	es
020A:BB18  5F					pop	di
020A:BB19  B9 0001				mov	cx,1
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 328

020A:BB1C  C6 45 04 41				mov	byte ptr [di+4],41h	; 'A'
020A:BB20  EB 21				jmp	short $+23h
							                        ;* No entry point to code
020A:BB22  3D FE0B				cmp	ax,0FE0Bh
020A:BB25  76 06				jbe	$+8			; Jump if below or =
020A:BB27  B9 FFFF				mov	cx,0FFFFh
020A:BB2A  2B C8				sub	cx,ax
020A:BB2C  41					inc	cx
020A:BB2D  32 C0				xor	al,al			; Zero register
020A:BB2F  F6 06 3D89 08			test	byte ptr ds:[3D89h],8	; (020A:3D89=74h)
020A:BB34  74 02				jz	$+4			; Jump if zero
020A:BB36  B0 24				mov	al,24h			; '$'
020A:BB38  51					push	cx
020A:BB39  FC					cld				; Clear direction
020A:BB3A  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020A:BB3C  58					pop	ax
020A:BB3D  2B C1				sub	ax,cx
020A:BB3F  8B C8				mov	cx,ax
020A:BB41  07					pop	es
020A:BB42  5F					pop	di
020A:BB43  C7 45 06 0000			mov	word ptr [di+6],0
020A:BB48  EB 09				jmp	short $+0Bh
							                        ;* No entry point to code
020A:BB4A  8B 0E 3D8A				mov	cx,word ptr ds:[3D8Ah]	; (020A:3D8A=800Ch)
020A:BB4E  C7 45 06 1000			mov	word ptr [di+6],1000h
020A:BB53  89 4D 08				mov	[di+8],cx
020A:BB56  80 4D 05 04				or	byte ptr [di+5],4
020A:BB5A  E8 CC03				call	$-33FAh
020A:BB5D  C6 06 3C2B 00			mov	byte ptr ds:[3C2Bh],0	; (020A:3C2B=3)
020A:BB62  8F 06 2FD2				pop	word ptr ds:[2FD2h]	; (020A:2FD2=454Ch)
020A:BB66  8F 06 2FD4				pop	word ptr ds:[2FD4h]	; (020A:2FD4=3D53h)
020A:BB6A  2E: 89 16 00C2			mov	word ptr cs:[0C2h],dx	; (020A:00C2=8)
020A:BB6F  9C					pushf				; Push flags
020A:BB70  2E: 8F 06 00C6			pop	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:BB75  5A					pop	dx
020A:BB76  8E C2				mov	es,dx
020A:BB78  2E: 3B 16 3FB2			cmp	dx,word ptr cs:[3FB2h]	; (020A:3FB2=575h)
020A:BB7D  5A					pop	dx
020A:BB7E  75 0A				jnz	$+0Ch			; Jump if not zero
020A:BB80  2E: 3B 16 3FB4			cmp	dx,word ptr cs:[3FB4h]	; (020A:3FB4=6C6h)
020A:BB85  74 03				je	$+5			; Jump if equal
020A:BB87  E8 C1F6				call	$-3E07h
020A:BB8A  2E: FF 36 00C6			push	word ptr cs:[0C6h]	; (020A:00C6=0Fh)
020A:BB8F  9D					popf				; Pop flags
020A:BB90  2E: 8B 16 00C2			mov	dx,word ptr cs:[0C2h]	; (020A:00C2=8)
020A:BB95  5D					pop	bp
020A:BB96  5F					pop	di
020A:BB97  5E					pop	si
020A:BB98  5A					pop	dx
020A:BB99  59					pop	cx
020A:BB9A  5B					pop	bx
020A:BB9B  58					pop	ax
020A:BB9C  C3					retn
020A:BB9D  C0					db	0C0h
							                        ;* No entry point to code
020A:BB9E  83 28 84				sub	word ptr [bx+si],0FF84h
020A:BBA1  5C					pop	sp
           Temp.lst				Sourcer	v8.01   7-Sep-2022 12:36 am   Page 329

020A:BBA2  84 F4				test	dh,ah
020A:BBA4  83 F8 84				cmp	ax,0FF84h
020A:BBA7  20 85 84C4				and	byte ptr ds:[84C4h][di],al	; (020A:84C4=0Eh)
020A:BBAB  90					nop
020A:BBAC  84 87 90DB				test	al,byte ptr ds:[90DBh][bx]	; (020A:90DB=8Bh)
020A:BBB0  53					push	bx
020A:BBB1  33 DB				xor	bx,bx			; Zero register
020A:BBB3  8A D8				mov	bl,al
020A:BBB5  D1 E3				shl	bx,1			; Shift w/zeros fill
020A:BBB7  2E: FF 97 87CD			call	word ptr cs:[87CDh][bx]	;*(020A:87CD=0EB00h)

